
stepperTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005498  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001fc  08005628  08005628  00015628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005824  08005824  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08005824  08005824  00015824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800582c  0800582c  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800582c  0800582c  0001582c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005830  08005830  00015830  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08005834  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000288  2000007c  080058b0  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000304  080058b0  00020304  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011a2a  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000226f  00000000  00000000  00031ad6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f38  00000000  00000000  00033d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e60  00000000  00000000  00034c80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021094  00000000  00000000  00035ae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011b98  00000000  00000000  00056b74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb4db  00000000  00000000  0006870c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00133be7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046e4  00000000  00000000  00133c38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005610 	.word	0x08005610

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	08005610 	.word	0x08005610

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <receiveUART>:
	  ring_state
}System_state;

System_state system_state = start_state;

void receiveUART(UART_HandleTypeDef uart, uint8_t receiveBuffer[BUFFERSIZE]){
 8000584:	b084      	sub	sp, #16
 8000586:	b580      	push	{r7, lr}
 8000588:	af00      	add	r7, sp, #0
 800058a:	f107 0c08 	add.w	ip, r7, #8
 800058e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	  HAL_UART_Receive_IT(&huart2, receiveBuffer, BUFFERSIZE);
 8000592:	2208      	movs	r2, #8
 8000594:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8000598:	4830      	ldr	r0, [pc, #192]	; (800065c <receiveUART+0xd8>)
 800059a:	f002 ff49 	bl	8003430 <HAL_UART_Receive_IT>
	  HAL_UART_Receive_IT(&huart1, receiveBuffer, BUFFERSIZE);
 800059e:	2208      	movs	r2, #8
 80005a0:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80005a4:	482e      	ldr	r0, [pc, #184]	; (8000660 <receiveUART+0xdc>)
 80005a6:	f002 ff43 	bl	8003430 <HAL_UART_Receive_IT>
	  	  for (;rxDone == false;){
 80005aa:	e034      	b.n	8000616 <receiveUART+0x92>
	  		  datapointer = 0;
 80005ac:	4b2d      	ldr	r3, [pc, #180]	; (8000664 <receiveUART+0xe0>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	601a      	str	r2, [r3, #0]
				if(dataBuffer[datapointer] == '#'){
 80005b2:	4b2c      	ldr	r3, [pc, #176]	; (8000664 <receiveUART+0xe0>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4a2c      	ldr	r2, [pc, #176]	; (8000668 <receiveUART+0xe4>)
 80005b8:	5cd3      	ldrb	r3, [r2, r3]
 80005ba:	2b23      	cmp	r3, #35	; 0x23
 80005bc:	d12b      	bne.n	8000616 <receiveUART+0x92>
					datapointer++;
 80005be:	4b29      	ldr	r3, [pc, #164]	; (8000664 <receiveUART+0xe0>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	3301      	adds	r3, #1
 80005c4:	4a27      	ldr	r2, [pc, #156]	; (8000664 <receiveUART+0xe0>)
 80005c6:	6013      	str	r3, [r2, #0]
				  if(dataBuffer[datapointer] ==  'p'){
 80005c8:	4b26      	ldr	r3, [pc, #152]	; (8000664 <receiveUART+0xe0>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a26      	ldr	r2, [pc, #152]	; (8000668 <receiveUART+0xe4>)
 80005ce:	5cd3      	ldrb	r3, [r2, r3]
 80005d0:	2b70      	cmp	r3, #112	; 0x70
 80005d2:	d120      	bne.n	8000616 <receiveUART+0x92>
					  datapointer++;
 80005d4:	4b23      	ldr	r3, [pc, #140]	; (8000664 <receiveUART+0xe0>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	3301      	adds	r3, #1
 80005da:	4a22      	ldr	r2, [pc, #136]	; (8000664 <receiveUART+0xe0>)
 80005dc:	6013      	str	r3, [r2, #0]
					  for(; dataBuffer[datapointer] != ','; datapointer++);
 80005de:	e004      	b.n	80005ea <receiveUART+0x66>
 80005e0:	4b20      	ldr	r3, [pc, #128]	; (8000664 <receiveUART+0xe0>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	3301      	adds	r3, #1
 80005e6:	4a1f      	ldr	r2, [pc, #124]	; (8000664 <receiveUART+0xe0>)
 80005e8:	6013      	str	r3, [r2, #0]
 80005ea:	4b1e      	ldr	r3, [pc, #120]	; (8000664 <receiveUART+0xe0>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	4a1e      	ldr	r2, [pc, #120]	; (8000668 <receiveUART+0xe4>)
 80005f0:	5cd3      	ldrb	r3, [r2, r3]
 80005f2:	2b2c      	cmp	r3, #44	; 0x2c
 80005f4:	d1f4      	bne.n	80005e0 <receiveUART+0x5c>
					  sscanf(dataBuffer+1+datapointer, "%d\n", &potipos);
 80005f6:	4b1b      	ldr	r3, [pc, #108]	; (8000664 <receiveUART+0xe0>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	3301      	adds	r3, #1
 80005fc:	4a1a      	ldr	r2, [pc, #104]	; (8000668 <receiveUART+0xe4>)
 80005fe:	4413      	add	r3, r2
 8000600:	4a1a      	ldr	r2, [pc, #104]	; (800066c <receiveUART+0xe8>)
 8000602:	491b      	ldr	r1, [pc, #108]	; (8000670 <receiveUART+0xec>)
 8000604:	4618      	mov	r0, r3
 8000606:	f004 fa11 	bl	8004a2c <siscanf>
					  buttonPressed = true;
 800060a:	4b1a      	ldr	r3, [pc, #104]	; (8000674 <receiveUART+0xf0>)
 800060c:	2201      	movs	r2, #1
 800060e:	701a      	strb	r2, [r3, #0]
					  rxDone = true;
 8000610:	4b19      	ldr	r3, [pc, #100]	; (8000678 <receiveUART+0xf4>)
 8000612:	2201      	movs	r2, #1
 8000614:	701a      	strb	r2, [r3, #0]
	  	  for (;rxDone == false;){
 8000616:	4b18      	ldr	r3, [pc, #96]	; (8000678 <receiveUART+0xf4>)
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	f083 0301 	eor.w	r3, r3, #1
 800061e:	b2db      	uxtb	r3, r3
 8000620:	2b00      	cmp	r3, #0
 8000622:	d1c3      	bne.n	80005ac <receiveUART+0x28>
					  }

				}
	  	  }

	  	  for(datapointer = 0; dataBuffer[datapointer] != 0; datapointer++){
 8000624:	4b0f      	ldr	r3, [pc, #60]	; (8000664 <receiveUART+0xe0>)
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
 800062a:	e009      	b.n	8000640 <receiveUART+0xbc>
	  		  dataBuffer[datapointer] = 0;
 800062c:	4b0d      	ldr	r3, [pc, #52]	; (8000664 <receiveUART+0xe0>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a0d      	ldr	r2, [pc, #52]	; (8000668 <receiveUART+0xe4>)
 8000632:	2100      	movs	r1, #0
 8000634:	54d1      	strb	r1, [r2, r3]
	  	  for(datapointer = 0; dataBuffer[datapointer] != 0; datapointer++){
 8000636:	4b0b      	ldr	r3, [pc, #44]	; (8000664 <receiveUART+0xe0>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	3301      	adds	r3, #1
 800063c:	4a09      	ldr	r2, [pc, #36]	; (8000664 <receiveUART+0xe0>)
 800063e:	6013      	str	r3, [r2, #0]
 8000640:	4b08      	ldr	r3, [pc, #32]	; (8000664 <receiveUART+0xe0>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a08      	ldr	r2, [pc, #32]	; (8000668 <receiveUART+0xe4>)
 8000646:	5cd3      	ldrb	r3, [r2, r3]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d1ef      	bne.n	800062c <receiveUART+0xa8>
	  	  }
}
 800064c:	bf00      	nop
 800064e:	bf00      	nop
 8000650:	46bd      	mov	sp, r7
 8000652:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000656:	b004      	add	sp, #16
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	20000168 	.word	0x20000168
 8000660:	200000e4 	.word	0x200000e4
 8000664:	20000214 	.word	0x20000214
 8000668:	20000220 	.word	0x20000220
 800066c:	200001fc 	.word	0x200001fc
 8000670:	0800564c 	.word	0x0800564c
 8000674:	2000020d 	.word	0x2000020d
 8000678:	2000020c 	.word	0x2000020c

0800067c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800067c:	b590      	push	{r4, r7, lr}
 800067e:	b0af      	sub	sp, #188	; 0xbc
 8000680:	af1e      	add	r7, sp, #120	; 0x78
  /* USER CODE BEGIN 1 */
	char uart_buf[50];
	int uart_buf_len = 0;
 8000682:	2300      	movs	r3, #0
 8000684:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000686:	f000 fde4 	bl	8001252 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800068a:	f000 f931 	bl	80008f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800068e:	f000 fa17 	bl	8000ac0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000692:	f000 f9e5 	bl	8000a60 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8000696:	f000 f97d 	bl	8000994 <MX_TIM6_Init>
  MX_USART1_UART_Init();
 800069a:	f000 f9b1 	bl	8000a00 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(MS1_GPIO_Port, MS1_Pin, GPIO_PIN_RESET);
 800069e:	2200      	movs	r2, #0
 80006a0:	2101      	movs	r1, #1
 80006a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006a6:	f001 f975 	bl	8001994 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MS2_GPIO_Port, MS2_Pin, GPIO_PIN_RESET);
 80006aa:	2200      	movs	r2, #0
 80006ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006b4:	f001 f96e 	bl	8001994 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, GPIO_PIN_SET);
 80006b8:	2201      	movs	r2, #1
 80006ba:	2101      	movs	r1, #1
 80006bc:	4879      	ldr	r0, [pc, #484]	; (80008a4 <main+0x228>)
 80006be:	f001 f969 	bl	8001994 <HAL_GPIO_WritePin>
  HAL_TIM_Base_Start_IT(&htim6);
 80006c2:	4879      	ldr	r0, [pc, #484]	; (80008a8 <main+0x22c>)
 80006c4:	f002 fb74 	bl	8002db0 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  switch(system_state) { //State machine wechselt zwischen den verschiedenen zuständen die das System einnehmen kann
 80006c8:	4b78      	ldr	r3, [pc, #480]	; (80008ac <main+0x230>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	2b03      	cmp	r3, #3
 80006ce:	f200 80dd 	bhi.w	800088c <main+0x210>
 80006d2:	a201      	add	r2, pc, #4	; (adr r2, 80006d8 <main+0x5c>)
 80006d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006d8:	08000871 	.word	0x08000871
 80006dc:	080006e9 	.word	0x080006e9
 80006e0:	08000795 	.word	0x08000795
 80006e4:	080007f1 	.word	0x080007f1

	  	  case set_time_state:{ //State um die Zeit einzustellen
	  		setTimeFlag = true;
 80006e8:	4b71      	ldr	r3, [pc, #452]	; (80008b0 <main+0x234>)
 80006ea:	2201      	movs	r2, #1
 80006ec:	701a      	strb	r2, [r3, #0]

	  		if(!receiveFlag){
 80006ee:	4b71      	ldr	r3, [pc, #452]	; (80008b4 <main+0x238>)
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	f083 0301 	eor.w	r3, r3, #1
 80006f6:	b2db      	uxtb	r3, r3
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d017      	beq.n	800072c <main+0xb0>
	  			HAL_UART_Transmit_IT(&huart2, (uint8_t*)waitForInput, BUFFERSIZE);
 80006fc:	4b6e      	ldr	r3, [pc, #440]	; (80008b8 <main+0x23c>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	2208      	movs	r2, #8
 8000702:	4619      	mov	r1, r3
 8000704:	486d      	ldr	r0, [pc, #436]	; (80008bc <main+0x240>)
 8000706:	f002 fe25 	bl	8003354 <HAL_UART_Transmit_IT>
	  			receiveUART(huart2, receiveBuffer);
 800070a:	4c6c      	ldr	r4, [pc, #432]	; (80008bc <main+0x240>)
 800070c:	4b6c      	ldr	r3, [pc, #432]	; (80008c0 <main+0x244>)
 800070e:	931d      	str	r3, [sp, #116]	; 0x74
 8000710:	4668      	mov	r0, sp
 8000712:	f104 0310 	add.w	r3, r4, #16
 8000716:	2274      	movs	r2, #116	; 0x74
 8000718:	4619      	mov	r1, r3
 800071a:	f004 f971 	bl	8004a00 <memcpy>
 800071e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000722:	f7ff ff2f 	bl	8000584 <receiveUART>
	  			receiveFlag = true;
 8000726:	4b63      	ldr	r3, [pc, #396]	; (80008b4 <main+0x238>)
 8000728:	2201      	movs	r2, #1
 800072a:	701a      	strb	r2, [r3, #0]
	  		}

	  		if(buttonPressed){
 800072c:	4b65      	ldr	r3, [pc, #404]	; (80008c4 <main+0x248>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	2b00      	cmp	r3, #0
 8000732:	d01d      	beq.n	8000770 <main+0xf4>
	  			float temp = potipos;
 8000734:	4b64      	ldr	r3, [pc, #400]	; (80008c8 <main+0x24c>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	ee07 3a90 	vmov	s15, r3
 800073c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000740:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	  			setpos = (int) 4096 * (temp / 100);
 8000744:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8000748:	eddf 6a60 	vldr	s13, [pc, #384]	; 80008cc <main+0x250>
 800074c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000750:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 80008d0 <main+0x254>
 8000754:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000758:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800075c:	ee17 2a90 	vmov	r2, s15
 8000760:	4b5c      	ldr	r3, [pc, #368]	; (80008d4 <main+0x258>)
 8000762:	601a      	str	r2, [r3, #0]
	  			HAL_NVIC_EnableIRQ(54);
 8000764:	2036      	movs	r0, #54	; 0x36
 8000766:	f000 ff04 	bl	8001572 <HAL_NVIC_EnableIRQ>
	  			buttonPressed = false;
 800076a:	4b56      	ldr	r3, [pc, #344]	; (80008c4 <main+0x248>)
 800076c:	2200      	movs	r2, #0
 800076e:	701a      	strb	r2, [r3, #0]
	  		}

	  		if(switchstate){ //Motor hat sich zu der gewünschten Position bewegt
 8000770:	4b59      	ldr	r3, [pc, #356]	; (80008d8 <main+0x25c>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	2b00      	cmp	r3, #0
 8000776:	f000 808d 	beq.w	8000894 <main+0x218>
	  			system_state = timer_state;
 800077a:	4b4c      	ldr	r3, [pc, #304]	; (80008ac <main+0x230>)
 800077c:	2202      	movs	r2, #2
 800077e:	701a      	strb	r2, [r3, #0]
	  			receiveFlag = false;
 8000780:	4b4c      	ldr	r3, [pc, #304]	; (80008b4 <main+0x238>)
 8000782:	2200      	movs	r2, #0
 8000784:	701a      	strb	r2, [r3, #0]
	  			switchstate = false;
 8000786:	4b54      	ldr	r3, [pc, #336]	; (80008d8 <main+0x25c>)
 8000788:	2200      	movs	r2, #0
 800078a:	701a      	strb	r2, [r3, #0]
	  			doneOnce = false;
 800078c:	4b53      	ldr	r3, [pc, #332]	; (80008dc <main+0x260>)
 800078e:	2200      	movs	r2, #0
 8000790:	701a      	strb	r2, [r3, #0]

	  		}
	  	  }break;
 8000792:	e07f      	b.n	8000894 <main+0x218>

	  	  case timer_state:{ //state während die Zeit abläuft

	  		HAL_GPIO_WritePin(MS1_GPIO_Port, MS1_Pin, GPIO_PIN_SET);
 8000794:	2201      	movs	r2, #1
 8000796:	2101      	movs	r1, #1
 8000798:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800079c:	f001 f8fa 	bl	8001994 <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(MS2_GPIO_Port, MS2_Pin, GPIO_PIN_SET);
 80007a0:	2201      	movs	r2, #1
 80007a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007aa:	f001 f8f3 	bl	8001994 <HAL_GPIO_WritePin>

	  		if (!doneOnce){ //enabled beim ersten durchlauf wieder den Interrupt, damit sich der Motor bewegt
 80007ae:	4b4b      	ldr	r3, [pc, #300]	; (80008dc <main+0x260>)
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	f083 0301 	eor.w	r3, r3, #1
 80007b6:	b2db      	uxtb	r3, r3
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d005      	beq.n	80007c8 <main+0x14c>
	  			HAL_NVIC_EnableIRQ(54);
 80007bc:	2036      	movs	r0, #54	; 0x36
 80007be:	f000 fed8 	bl	8001572 <HAL_NVIC_EnableIRQ>
	  			doneOnce = true;
 80007c2:	4b46      	ldr	r3, [pc, #280]	; (80008dc <main+0x260>)
 80007c4:	2201      	movs	r2, #1
 80007c6:	701a      	strb	r2, [r3, #0]
	  		}

			  if(switchstate){ //bereitet die Variablen für den nächsten state vor
 80007c8:	4b43      	ldr	r3, [pc, #268]	; (80008d8 <main+0x25c>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d063      	beq.n	8000898 <main+0x21c>
				   system_state = ring_state;
 80007d0:	4b36      	ldr	r3, [pc, #216]	; (80008ac <main+0x230>)
 80007d2:	2203      	movs	r2, #3
 80007d4:	701a      	strb	r2, [r3, #0]
				   receiveFlag = false;
 80007d6:	4b37      	ldr	r3, [pc, #220]	; (80008b4 <main+0x238>)
 80007d8:	2200      	movs	r2, #0
 80007da:	701a      	strb	r2, [r3, #0]
				   switchstate = false;
 80007dc:	4b3e      	ldr	r3, [pc, #248]	; (80008d8 <main+0x25c>)
 80007de:	2200      	movs	r2, #0
 80007e0:	701a      	strb	r2, [r3, #0]
				   rxDone = false;
 80007e2:	4b3f      	ldr	r3, [pc, #252]	; (80008e0 <main+0x264>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	701a      	strb	r2, [r3, #0]
				   stepCount = 0;
 80007e8:	4b3e      	ldr	r3, [pc, #248]	; (80008e4 <main+0x268>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]

			  }
	  	  }break;
 80007ee:	e053      	b.n	8000898 <main+0x21c>

	  	  case ring_state:{ //state während dem klingeln
	  		  wiggleFlag = true;
 80007f0:	4b3d      	ldr	r3, [pc, #244]	; (80008e8 <main+0x26c>)
 80007f2:	2201      	movs	r2, #1
 80007f4:	701a      	strb	r2, [r3, #0]
	  		  HAL_GPIO_WritePin(MS1_GPIO_Port, MS1_Pin, GPIO_PIN_RESET); //wechselt Geschwindigkeit
 80007f6:	2200      	movs	r2, #0
 80007f8:	2101      	movs	r1, #1
 80007fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007fe:	f001 f8c9 	bl	8001994 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(MS2_GPIO_Port, MS2_Pin, GPIO_PIN_RESET);
 8000802:	2200      	movs	r2, #0
 8000804:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000808:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800080c:	f001 f8c2 	bl	8001994 <HAL_GPIO_WritePin>

	  		  if(!receiveFlag){
 8000810:	4b28      	ldr	r3, [pc, #160]	; (80008b4 <main+0x238>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	f083 0301 	eor.w	r3, r3, #1
 8000818:	b2db      	uxtb	r3, r3
 800081a:	2b00      	cmp	r3, #0
 800081c:	d017      	beq.n	800084e <main+0x1d2>
	  			  HAL_UART_Transmit_IT(&huart2, (uint8_t*)waitForInput, BUFFERSIZE);
 800081e:	4b26      	ldr	r3, [pc, #152]	; (80008b8 <main+0x23c>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	2208      	movs	r2, #8
 8000824:	4619      	mov	r1, r3
 8000826:	4825      	ldr	r0, [pc, #148]	; (80008bc <main+0x240>)
 8000828:	f002 fd94 	bl	8003354 <HAL_UART_Transmit_IT>
	  			  receiveUART(huart2, receiveBuffer);
 800082c:	4c23      	ldr	r4, [pc, #140]	; (80008bc <main+0x240>)
 800082e:	4b24      	ldr	r3, [pc, #144]	; (80008c0 <main+0x244>)
 8000830:	931d      	str	r3, [sp, #116]	; 0x74
 8000832:	4668      	mov	r0, sp
 8000834:	f104 0310 	add.w	r3, r4, #16
 8000838:	2274      	movs	r2, #116	; 0x74
 800083a:	4619      	mov	r1, r3
 800083c:	f004 f8e0 	bl	8004a00 <memcpy>
 8000840:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000844:	f7ff fe9e 	bl	8000584 <receiveUART>
	  			  receiveFlag = true;
 8000848:	4b1a      	ldr	r3, [pc, #104]	; (80008b4 <main+0x238>)
 800084a:	2201      	movs	r2, #1
 800084c:	701a      	strb	r2, [r3, #0]
	  		  }

	  		  if(buttonPressed){//bereitet die Variablen für den nächsten state vor
 800084e:	4b1d      	ldr	r3, [pc, #116]	; (80008c4 <main+0x248>)
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	2b00      	cmp	r3, #0
 8000854:	d022      	beq.n	800089c <main+0x220>
	  			  system_state = set_time_state;
 8000856:	4b15      	ldr	r3, [pc, #84]	; (80008ac <main+0x230>)
 8000858:	2201      	movs	r2, #1
 800085a:	701a      	strb	r2, [r3, #0]
	  			  receiveFlag = false;
 800085c:	4b15      	ldr	r3, [pc, #84]	; (80008b4 <main+0x238>)
 800085e:	2200      	movs	r2, #0
 8000860:	701a      	strb	r2, [r3, #0]
	  			  buttonPressed = false;
 8000862:	4b18      	ldr	r3, [pc, #96]	; (80008c4 <main+0x248>)
 8000864:	2200      	movs	r2, #0
 8000866:	701a      	strb	r2, [r3, #0]
	  			  rxDone = false;
 8000868:	4b1d      	ldr	r3, [pc, #116]	; (80008e0 <main+0x264>)
 800086a:	2200      	movs	r2, #0
 800086c:	701a      	strb	r2, [r3, #0]
	  			  //HAL_NVIC_EnableIRQ(54);
	  		  }
	  	  }break;
 800086e:	e015      	b.n	800089c <main+0x220>

	  	  case start_state:{ //start state, zeigt wenn bereit

	  		  startFlag = true;
 8000870:	4b1e      	ldr	r3, [pc, #120]	; (80008ec <main+0x270>)
 8000872:	2201      	movs	r2, #1
 8000874:	701a      	strb	r2, [r3, #0]

	  		  if(switchstate){//bereitet die Variablen für den nächsten state vor
 8000876:	4b18      	ldr	r3, [pc, #96]	; (80008d8 <main+0x25c>)
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d010      	beq.n	80008a0 <main+0x224>
	  			  system_state = set_time_state;
 800087e:	4b0b      	ldr	r3, [pc, #44]	; (80008ac <main+0x230>)
 8000880:	2201      	movs	r2, #1
 8000882:	701a      	strb	r2, [r3, #0]
	  			  switchstate = false;
 8000884:	4b14      	ldr	r3, [pc, #80]	; (80008d8 <main+0x25c>)
 8000886:	2200      	movs	r2, #0
 8000888:	701a      	strb	r2, [r3, #0]
	  		  }
	  	  }break;
 800088a:	e009      	b.n	80008a0 <main+0x224>

	  	  default:{
	  		  system_state = start_state;
 800088c:	4b07      	ldr	r3, [pc, #28]	; (80008ac <main+0x230>)
 800088e:	2200      	movs	r2, #0
 8000890:	701a      	strb	r2, [r3, #0]
	  		  break;
 8000892:	e006      	b.n	80008a2 <main+0x226>
	  	  }break;
 8000894:	bf00      	nop
 8000896:	e717      	b.n	80006c8 <main+0x4c>
	  	  }break;
 8000898:	bf00      	nop
 800089a:	e715      	b.n	80006c8 <main+0x4c>
	  	  }break;
 800089c:	bf00      	nop
 800089e:	e713      	b.n	80006c8 <main+0x4c>
	  	  }break;
 80008a0:	bf00      	nop
	  switch(system_state) { //State machine wechselt zwischen den verschiedenen zuständen die das System einnehmen kann
 80008a2:	e711      	b.n	80006c8 <main+0x4c>
 80008a4:	48000400 	.word	0x48000400
 80008a8:	20000098 	.word	0x20000098
 80008ac:	200002e8 	.word	0x200002e8
 80008b0:	2000020a 	.word	0x2000020a
 80008b4:	20000210 	.word	0x20000210
 80008b8:	20000008 	.word	0x20000008
 80008bc:	20000168 	.word	0x20000168
 80008c0:	20000218 	.word	0x20000218
 80008c4:	2000020d 	.word	0x2000020d
 80008c8:	200001fc 	.word	0x200001fc
 80008cc:	42c80000 	.word	0x42c80000
 80008d0:	45800000 	.word	0x45800000
 80008d4:	200001f8 	.word	0x200001f8
 80008d8:	2000020b 	.word	0x2000020b
 80008dc:	2000020f 	.word	0x2000020f
 80008e0:	2000020c 	.word	0x2000020c
 80008e4:	200001ec 	.word	0x200001ec
 80008e8:	20000209 	.word	0x20000209
 80008ec:	20000000 	.word	0x20000000

080008f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b096      	sub	sp, #88	; 0x58
 80008f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008f6:	f107 0314 	add.w	r3, r7, #20
 80008fa:	2244      	movs	r2, #68	; 0x44
 80008fc:	2100      	movs	r1, #0
 80008fe:	4618      	mov	r0, r3
 8000900:	f004 f88c 	bl	8004a1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000904:	463b      	mov	r3, r7
 8000906:	2200      	movs	r2, #0
 8000908:	601a      	str	r2, [r3, #0]
 800090a:	605a      	str	r2, [r3, #4]
 800090c:	609a      	str	r2, [r3, #8]
 800090e:	60da      	str	r2, [r3, #12]
 8000910:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000912:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000916:	f001 f87d 	bl	8001a14 <HAL_PWREx_ControlVoltageScaling>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000920:	f000 faae 	bl	8000e80 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000924:	2310      	movs	r3, #16
 8000926:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000928:	2301      	movs	r3, #1
 800092a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800092c:	2300      	movs	r3, #0
 800092e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000930:	2360      	movs	r3, #96	; 0x60
 8000932:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000934:	2302      	movs	r3, #2
 8000936:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000938:	2301      	movs	r3, #1
 800093a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800093c:	2301      	movs	r3, #1
 800093e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000940:	2310      	movs	r3, #16
 8000942:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000944:	2307      	movs	r3, #7
 8000946:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000948:	2302      	movs	r3, #2
 800094a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800094c:	2302      	movs	r3, #2
 800094e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000950:	f107 0314 	add.w	r3, r7, #20
 8000954:	4618      	mov	r0, r3
 8000956:	f001 f8b3 	bl	8001ac0 <HAL_RCC_OscConfig>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000960:	f000 fa8e 	bl	8000e80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000964:	230f      	movs	r3, #15
 8000966:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000968:	2303      	movs	r3, #3
 800096a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800096c:	2300      	movs	r3, #0
 800096e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000970:	2300      	movs	r3, #0
 8000972:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000974:	2300      	movs	r3, #0
 8000976:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000978:	463b      	mov	r3, r7
 800097a:	2101      	movs	r1, #1
 800097c:	4618      	mov	r0, r3
 800097e:	f001 fcb3 	bl	80022e8 <HAL_RCC_ClockConfig>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000988:	f000 fa7a 	bl	8000e80 <Error_Handler>
  }
}
 800098c:	bf00      	nop
 800098e:	3758      	adds	r7, #88	; 0x58
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}

08000994 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b084      	sub	sp, #16
 8000998:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800099a:	1d3b      	adds	r3, r7, #4
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
 80009a0:	605a      	str	r2, [r3, #4]
 80009a2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80009a4:	4b14      	ldr	r3, [pc, #80]	; (80009f8 <MX_TIM6_Init+0x64>)
 80009a6:	4a15      	ldr	r2, [pc, #84]	; (80009fc <MX_TIM6_Init+0x68>)
 80009a8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 32000;
 80009aa:	4b13      	ldr	r3, [pc, #76]	; (80009f8 <MX_TIM6_Init+0x64>)
 80009ac:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 80009b0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009b2:	4b11      	ldr	r3, [pc, #68]	; (80009f8 <MX_TIM6_Init+0x64>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1;
 80009b8:	4b0f      	ldr	r3, [pc, #60]	; (80009f8 <MX_TIM6_Init+0x64>)
 80009ba:	2201      	movs	r2, #1
 80009bc:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80009be:	4b0e      	ldr	r3, [pc, #56]	; (80009f8 <MX_TIM6_Init+0x64>)
 80009c0:	2280      	movs	r2, #128	; 0x80
 80009c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80009c4:	480c      	ldr	r0, [pc, #48]	; (80009f8 <MX_TIM6_Init+0x64>)
 80009c6:	f002 f99b 	bl	8002d00 <HAL_TIM_Base_Init>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80009d0:	f000 fa56 	bl	8000e80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009d4:	2300      	movs	r3, #0
 80009d6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009d8:	2300      	movs	r3, #0
 80009da:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80009dc:	1d3b      	adds	r3, r7, #4
 80009de:	4619      	mov	r1, r3
 80009e0:	4805      	ldr	r0, [pc, #20]	; (80009f8 <MX_TIM6_Init+0x64>)
 80009e2:	f002 fbe5 	bl	80031b0 <HAL_TIMEx_MasterConfigSynchronization>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80009ec:	f000 fa48 	bl	8000e80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80009f0:	bf00      	nop
 80009f2:	3710      	adds	r7, #16
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	20000098 	.word	0x20000098
 80009fc:	40001000 	.word	0x40001000

08000a00 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a04:	4b14      	ldr	r3, [pc, #80]	; (8000a58 <MX_USART1_UART_Init+0x58>)
 8000a06:	4a15      	ldr	r2, [pc, #84]	; (8000a5c <MX_USART1_UART_Init+0x5c>)
 8000a08:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a0a:	4b13      	ldr	r3, [pc, #76]	; (8000a58 <MX_USART1_UART_Init+0x58>)
 8000a0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a10:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a12:	4b11      	ldr	r3, [pc, #68]	; (8000a58 <MX_USART1_UART_Init+0x58>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a18:	4b0f      	ldr	r3, [pc, #60]	; (8000a58 <MX_USART1_UART_Init+0x58>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a1e:	4b0e      	ldr	r3, [pc, #56]	; (8000a58 <MX_USART1_UART_Init+0x58>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a24:	4b0c      	ldr	r3, [pc, #48]	; (8000a58 <MX_USART1_UART_Init+0x58>)
 8000a26:	220c      	movs	r2, #12
 8000a28:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a2a:	4b0b      	ldr	r3, [pc, #44]	; (8000a58 <MX_USART1_UART_Init+0x58>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a30:	4b09      	ldr	r3, [pc, #36]	; (8000a58 <MX_USART1_UART_Init+0x58>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a36:	4b08      	ldr	r3, [pc, #32]	; (8000a58 <MX_USART1_UART_Init+0x58>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a3c:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <MX_USART1_UART_Init+0x58>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a42:	4805      	ldr	r0, [pc, #20]	; (8000a58 <MX_USART1_UART_Init+0x58>)
 8000a44:	f002 fc38 	bl	80032b8 <HAL_UART_Init>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000a4e:	f000 fa17 	bl	8000e80 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	200000e4 	.word	0x200000e4
 8000a5c:	40013800 	.word	0x40013800

08000a60 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a64:	4b14      	ldr	r3, [pc, #80]	; (8000ab8 <MX_USART2_UART_Init+0x58>)
 8000a66:	4a15      	ldr	r2, [pc, #84]	; (8000abc <MX_USART2_UART_Init+0x5c>)
 8000a68:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a6a:	4b13      	ldr	r3, [pc, #76]	; (8000ab8 <MX_USART2_UART_Init+0x58>)
 8000a6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a70:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a72:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <MX_USART2_UART_Init+0x58>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a78:	4b0f      	ldr	r3, [pc, #60]	; (8000ab8 <MX_USART2_UART_Init+0x58>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a7e:	4b0e      	ldr	r3, [pc, #56]	; (8000ab8 <MX_USART2_UART_Init+0x58>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a84:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <MX_USART2_UART_Init+0x58>)
 8000a86:	220c      	movs	r2, #12
 8000a88:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a8a:	4b0b      	ldr	r3, [pc, #44]	; (8000ab8 <MX_USART2_UART_Init+0x58>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a90:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <MX_USART2_UART_Init+0x58>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a96:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <MX_USART2_UART_Init+0x58>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a9c:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <MX_USART2_UART_Init+0x58>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000aa2:	4805      	ldr	r0, [pc, #20]	; (8000ab8 <MX_USART2_UART_Init+0x58>)
 8000aa4:	f002 fc08 	bl	80032b8 <HAL_UART_Init>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000aae:	f000 f9e7 	bl	8000e80 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	20000168 	.word	0x20000168
 8000abc:	40004400 	.word	0x40004400

08000ac0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b088      	sub	sp, #32
 8000ac4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac6:	f107 030c 	add.w	r3, r7, #12
 8000aca:	2200      	movs	r2, #0
 8000acc:	601a      	str	r2, [r3, #0]
 8000ace:	605a      	str	r2, [r3, #4]
 8000ad0:	609a      	str	r2, [r3, #8]
 8000ad2:	60da      	str	r2, [r3, #12]
 8000ad4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ad6:	4b29      	ldr	r3, [pc, #164]	; (8000b7c <MX_GPIO_Init+0xbc>)
 8000ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ada:	4a28      	ldr	r2, [pc, #160]	; (8000b7c <MX_GPIO_Init+0xbc>)
 8000adc:	f043 0304 	orr.w	r3, r3, #4
 8000ae0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ae2:	4b26      	ldr	r3, [pc, #152]	; (8000b7c <MX_GPIO_Init+0xbc>)
 8000ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae6:	f003 0304 	and.w	r3, r3, #4
 8000aea:	60bb      	str	r3, [r7, #8]
 8000aec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aee:	4b23      	ldr	r3, [pc, #140]	; (8000b7c <MX_GPIO_Init+0xbc>)
 8000af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af2:	4a22      	ldr	r2, [pc, #136]	; (8000b7c <MX_GPIO_Init+0xbc>)
 8000af4:	f043 0301 	orr.w	r3, r3, #1
 8000af8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000afa:	4b20      	ldr	r3, [pc, #128]	; (8000b7c <MX_GPIO_Init+0xbc>)
 8000afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000afe:	f003 0301 	and.w	r3, r3, #1
 8000b02:	607b      	str	r3, [r7, #4]
 8000b04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b06:	4b1d      	ldr	r3, [pc, #116]	; (8000b7c <MX_GPIO_Init+0xbc>)
 8000b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b0a:	4a1c      	ldr	r2, [pc, #112]	; (8000b7c <MX_GPIO_Init+0xbc>)
 8000b0c:	f043 0302 	orr.w	r3, r3, #2
 8000b10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b12:	4b1a      	ldr	r3, [pc, #104]	; (8000b7c <MX_GPIO_Init+0xbc>)
 8000b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b16:	f003 0302 	and.w	r3, r3, #2
 8000b1a:	603b      	str	r3, [r7, #0]
 8000b1c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MS1_Pin|EN_Pin|MS2_Pin, GPIO_PIN_RESET);
 8000b1e:	2200      	movs	r2, #0
 8000b20:	f240 2109 	movw	r1, #521	; 0x209
 8000b24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b28:	f000 ff34 	bl	8001994 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIR_Pin|STP_Pin, GPIO_PIN_RESET);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	2103      	movs	r1, #3
 8000b30:	4813      	ldr	r0, [pc, #76]	; (8000b80 <MX_GPIO_Init+0xc0>)
 8000b32:	f000 ff2f 	bl	8001994 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MS1_Pin EN_Pin MS2_Pin */
  GPIO_InitStruct.Pin = MS1_Pin|EN_Pin|MS2_Pin;
 8000b36:	f240 2309 	movw	r3, #521	; 0x209
 8000b3a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b40:	2300      	movs	r3, #0
 8000b42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b44:	2300      	movs	r3, #0
 8000b46:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b48:	f107 030c 	add.w	r3, r7, #12
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b52:	f000 fdb5 	bl	80016c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_Pin STP_Pin */
  GPIO_InitStruct.Pin = DIR_Pin|STP_Pin;
 8000b56:	2303      	movs	r3, #3
 8000b58:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b62:	2300      	movs	r3, #0
 8000b64:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b66:	f107 030c 	add.w	r3, r7, #12
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4804      	ldr	r0, [pc, #16]	; (8000b80 <MX_GPIO_Init+0xc0>)
 8000b6e:	f000 fda7 	bl	80016c0 <HAL_GPIO_Init>

}
 8000b72:	bf00      	nop
 8000b74:	3720      	adds	r7, #32
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	40021000 	.word	0x40021000
 8000b80:	48000400 	.word	0x48000400

08000b84 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(STP_GPIO_Port, STP_Pin);
 8000b8c:	2102      	movs	r1, #2
 8000b8e:	488e      	ldr	r0, [pc, #568]	; (8000dc8 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8000b90:	f000 ff18 	bl	80019c4 <HAL_GPIO_TogglePin>


	switch(system_state){
 8000b94:	4b8d      	ldr	r3, [pc, #564]	; (8000dcc <HAL_TIM_PeriodElapsedCallback+0x248>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	2b03      	cmp	r3, #3
 8000b9a:	f200 80bd 	bhi.w	8000d18 <HAL_TIM_PeriodElapsedCallback+0x194>
 8000b9e:	a201      	add	r2, pc, #4	; (adr r2, 8000ba4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ba4:	08000cb1 	.word	0x08000cb1
 8000ba8:	08000bb5 	.word	0x08000bb5
 8000bac:	08000c03 	.word	0x08000c03
 8000bb0:	08000c41 	.word	0x08000c41
		case set_time_state:{
			if (position < setpos){ //richtige Richtung einstellen um zur gewünschten Position zu fahren
 8000bb4:	4b86      	ldr	r3, [pc, #536]	; (8000dd0 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8000bb6:	881b      	ldrh	r3, [r3, #0]
 8000bb8:	461a      	mov	r2, r3
 8000bba:	4b86      	ldr	r3, [pc, #536]	; (8000dd4 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	429a      	cmp	r2, r3
 8000bc0:	d208      	bcs.n	8000bd4 <HAL_TIM_PeriodElapsedCallback+0x50>
				HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, RESET);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	2101      	movs	r1, #1
 8000bc6:	4880      	ldr	r0, [pc, #512]	; (8000dc8 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8000bc8:	f000 fee4 	bl	8001994 <HAL_GPIO_WritePin>
				direction = false;
 8000bcc:	4b82      	ldr	r3, [pc, #520]	; (8000dd8 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	701a      	strb	r2, [r3, #0]
 8000bd2:	e007      	b.n	8000be4 <HAL_TIM_PeriodElapsedCallback+0x60>
			} else {
				HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, SET);
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	2101      	movs	r1, #1
 8000bd8:	487b      	ldr	r0, [pc, #492]	; (8000dc8 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8000bda:	f000 fedb 	bl	8001994 <HAL_GPIO_WritePin>
				direction = true;
 8000bde:	4b7e      	ldr	r3, [pc, #504]	; (8000dd8 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000be0:	2201      	movs	r2, #1
 8000be2:	701a      	strb	r2, [r3, #0]
			}
			if(position == setpos){ //wenn die gewünschte Position erreicht wurde
 8000be4:	4b7a      	ldr	r3, [pc, #488]	; (8000dd0 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8000be6:	881b      	ldrh	r3, [r3, #0]
 8000be8:	461a      	mov	r2, r3
 8000bea:	4b7a      	ldr	r3, [pc, #488]	; (8000dd4 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	429a      	cmp	r2, r3
 8000bf0:	f040 808b 	bne.w	8000d0a <HAL_TIM_PeriodElapsedCallback+0x186>
				HAL_NVIC_DisableIRQ(54);
 8000bf4:	2036      	movs	r0, #54	; 0x36
 8000bf6:	f000 fcca 	bl	800158e <HAL_NVIC_DisableIRQ>
				switchstate = true;
 8000bfa:	4b78      	ldr	r3, [pc, #480]	; (8000ddc <HAL_TIM_PeriodElapsedCallback+0x258>)
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000c00:	e083      	b.n	8000d0a <HAL_TIM_PeriodElapsedCallback+0x186>
		}
		case timer_state:{
			if(direction == false){ //change direction
 8000c02:	4b75      	ldr	r3, [pc, #468]	; (8000dd8 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	f083 0301 	eor.w	r3, r3, #1
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d007      	beq.n	8000c20 <HAL_TIM_PeriodElapsedCallback+0x9c>
				HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, SET);
 8000c10:	2201      	movs	r2, #1
 8000c12:	2101      	movs	r1, #1
 8000c14:	486c      	ldr	r0, [pc, #432]	; (8000dc8 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8000c16:	f000 febd 	bl	8001994 <HAL_GPIO_WritePin>
				direction = true;
 8000c1a:	4b6f      	ldr	r3, [pc, #444]	; (8000dd8 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	701a      	strb	r2, [r3, #0]
			}
			if(position == 0){ //Zeit abgelaufen
 8000c20:	4b6b      	ldr	r3, [pc, #428]	; (8000dd0 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8000c22:	881b      	ldrh	r3, [r3, #0]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d172      	bne.n	8000d0e <HAL_TIM_PeriodElapsedCallback+0x18a>
				//HAL_NVIC_DisableIRQ(54);
				switchstate = true;
 8000c28:	4b6c      	ldr	r3, [pc, #432]	; (8000ddc <HAL_TIM_PeriodElapsedCallback+0x258>)
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, RESET); //prepare direction for ring_state
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2101      	movs	r1, #1
 8000c32:	4865      	ldr	r0, [pc, #404]	; (8000dc8 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8000c34:	f000 feae 	bl	8001994 <HAL_GPIO_WritePin>
				direction = false;
 8000c38:	4b67      	ldr	r3, [pc, #412]	; (8000dd8 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	701a      	strb	r2, [r3, #0]

			}
			break;
 8000c3e:	e066      	b.n	8000d0e <HAL_TIM_PeriodElapsedCallback+0x18a>
		}
		case ring_state:{
			stepCount++;
 8000c40:	4b67      	ldr	r3, [pc, #412]	; (8000de0 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	3301      	adds	r3, #1
 8000c46:	4a66      	ldr	r2, [pc, #408]	; (8000de0 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8000c48:	6013      	str	r3, [r2, #0]
			if (stepCount%WIGGLEANGLE == 0){ //Wenn es sich um den Winkel bewegt hat
 8000c4a:	4b65      	ldr	r3, [pc, #404]	; (8000de0 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	4b65      	ldr	r3, [pc, #404]	; (8000de4 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8000c50:	fba3 1302 	umull	r1, r3, r3, r2
 8000c54:	095b      	lsrs	r3, r3, #5
 8000c56:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000c5a:	fb01 f303 	mul.w	r3, r1, r3
 8000c5e:	1ad3      	subs	r3, r2, r3
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d156      	bne.n	8000d12 <HAL_TIM_PeriodElapsedCallback+0x18e>
				stepCount = stepCount % WIGGLEANGLE;
 8000c64:	4b5e      	ldr	r3, [pc, #376]	; (8000de0 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8000c66:	681a      	ldr	r2, [r3, #0]
 8000c68:	4b5e      	ldr	r3, [pc, #376]	; (8000de4 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8000c6a:	fba3 1302 	umull	r1, r3, r3, r2
 8000c6e:	095b      	lsrs	r3, r3, #5
 8000c70:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000c74:	fb01 f303 	mul.w	r3, r1, r3
 8000c78:	1ad3      	subs	r3, r2, r3
 8000c7a:	4a59      	ldr	r2, [pc, #356]	; (8000de0 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8000c7c:	6013      	str	r3, [r2, #0]
				//HAL_GPIO_TogglePin(DIR_GPIO_Port, DIR_Pin);
				if(direction == false){ //Richtung wechseln wenn Winkel richtig
 8000c7e:	4b56      	ldr	r3, [pc, #344]	; (8000dd8 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	f083 0301 	eor.w	r3, r3, #1
 8000c86:	b2db      	uxtb	r3, r3
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d008      	beq.n	8000c9e <HAL_TIM_PeriodElapsedCallback+0x11a>
					HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, SET);
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	2101      	movs	r1, #1
 8000c90:	484d      	ldr	r0, [pc, #308]	; (8000dc8 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8000c92:	f000 fe7f 	bl	8001994 <HAL_GPIO_WritePin>
					direction = true;
 8000c96:	4b50      	ldr	r3, [pc, #320]	; (8000dd8 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000c98:	2201      	movs	r2, #1
 8000c9a:	701a      	strb	r2, [r3, #0]
				}else{
					HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, RESET);
					direction = false;
				}
			}
			break;
 8000c9c:	e039      	b.n	8000d12 <HAL_TIM_PeriodElapsedCallback+0x18e>
					HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, RESET);
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	2101      	movs	r1, #1
 8000ca2:	4849      	ldr	r0, [pc, #292]	; (8000dc8 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8000ca4:	f000 fe76 	bl	8001994 <HAL_GPIO_WritePin>
					direction = false;
 8000ca8:	4b4b      	ldr	r3, [pc, #300]	; (8000dd8 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	701a      	strb	r2, [r3, #0]
			break;
 8000cae:	e030      	b.n	8000d12 <HAL_TIM_PeriodElapsedCallback+0x18e>
		}
		case start_state:{
			startsteps++;
 8000cb0:	4b4d      	ldr	r3, [pc, #308]	; (8000de8 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	4a4c      	ldr	r2, [pc, #304]	; (8000de8 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8000cb8:	6013      	str	r3, [r2, #0]
			if(startsteps < WIGGLEANGLE * 2){//einmal klingeln
 8000cba:	4b4b      	ldr	r3, [pc, #300]	; (8000de8 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000cc2:	d21b      	bcs.n	8000cfc <HAL_TIM_PeriodElapsedCallback+0x178>
				if(startsteps <= WIGGLEANGLE){
 8000cc4:	4b48      	ldr	r3, [pc, #288]	; (8000de8 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000ccc:	d808      	bhi.n	8000ce0 <HAL_TIM_PeriodElapsedCallback+0x15c>
					HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, RESET);
 8000cce:	2200      	movs	r2, #0
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	483d      	ldr	r0, [pc, #244]	; (8000dc8 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8000cd4:	f000 fe5e 	bl	8001994 <HAL_GPIO_WritePin>
					direction = false;
 8000cd8:	4b3f      	ldr	r3, [pc, #252]	; (8000dd8 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	701a      	strb	r2, [r3, #0]
				}
			}else{
				HAL_NVIC_DisableIRQ(54);//Motor stoppen
				switchstate = true;
			}
			break;
 8000cde:	e01a      	b.n	8000d16 <HAL_TIM_PeriodElapsedCallback+0x192>
				} else if (startsteps > WIGGLEANGLE) {
 8000ce0:	4b41      	ldr	r3, [pc, #260]	; (8000de8 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000ce8:	d915      	bls.n	8000d16 <HAL_TIM_PeriodElapsedCallback+0x192>
					HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, SET);
 8000cea:	2201      	movs	r2, #1
 8000cec:	2101      	movs	r1, #1
 8000cee:	4836      	ldr	r0, [pc, #216]	; (8000dc8 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8000cf0:	f000 fe50 	bl	8001994 <HAL_GPIO_WritePin>
					direction = true;
 8000cf4:	4b38      	ldr	r3, [pc, #224]	; (8000dd8 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	701a      	strb	r2, [r3, #0]
			break;
 8000cfa:	e00c      	b.n	8000d16 <HAL_TIM_PeriodElapsedCallback+0x192>
				HAL_NVIC_DisableIRQ(54);//Motor stoppen
 8000cfc:	2036      	movs	r0, #54	; 0x36
 8000cfe:	f000 fc46 	bl	800158e <HAL_NVIC_DisableIRQ>
				switchstate = true;
 8000d02:	4b36      	ldr	r3, [pc, #216]	; (8000ddc <HAL_TIM_PeriodElapsedCallback+0x258>)
 8000d04:	2201      	movs	r2, #1
 8000d06:	701a      	strb	r2, [r3, #0]
			break;
 8000d08:	e005      	b.n	8000d16 <HAL_TIM_PeriodElapsedCallback+0x192>
			break;
 8000d0a:	bf00      	nop
 8000d0c:	e004      	b.n	8000d18 <HAL_TIM_PeriodElapsedCallback+0x194>
			break;
 8000d0e:	bf00      	nop
 8000d10:	e002      	b.n	8000d18 <HAL_TIM_PeriodElapsedCallback+0x194>
			break;
 8000d12:	bf00      	nop
 8000d14:	e000      	b.n	8000d18 <HAL_TIM_PeriodElapsedCallback+0x194>
			break;
 8000d16:	bf00      	nop
		}
	}

	if(direction == false){ //false entspricht einer Drehung laut Uhrzeigersinn und Position ++
 8000d18:	4b2f      	ldr	r3, [pc, #188]	; (8000dd8 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	f083 0301 	eor.w	r3, r3, #1
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d026      	beq.n	8000d74 <HAL_TIM_PeriodElapsedCallback+0x1f0>
		//position++;

		if(system_state == timer_state){
 8000d26:	4b29      	ldr	r3, [pc, #164]	; (8000dcc <HAL_TIM_PeriodElapsedCallback+0x248>)
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	2b02      	cmp	r3, #2
 8000d2c:	d114      	bne.n	8000d58 <HAL_TIM_PeriodElapsedCallback+0x1d4>
			timersteps++;
 8000d2e:	4b2f      	ldr	r3, [pc, #188]	; (8000dec <HAL_TIM_PeriodElapsedCallback+0x268>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	3301      	adds	r3, #1
 8000d34:	4a2d      	ldr	r2, [pc, #180]	; (8000dec <HAL_TIM_PeriodElapsedCallback+0x268>)
 8000d36:	6013      	str	r3, [r2, #0]
			if(timersteps%8 == 0){
 8000d38:	4b2c      	ldr	r3, [pc, #176]	; (8000dec <HAL_TIM_PeriodElapsedCallback+0x268>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f003 0307 	and.w	r3, r3, #7
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d10f      	bne.n	8000d64 <HAL_TIM_PeriodElapsedCallback+0x1e0>
				timersteps = 0;
 8000d44:	4b29      	ldr	r3, [pc, #164]	; (8000dec <HAL_TIM_PeriodElapsedCallback+0x268>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	601a      	str	r2, [r3, #0]
				position++;
 8000d4a:	4b21      	ldr	r3, [pc, #132]	; (8000dd0 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8000d4c:	881b      	ldrh	r3, [r3, #0]
 8000d4e:	3301      	adds	r3, #1
 8000d50:	b29a      	uxth	r2, r3
 8000d52:	4b1f      	ldr	r3, [pc, #124]	; (8000dd0 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8000d54:	801a      	strh	r2, [r3, #0]
 8000d56:	e005      	b.n	8000d64 <HAL_TIM_PeriodElapsedCallback+0x1e0>
			}
		}else{
			position++;
 8000d58:	4b1d      	ldr	r3, [pc, #116]	; (8000dd0 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8000d5a:	881b      	ldrh	r3, [r3, #0]
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	b29a      	uxth	r2, r3
 8000d60:	4b1b      	ldr	r3, [pc, #108]	; (8000dd0 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8000d62:	801a      	strh	r2, [r3, #0]
		}
		position = position % FULLROTATION;
 8000d64:	4b1a      	ldr	r3, [pc, #104]	; (8000dd0 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8000d66:	881b      	ldrh	r3, [r3, #0]
 8000d68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d6c:	b29a      	uxth	r2, r3
 8000d6e:	4b18      	ldr	r3, [pc, #96]	; (8000dd0 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8000d70:	801a      	strh	r2, [r3, #0]
	}

	//if(stepCount == 2048*2){		Function to measure steps
		//HAL_NVIC_DisableIRQ(54);
	//}*/
}
 8000d72:	e025      	b.n	8000dc0 <HAL_TIM_PeriodElapsedCallback+0x23c>
		if(system_state == timer_state){
 8000d74:	4b15      	ldr	r3, [pc, #84]	; (8000dcc <HAL_TIM_PeriodElapsedCallback+0x248>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	2b02      	cmp	r3, #2
 8000d7a:	d114      	bne.n	8000da6 <HAL_TIM_PeriodElapsedCallback+0x222>
			timersteps++;
 8000d7c:	4b1b      	ldr	r3, [pc, #108]	; (8000dec <HAL_TIM_PeriodElapsedCallback+0x268>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	3301      	adds	r3, #1
 8000d82:	4a1a      	ldr	r2, [pc, #104]	; (8000dec <HAL_TIM_PeriodElapsedCallback+0x268>)
 8000d84:	6013      	str	r3, [r2, #0]
			if(timersteps%8 == 0){
 8000d86:	4b19      	ldr	r3, [pc, #100]	; (8000dec <HAL_TIM_PeriodElapsedCallback+0x268>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f003 0307 	and.w	r3, r3, #7
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d10f      	bne.n	8000db2 <HAL_TIM_PeriodElapsedCallback+0x22e>
				timersteps = 0;
 8000d92:	4b16      	ldr	r3, [pc, #88]	; (8000dec <HAL_TIM_PeriodElapsedCallback+0x268>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
				position--;
 8000d98:	4b0d      	ldr	r3, [pc, #52]	; (8000dd0 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8000d9a:	881b      	ldrh	r3, [r3, #0]
 8000d9c:	3b01      	subs	r3, #1
 8000d9e:	b29a      	uxth	r2, r3
 8000da0:	4b0b      	ldr	r3, [pc, #44]	; (8000dd0 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8000da2:	801a      	strh	r2, [r3, #0]
 8000da4:	e005      	b.n	8000db2 <HAL_TIM_PeriodElapsedCallback+0x22e>
			position--;
 8000da6:	4b0a      	ldr	r3, [pc, #40]	; (8000dd0 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8000da8:	881b      	ldrh	r3, [r3, #0]
 8000daa:	3b01      	subs	r3, #1
 8000dac:	b29a      	uxth	r2, r3
 8000dae:	4b08      	ldr	r3, [pc, #32]	; (8000dd0 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8000db0:	801a      	strh	r2, [r3, #0]
		position = position % FULLROTATION;
 8000db2:	4b07      	ldr	r3, [pc, #28]	; (8000dd0 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8000db4:	881b      	ldrh	r3, [r3, #0]
 8000db6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000dba:	b29a      	uxth	r2, r3
 8000dbc:	4b04      	ldr	r3, [pc, #16]	; (8000dd0 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8000dbe:	801a      	strh	r2, [r3, #0]
}
 8000dc0:	bf00      	nop
 8000dc2:	3708      	adds	r7, #8
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	48000400 	.word	0x48000400
 8000dcc:	200002e8 	.word	0x200002e8
 8000dd0:	200001f4 	.word	0x200001f4
 8000dd4:	200001f8 	.word	0x200001f8
 8000dd8:	20000208 	.word	0x20000208
 8000ddc:	2000020b 	.word	0x2000020b
 8000de0:	200001ec 	.word	0x200001ec
 8000de4:	10624dd3 	.word	0x10624dd3
 8000de8:	200001f0 	.word	0x200001f0
 8000dec:	20000204 	.word	0x20000204

08000df0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
	for(uint8_t i = 0; i <= 7; i++){ //Kopiert alles aus dem UART buffer in mein Databuffer
 8000df8:	2300      	movs	r3, #0
 8000dfa:	73fb      	strb	r3, [r7, #15]
 8000dfc:	e013      	b.n	8000e26 <HAL_UART_RxCpltCallback+0x36>
		dataBuffer[i] = receiveBuffer[i];
 8000dfe:	7bfa      	ldrb	r2, [r7, #15]
 8000e00:	7bfb      	ldrb	r3, [r7, #15]
 8000e02:	4911      	ldr	r1, [pc, #68]	; (8000e48 <HAL_UART_RxCpltCallback+0x58>)
 8000e04:	5c89      	ldrb	r1, [r1, r2]
 8000e06:	4a11      	ldr	r2, [pc, #68]	; (8000e4c <HAL_UART_RxCpltCallback+0x5c>)
 8000e08:	54d1      	strb	r1, [r2, r3]
		if(receiveBuffer[i] == '\r'){
 8000e0a:	7bfb      	ldrb	r3, [r7, #15]
 8000e0c:	4a0e      	ldr	r2, [pc, #56]	; (8000e48 <HAL_UART_RxCpltCallback+0x58>)
 8000e0e:	5cd3      	ldrb	r3, [r2, r3]
 8000e10:	2b0d      	cmp	r3, #13
 8000e12:	d105      	bne.n	8000e20 <HAL_UART_RxCpltCallback+0x30>
			rxDone = false;
 8000e14:	4b0e      	ldr	r3, [pc, #56]	; (8000e50 <HAL_UART_RxCpltCallback+0x60>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	701a      	strb	r2, [r3, #0]
			charCounter = i;
 8000e1a:	7bfb      	ldrb	r3, [r7, #15]
 8000e1c:	4a0d      	ldr	r2, [pc, #52]	; (8000e54 <HAL_UART_RxCpltCallback+0x64>)
 8000e1e:	6013      	str	r3, [r2, #0]
	for(uint8_t i = 0; i <= 7; i++){ //Kopiert alles aus dem UART buffer in mein Databuffer
 8000e20:	7bfb      	ldrb	r3, [r7, #15]
 8000e22:	3301      	adds	r3, #1
 8000e24:	73fb      	strb	r3, [r7, #15]
 8000e26:	7bfb      	ldrb	r3, [r7, #15]
 8000e28:	2b07      	cmp	r3, #7
 8000e2a:	d9e8      	bls.n	8000dfe <HAL_UART_RxCpltCallback+0xe>
		}
	}

	HAL_UART_Transmit_IT(&huart2, (uint8_t *)receiveMsg, BUFFERSIZE); //schickt Acknowledge
 8000e2c:	4b0a      	ldr	r3, [pc, #40]	; (8000e58 <HAL_UART_RxCpltCallback+0x68>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	2208      	movs	r2, #8
 8000e32:	4619      	mov	r1, r3
 8000e34:	4809      	ldr	r0, [pc, #36]	; (8000e5c <HAL_UART_RxCpltCallback+0x6c>)
 8000e36:	f002 fa8d 	bl	8003354 <HAL_UART_Transmit_IT>
	HAL_NVIC_DisableIRQ(54);
 8000e3a:	2036      	movs	r0, #54	; 0x36
 8000e3c:	f000 fba7 	bl	800158e <HAL_NVIC_DisableIRQ>

}
 8000e40:	bf00      	nop
 8000e42:	3710      	adds	r7, #16
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	20000218 	.word	0x20000218
 8000e4c:	20000220 	.word	0x20000220
 8000e50:	2000020c 	.word	0x2000020c
 8000e54:	20000200 	.word	0x20000200
 8000e58:	20000004 	.word	0x20000004
 8000e5c:	20000168 	.word	0x20000168

08000e60 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
	transmitDone = true;
 8000e68:	4b04      	ldr	r3, [pc, #16]	; (8000e7c <HAL_UART_TxCpltCallback+0x1c>)
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	701a      	strb	r2, [r3, #0]
}
 8000e6e:	bf00      	nop
 8000e70:	370c      	adds	r7, #12
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	2000020e 	.word	0x2000020e

08000e80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e84:	b672      	cpsid	i
}
 8000e86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e88:	e7fe      	b.n	8000e88 <Error_Handler+0x8>
	...

08000e8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e92:	4b0f      	ldr	r3, [pc, #60]	; (8000ed0 <HAL_MspInit+0x44>)
 8000e94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e96:	4a0e      	ldr	r2, [pc, #56]	; (8000ed0 <HAL_MspInit+0x44>)
 8000e98:	f043 0301 	orr.w	r3, r3, #1
 8000e9c:	6613      	str	r3, [r2, #96]	; 0x60
 8000e9e:	4b0c      	ldr	r3, [pc, #48]	; (8000ed0 <HAL_MspInit+0x44>)
 8000ea0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ea2:	f003 0301 	and.w	r3, r3, #1
 8000ea6:	607b      	str	r3, [r7, #4]
 8000ea8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eaa:	4b09      	ldr	r3, [pc, #36]	; (8000ed0 <HAL_MspInit+0x44>)
 8000eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eae:	4a08      	ldr	r2, [pc, #32]	; (8000ed0 <HAL_MspInit+0x44>)
 8000eb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eb4:	6593      	str	r3, [r2, #88]	; 0x58
 8000eb6:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <HAL_MspInit+0x44>)
 8000eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ebe:	603b      	str	r3, [r7, #0]
 8000ec0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	370c      	adds	r7, #12
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	40021000 	.word	0x40021000

08000ed4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a0d      	ldr	r2, [pc, #52]	; (8000f18 <HAL_TIM_Base_MspInit+0x44>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d113      	bne.n	8000f0e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000ee6:	4b0d      	ldr	r3, [pc, #52]	; (8000f1c <HAL_TIM_Base_MspInit+0x48>)
 8000ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eea:	4a0c      	ldr	r2, [pc, #48]	; (8000f1c <HAL_TIM_Base_MspInit+0x48>)
 8000eec:	f043 0310 	orr.w	r3, r3, #16
 8000ef0:	6593      	str	r3, [r2, #88]	; 0x58
 8000ef2:	4b0a      	ldr	r3, [pc, #40]	; (8000f1c <HAL_TIM_Base_MspInit+0x48>)
 8000ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ef6:	f003 0310 	and.w	r3, r3, #16
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8000efe:	2200      	movs	r2, #0
 8000f00:	2101      	movs	r1, #1
 8000f02:	2036      	movs	r0, #54	; 0x36
 8000f04:	f000 fb19 	bl	800153a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000f08:	2036      	movs	r0, #54	; 0x36
 8000f0a:	f000 fb32 	bl	8001572 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000f0e:	bf00      	nop
 8000f10:	3710      	adds	r7, #16
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	40001000 	.word	0x40001000
 8000f1c:	40021000 	.word	0x40021000

08000f20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b0a2      	sub	sp, #136	; 0x88
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f28:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	605a      	str	r2, [r3, #4]
 8000f32:	609a      	str	r2, [r3, #8]
 8000f34:	60da      	str	r2, [r3, #12]
 8000f36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f38:	f107 0320 	add.w	r3, r7, #32
 8000f3c:	2254      	movs	r2, #84	; 0x54
 8000f3e:	2100      	movs	r1, #0
 8000f40:	4618      	mov	r0, r3
 8000f42:	f003 fd6b 	bl	8004a1c <memset>
  if(huart->Instance==USART1)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a61      	ldr	r2, [pc, #388]	; (80010d0 <HAL_UART_MspInit+0x1b0>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d160      	bne.n	8001012 <HAL_UART_MspInit+0xf2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000f50:	2301      	movs	r3, #1
 8000f52:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000f54:	2300      	movs	r3, #0
 8000f56:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f58:	f107 0320 	add.w	r3, r7, #32
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f001 fbe7 	bl	8002730 <HAL_RCCEx_PeriphCLKConfig>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f68:	f7ff ff8a 	bl	8000e80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f6c:	4b59      	ldr	r3, [pc, #356]	; (80010d4 <HAL_UART_MspInit+0x1b4>)
 8000f6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f70:	4a58      	ldr	r2, [pc, #352]	; (80010d4 <HAL_UART_MspInit+0x1b4>)
 8000f72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f76:	6613      	str	r3, [r2, #96]	; 0x60
 8000f78:	4b56      	ldr	r3, [pc, #344]	; (80010d4 <HAL_UART_MspInit+0x1b4>)
 8000f7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f80:	61fb      	str	r3, [r7, #28]
 8000f82:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f84:	4b53      	ldr	r3, [pc, #332]	; (80010d4 <HAL_UART_MspInit+0x1b4>)
 8000f86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f88:	4a52      	ldr	r2, [pc, #328]	; (80010d4 <HAL_UART_MspInit+0x1b4>)
 8000f8a:	f043 0301 	orr.w	r3, r3, #1
 8000f8e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f90:	4b50      	ldr	r3, [pc, #320]	; (80010d4 <HAL_UART_MspInit+0x1b4>)
 8000f92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f94:	f003 0301 	and.w	r3, r3, #1
 8000f98:	61bb      	str	r3, [r7, #24]
 8000f9a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f9c:	4b4d      	ldr	r3, [pc, #308]	; (80010d4 <HAL_UART_MspInit+0x1b4>)
 8000f9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa0:	4a4c      	ldr	r2, [pc, #304]	; (80010d4 <HAL_UART_MspInit+0x1b4>)
 8000fa2:	f043 0302 	orr.w	r3, r3, #2
 8000fa6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fa8:	4b4a      	ldr	r3, [pc, #296]	; (80010d4 <HAL_UART_MspInit+0x1b4>)
 8000faa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fac:	f003 0302 	and.w	r3, r3, #2
 8000fb0:	617b      	str	r3, [r7, #20]
 8000fb2:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000fb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fb8:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc2:	2303      	movs	r3, #3
 8000fc4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000fc8:	2307      	movs	r3, #7
 8000fca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fce:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fd8:	f000 fb72 	bl	80016c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000fdc:	2340      	movs	r3, #64	; 0x40
 8000fde:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe8:	2303      	movs	r3, #3
 8000fea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000fee:	2307      	movs	r3, #7
 8000ff0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ff4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4837      	ldr	r0, [pc, #220]	; (80010d8 <HAL_UART_MspInit+0x1b8>)
 8000ffc:	f000 fb60 	bl	80016c0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001000:	2200      	movs	r2, #0
 8001002:	2100      	movs	r1, #0
 8001004:	2025      	movs	r0, #37	; 0x25
 8001006:	f000 fa98 	bl	800153a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800100a:	2025      	movs	r0, #37	; 0x25
 800100c:	f000 fab1 	bl	8001572 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001010:	e059      	b.n	80010c6 <HAL_UART_MspInit+0x1a6>
  else if(huart->Instance==USART2)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a31      	ldr	r2, [pc, #196]	; (80010dc <HAL_UART_MspInit+0x1bc>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d154      	bne.n	80010c6 <HAL_UART_MspInit+0x1a6>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800101c:	2302      	movs	r3, #2
 800101e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001020:	2300      	movs	r3, #0
 8001022:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001024:	f107 0320 	add.w	r3, r7, #32
 8001028:	4618      	mov	r0, r3
 800102a:	f001 fb81 	bl	8002730 <HAL_RCCEx_PeriphCLKConfig>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <HAL_UART_MspInit+0x118>
      Error_Handler();
 8001034:	f7ff ff24 	bl	8000e80 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001038:	4b26      	ldr	r3, [pc, #152]	; (80010d4 <HAL_UART_MspInit+0x1b4>)
 800103a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800103c:	4a25      	ldr	r2, [pc, #148]	; (80010d4 <HAL_UART_MspInit+0x1b4>)
 800103e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001042:	6593      	str	r3, [r2, #88]	; 0x58
 8001044:	4b23      	ldr	r3, [pc, #140]	; (80010d4 <HAL_UART_MspInit+0x1b4>)
 8001046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001048:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800104c:	613b      	str	r3, [r7, #16]
 800104e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001050:	4b20      	ldr	r3, [pc, #128]	; (80010d4 <HAL_UART_MspInit+0x1b4>)
 8001052:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001054:	4a1f      	ldr	r2, [pc, #124]	; (80010d4 <HAL_UART_MspInit+0x1b4>)
 8001056:	f043 0301 	orr.w	r3, r3, #1
 800105a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800105c:	4b1d      	ldr	r3, [pc, #116]	; (80010d4 <HAL_UART_MspInit+0x1b4>)
 800105e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001060:	f003 0301 	and.w	r3, r3, #1
 8001064:	60fb      	str	r3, [r7, #12]
 8001066:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001068:	2304      	movs	r3, #4
 800106a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106c:	2302      	movs	r3, #2
 800106e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001070:	2300      	movs	r3, #0
 8001072:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001074:	2303      	movs	r3, #3
 8001076:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800107a:	2307      	movs	r3, #7
 800107c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001080:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001084:	4619      	mov	r1, r3
 8001086:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800108a:	f000 fb19 	bl	80016c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800108e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001092:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001094:	2302      	movs	r3, #2
 8001096:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001098:	2300      	movs	r3, #0
 800109a:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800109c:	2303      	movs	r3, #3
 800109e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80010a2:	2303      	movs	r3, #3
 80010a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80010a8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80010ac:	4619      	mov	r1, r3
 80010ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010b2:	f000 fb05 	bl	80016c0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80010b6:	2200      	movs	r2, #0
 80010b8:	2100      	movs	r1, #0
 80010ba:	2026      	movs	r0, #38	; 0x26
 80010bc:	f000 fa3d 	bl	800153a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80010c0:	2026      	movs	r0, #38	; 0x26
 80010c2:	f000 fa56 	bl	8001572 <HAL_NVIC_EnableIRQ>
}
 80010c6:	bf00      	nop
 80010c8:	3788      	adds	r7, #136	; 0x88
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	40013800 	.word	0x40013800
 80010d4:	40021000 	.word	0x40021000
 80010d8:	48000400 	.word	0x48000400
 80010dc:	40004400 	.word	0x40004400

080010e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010e4:	e7fe      	b.n	80010e4 <NMI_Handler+0x4>

080010e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010e6:	b480      	push	{r7}
 80010e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010ea:	e7fe      	b.n	80010ea <HardFault_Handler+0x4>

080010ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010f0:	e7fe      	b.n	80010f0 <MemManage_Handler+0x4>

080010f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010f2:	b480      	push	{r7}
 80010f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010f6:	e7fe      	b.n	80010f6 <BusFault_Handler+0x4>

080010f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010fc:	e7fe      	b.n	80010fc <UsageFault_Handler+0x4>

080010fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010fe:	b480      	push	{r7}
 8001100:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001102:	bf00      	nop
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001110:	bf00      	nop
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr

0800111a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800111a:	b480      	push	{r7}
 800111c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800111e:	bf00      	nop
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr

08001128 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800112c:	f000 f8e6 	bl	80012fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001130:	bf00      	nop
 8001132:	bd80      	pop	{r7, pc}

08001134 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001138:	4802      	ldr	r0, [pc, #8]	; (8001144 <USART1_IRQHandler+0x10>)
 800113a:	f002 f9cf 	bl	80034dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800113e:	bf00      	nop
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	200000e4 	.word	0x200000e4

08001148 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800114c:	4802      	ldr	r0, [pc, #8]	; (8001158 <USART2_IRQHandler+0x10>)
 800114e:	f002 f9c5 	bl	80034dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	20000168 	.word	0x20000168

0800115c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001160:	4802      	ldr	r0, [pc, #8]	; (800116c <TIM6_DAC_IRQHandler+0x10>)
 8001162:	f001 fe79 	bl	8002e58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20000098 	.word	0x20000098

08001170 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b086      	sub	sp, #24
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001178:	4a14      	ldr	r2, [pc, #80]	; (80011cc <_sbrk+0x5c>)
 800117a:	4b15      	ldr	r3, [pc, #84]	; (80011d0 <_sbrk+0x60>)
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001184:	4b13      	ldr	r3, [pc, #76]	; (80011d4 <_sbrk+0x64>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d102      	bne.n	8001192 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800118c:	4b11      	ldr	r3, [pc, #68]	; (80011d4 <_sbrk+0x64>)
 800118e:	4a12      	ldr	r2, [pc, #72]	; (80011d8 <_sbrk+0x68>)
 8001190:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001192:	4b10      	ldr	r3, [pc, #64]	; (80011d4 <_sbrk+0x64>)
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4413      	add	r3, r2
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	429a      	cmp	r2, r3
 800119e:	d207      	bcs.n	80011b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011a0:	f003 fc04 	bl	80049ac <__errno>
 80011a4:	4603      	mov	r3, r0
 80011a6:	220c      	movs	r2, #12
 80011a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011aa:	f04f 33ff 	mov.w	r3, #4294967295
 80011ae:	e009      	b.n	80011c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011b0:	4b08      	ldr	r3, [pc, #32]	; (80011d4 <_sbrk+0x64>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011b6:	4b07      	ldr	r3, [pc, #28]	; (80011d4 <_sbrk+0x64>)
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4413      	add	r3, r2
 80011be:	4a05      	ldr	r2, [pc, #20]	; (80011d4 <_sbrk+0x64>)
 80011c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011c2:	68fb      	ldr	r3, [r7, #12]
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3718      	adds	r7, #24
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	20010000 	.word	0x20010000
 80011d0:	00000400 	.word	0x00000400
 80011d4:	200002ec 	.word	0x200002ec
 80011d8:	20000308 	.word	0x20000308

080011dc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80011e0:	4b06      	ldr	r3, [pc, #24]	; (80011fc <SystemInit+0x20>)
 80011e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011e6:	4a05      	ldr	r2, [pc, #20]	; (80011fc <SystemInit+0x20>)
 80011e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80011f0:	bf00      	nop
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	e000ed00 	.word	0xe000ed00

08001200 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001200:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001238 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001204:	f7ff ffea 	bl	80011dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001208:	480c      	ldr	r0, [pc, #48]	; (800123c <LoopForever+0x6>)
  ldr r1, =_edata
 800120a:	490d      	ldr	r1, [pc, #52]	; (8001240 <LoopForever+0xa>)
  ldr r2, =_sidata
 800120c:	4a0d      	ldr	r2, [pc, #52]	; (8001244 <LoopForever+0xe>)
  movs r3, #0
 800120e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001210:	e002      	b.n	8001218 <LoopCopyDataInit>

08001212 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001212:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001214:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001216:	3304      	adds	r3, #4

08001218 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001218:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800121a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800121c:	d3f9      	bcc.n	8001212 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800121e:	4a0a      	ldr	r2, [pc, #40]	; (8001248 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001220:	4c0a      	ldr	r4, [pc, #40]	; (800124c <LoopForever+0x16>)
  movs r3, #0
 8001222:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001224:	e001      	b.n	800122a <LoopFillZerobss>

08001226 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001226:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001228:	3204      	adds	r2, #4

0800122a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800122a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800122c:	d3fb      	bcc.n	8001226 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800122e:	f003 fbc3 	bl	80049b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001232:	f7ff fa23 	bl	800067c <main>

08001236 <LoopForever>:

LoopForever:
    b LoopForever
 8001236:	e7fe      	b.n	8001236 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001238:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800123c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001240:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001244:	08005834 	.word	0x08005834
  ldr r2, =_sbss
 8001248:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 800124c:	20000304 	.word	0x20000304

08001250 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001250:	e7fe      	b.n	8001250 <ADC1_IRQHandler>

08001252 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001252:	b580      	push	{r7, lr}
 8001254:	b082      	sub	sp, #8
 8001256:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001258:	2300      	movs	r3, #0
 800125a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800125c:	2003      	movs	r0, #3
 800125e:	f000 f961 	bl	8001524 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001262:	2000      	movs	r0, #0
 8001264:	f000 f80e 	bl	8001284 <HAL_InitTick>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d002      	beq.n	8001274 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	71fb      	strb	r3, [r7, #7]
 8001272:	e001      	b.n	8001278 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001274:	f7ff fe0a 	bl	8000e8c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001278:	79fb      	ldrb	r3, [r7, #7]
}
 800127a:	4618      	mov	r0, r3
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
	...

08001284 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800128c:	2300      	movs	r3, #0
 800128e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001290:	4b17      	ldr	r3, [pc, #92]	; (80012f0 <HAL_InitTick+0x6c>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d023      	beq.n	80012e0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001298:	4b16      	ldr	r3, [pc, #88]	; (80012f4 <HAL_InitTick+0x70>)
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	4b14      	ldr	r3, [pc, #80]	; (80012f0 <HAL_InitTick+0x6c>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	4619      	mov	r1, r3
 80012a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80012aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ae:	4618      	mov	r0, r3
 80012b0:	f000 f97b 	bl	80015aa <HAL_SYSTICK_Config>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d10f      	bne.n	80012da <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2b0f      	cmp	r3, #15
 80012be:	d809      	bhi.n	80012d4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012c0:	2200      	movs	r2, #0
 80012c2:	6879      	ldr	r1, [r7, #4]
 80012c4:	f04f 30ff 	mov.w	r0, #4294967295
 80012c8:	f000 f937 	bl	800153a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012cc:	4a0a      	ldr	r2, [pc, #40]	; (80012f8 <HAL_InitTick+0x74>)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6013      	str	r3, [r2, #0]
 80012d2:	e007      	b.n	80012e4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80012d4:	2301      	movs	r3, #1
 80012d6:	73fb      	strb	r3, [r7, #15]
 80012d8:	e004      	b.n	80012e4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	73fb      	strb	r3, [r7, #15]
 80012de:	e001      	b.n	80012e4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80012e0:	2301      	movs	r3, #1
 80012e2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80012e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3710      	adds	r7, #16
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	20000014 	.word	0x20000014
 80012f4:	2000000c 	.word	0x2000000c
 80012f8:	20000010 	.word	0x20000010

080012fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001300:	4b06      	ldr	r3, [pc, #24]	; (800131c <HAL_IncTick+0x20>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	461a      	mov	r2, r3
 8001306:	4b06      	ldr	r3, [pc, #24]	; (8001320 <HAL_IncTick+0x24>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4413      	add	r3, r2
 800130c:	4a04      	ldr	r2, [pc, #16]	; (8001320 <HAL_IncTick+0x24>)
 800130e:	6013      	str	r3, [r2, #0]
}
 8001310:	bf00      	nop
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	20000014 	.word	0x20000014
 8001320:	200002f0 	.word	0x200002f0

08001324 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  return uwTick;
 8001328:	4b03      	ldr	r3, [pc, #12]	; (8001338 <HAL_GetTick+0x14>)
 800132a:	681b      	ldr	r3, [r3, #0]
}
 800132c:	4618      	mov	r0, r3
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	200002f0 	.word	0x200002f0

0800133c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800133c:	b480      	push	{r7}
 800133e:	b085      	sub	sp, #20
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f003 0307 	and.w	r3, r3, #7
 800134a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800134c:	4b0c      	ldr	r3, [pc, #48]	; (8001380 <__NVIC_SetPriorityGrouping+0x44>)
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001352:	68ba      	ldr	r2, [r7, #8]
 8001354:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001358:	4013      	ands	r3, r2
 800135a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001364:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001368:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800136c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800136e:	4a04      	ldr	r2, [pc, #16]	; (8001380 <__NVIC_SetPriorityGrouping+0x44>)
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	60d3      	str	r3, [r2, #12]
}
 8001374:	bf00      	nop
 8001376:	3714      	adds	r7, #20
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr
 8001380:	e000ed00 	.word	0xe000ed00

08001384 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001388:	4b04      	ldr	r3, [pc, #16]	; (800139c <__NVIC_GetPriorityGrouping+0x18>)
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	0a1b      	lsrs	r3, r3, #8
 800138e:	f003 0307 	and.w	r3, r3, #7
}
 8001392:	4618      	mov	r0, r3
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr
 800139c:	e000ed00 	.word	0xe000ed00

080013a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4603      	mov	r3, r0
 80013a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	db0b      	blt.n	80013ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013b2:	79fb      	ldrb	r3, [r7, #7]
 80013b4:	f003 021f 	and.w	r2, r3, #31
 80013b8:	4907      	ldr	r1, [pc, #28]	; (80013d8 <__NVIC_EnableIRQ+0x38>)
 80013ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013be:	095b      	lsrs	r3, r3, #5
 80013c0:	2001      	movs	r0, #1
 80013c2:	fa00 f202 	lsl.w	r2, r0, r2
 80013c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013ca:	bf00      	nop
 80013cc:	370c      	adds	r7, #12
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	e000e100 	.word	0xe000e100

080013dc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	4603      	mov	r3, r0
 80013e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	db12      	blt.n	8001414 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013ee:	79fb      	ldrb	r3, [r7, #7]
 80013f0:	f003 021f 	and.w	r2, r3, #31
 80013f4:	490a      	ldr	r1, [pc, #40]	; (8001420 <__NVIC_DisableIRQ+0x44>)
 80013f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fa:	095b      	lsrs	r3, r3, #5
 80013fc:	2001      	movs	r0, #1
 80013fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001402:	3320      	adds	r3, #32
 8001404:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001408:	f3bf 8f4f 	dsb	sy
}
 800140c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800140e:	f3bf 8f6f 	isb	sy
}
 8001412:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001414:	bf00      	nop
 8001416:	370c      	adds	r7, #12
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr
 8001420:	e000e100 	.word	0xe000e100

08001424 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	4603      	mov	r3, r0
 800142c:	6039      	str	r1, [r7, #0]
 800142e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001430:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001434:	2b00      	cmp	r3, #0
 8001436:	db0a      	blt.n	800144e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	b2da      	uxtb	r2, r3
 800143c:	490c      	ldr	r1, [pc, #48]	; (8001470 <__NVIC_SetPriority+0x4c>)
 800143e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001442:	0112      	lsls	r2, r2, #4
 8001444:	b2d2      	uxtb	r2, r2
 8001446:	440b      	add	r3, r1
 8001448:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800144c:	e00a      	b.n	8001464 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	b2da      	uxtb	r2, r3
 8001452:	4908      	ldr	r1, [pc, #32]	; (8001474 <__NVIC_SetPriority+0x50>)
 8001454:	79fb      	ldrb	r3, [r7, #7]
 8001456:	f003 030f 	and.w	r3, r3, #15
 800145a:	3b04      	subs	r3, #4
 800145c:	0112      	lsls	r2, r2, #4
 800145e:	b2d2      	uxtb	r2, r2
 8001460:	440b      	add	r3, r1
 8001462:	761a      	strb	r2, [r3, #24]
}
 8001464:	bf00      	nop
 8001466:	370c      	adds	r7, #12
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr
 8001470:	e000e100 	.word	0xe000e100
 8001474:	e000ed00 	.word	0xe000ed00

08001478 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001478:	b480      	push	{r7}
 800147a:	b089      	sub	sp, #36	; 0x24
 800147c:	af00      	add	r7, sp, #0
 800147e:	60f8      	str	r0, [r7, #12]
 8001480:	60b9      	str	r1, [r7, #8]
 8001482:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	f003 0307 	and.w	r3, r3, #7
 800148a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	f1c3 0307 	rsb	r3, r3, #7
 8001492:	2b04      	cmp	r3, #4
 8001494:	bf28      	it	cs
 8001496:	2304      	movcs	r3, #4
 8001498:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	3304      	adds	r3, #4
 800149e:	2b06      	cmp	r3, #6
 80014a0:	d902      	bls.n	80014a8 <NVIC_EncodePriority+0x30>
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	3b03      	subs	r3, #3
 80014a6:	e000      	b.n	80014aa <NVIC_EncodePriority+0x32>
 80014a8:	2300      	movs	r3, #0
 80014aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014ac:	f04f 32ff 	mov.w	r2, #4294967295
 80014b0:	69bb      	ldr	r3, [r7, #24]
 80014b2:	fa02 f303 	lsl.w	r3, r2, r3
 80014b6:	43da      	mvns	r2, r3
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	401a      	ands	r2, r3
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014c0:	f04f 31ff 	mov.w	r1, #4294967295
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	fa01 f303 	lsl.w	r3, r1, r3
 80014ca:	43d9      	mvns	r1, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d0:	4313      	orrs	r3, r2
         );
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3724      	adds	r7, #36	; 0x24
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
	...

080014e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	3b01      	subs	r3, #1
 80014ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014f0:	d301      	bcc.n	80014f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014f2:	2301      	movs	r3, #1
 80014f4:	e00f      	b.n	8001516 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014f6:	4a0a      	ldr	r2, [pc, #40]	; (8001520 <SysTick_Config+0x40>)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	3b01      	subs	r3, #1
 80014fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014fe:	210f      	movs	r1, #15
 8001500:	f04f 30ff 	mov.w	r0, #4294967295
 8001504:	f7ff ff8e 	bl	8001424 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001508:	4b05      	ldr	r3, [pc, #20]	; (8001520 <SysTick_Config+0x40>)
 800150a:	2200      	movs	r2, #0
 800150c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800150e:	4b04      	ldr	r3, [pc, #16]	; (8001520 <SysTick_Config+0x40>)
 8001510:	2207      	movs	r2, #7
 8001512:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001514:	2300      	movs	r3, #0
}
 8001516:	4618      	mov	r0, r3
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	e000e010 	.word	0xe000e010

08001524 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f7ff ff05 	bl	800133c <__NVIC_SetPriorityGrouping>
}
 8001532:	bf00      	nop
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800153a:	b580      	push	{r7, lr}
 800153c:	b086      	sub	sp, #24
 800153e:	af00      	add	r7, sp, #0
 8001540:	4603      	mov	r3, r0
 8001542:	60b9      	str	r1, [r7, #8]
 8001544:	607a      	str	r2, [r7, #4]
 8001546:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001548:	2300      	movs	r3, #0
 800154a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800154c:	f7ff ff1a 	bl	8001384 <__NVIC_GetPriorityGrouping>
 8001550:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001552:	687a      	ldr	r2, [r7, #4]
 8001554:	68b9      	ldr	r1, [r7, #8]
 8001556:	6978      	ldr	r0, [r7, #20]
 8001558:	f7ff ff8e 	bl	8001478 <NVIC_EncodePriority>
 800155c:	4602      	mov	r2, r0
 800155e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001562:	4611      	mov	r1, r2
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff ff5d 	bl	8001424 <__NVIC_SetPriority>
}
 800156a:	bf00      	nop
 800156c:	3718      	adds	r7, #24
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001572:	b580      	push	{r7, lr}
 8001574:	b082      	sub	sp, #8
 8001576:	af00      	add	r7, sp, #0
 8001578:	4603      	mov	r3, r0
 800157a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800157c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001580:	4618      	mov	r0, r3
 8001582:	f7ff ff0d 	bl	80013a0 <__NVIC_EnableIRQ>
}
 8001586:	bf00      	nop
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}

0800158e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800158e:	b580      	push	{r7, lr}
 8001590:	b082      	sub	sp, #8
 8001592:	af00      	add	r7, sp, #0
 8001594:	4603      	mov	r3, r0
 8001596:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001598:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159c:	4618      	mov	r0, r3
 800159e:	f7ff ff1d 	bl	80013dc <__NVIC_DisableIRQ>
}
 80015a2:	bf00      	nop
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}

080015aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b082      	sub	sp, #8
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f7ff ff94 	bl	80014e0 <SysTick_Config>
 80015b8:	4603      	mov	r3, r0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015c2:	b480      	push	{r7}
 80015c4:	b085      	sub	sp, #20
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015ca:	2300      	movs	r3, #0
 80015cc:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d008      	beq.n	80015ec <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2204      	movs	r2, #4
 80015de:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2200      	movs	r2, #0
 80015e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e022      	b.n	8001632 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f022 020e 	bic.w	r2, r2, #14
 80015fa:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f022 0201 	bic.w	r2, r2, #1
 800160a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001610:	f003 021c 	and.w	r2, r3, #28
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001618:	2101      	movs	r1, #1
 800161a:	fa01 f202 	lsl.w	r2, r1, r2
 800161e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2201      	movs	r2, #1
 8001624:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2200      	movs	r2, #0
 800162c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001630:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001632:	4618      	mov	r0, r3
 8001634:	3714      	adds	r7, #20
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr

0800163e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800163e:	b580      	push	{r7, lr}
 8001640:	b084      	sub	sp, #16
 8001642:	af00      	add	r7, sp, #0
 8001644:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001646:	2300      	movs	r3, #0
 8001648:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001650:	b2db      	uxtb	r3, r3
 8001652:	2b02      	cmp	r3, #2
 8001654:	d005      	beq.n	8001662 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2204      	movs	r2, #4
 800165a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	73fb      	strb	r3, [r7, #15]
 8001660:	e029      	b.n	80016b6 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f022 020e 	bic.w	r2, r2, #14
 8001670:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f022 0201 	bic.w	r2, r2, #1
 8001680:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001686:	f003 021c 	and.w	r2, r3, #28
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168e:	2101      	movs	r1, #1
 8001690:	fa01 f202 	lsl.w	r2, r1, r2
 8001694:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2201      	movs	r2, #1
 800169a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2200      	movs	r2, #0
 80016a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d003      	beq.n	80016b6 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	4798      	blx	r3
    }
  }
  return status;
 80016b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3710      	adds	r7, #16
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}

080016c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b087      	sub	sp, #28
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016ca:	2300      	movs	r3, #0
 80016cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016ce:	e148      	b.n	8001962 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	2101      	movs	r1, #1
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	fa01 f303 	lsl.w	r3, r1, r3
 80016dc:	4013      	ands	r3, r2
 80016de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	f000 813a 	beq.w	800195c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f003 0303 	and.w	r3, r3, #3
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d005      	beq.n	8001700 <HAL_GPIO_Init+0x40>
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f003 0303 	and.w	r3, r3, #3
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	d130      	bne.n	8001762 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	2203      	movs	r2, #3
 800170c:	fa02 f303 	lsl.w	r3, r2, r3
 8001710:	43db      	mvns	r3, r3
 8001712:	693a      	ldr	r2, [r7, #16]
 8001714:	4013      	ands	r3, r2
 8001716:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	68da      	ldr	r2, [r3, #12]
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	005b      	lsls	r3, r3, #1
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	693a      	ldr	r2, [r7, #16]
 8001726:	4313      	orrs	r3, r2
 8001728:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	693a      	ldr	r2, [r7, #16]
 800172e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001736:	2201      	movs	r2, #1
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	fa02 f303 	lsl.w	r3, r2, r3
 800173e:	43db      	mvns	r3, r3
 8001740:	693a      	ldr	r2, [r7, #16]
 8001742:	4013      	ands	r3, r2
 8001744:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	091b      	lsrs	r3, r3, #4
 800174c:	f003 0201 	and.w	r2, r3, #1
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	fa02 f303 	lsl.w	r3, r2, r3
 8001756:	693a      	ldr	r2, [r7, #16]
 8001758:	4313      	orrs	r3, r2
 800175a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	693a      	ldr	r2, [r7, #16]
 8001760:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f003 0303 	and.w	r3, r3, #3
 800176a:	2b03      	cmp	r3, #3
 800176c:	d017      	beq.n	800179e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	68db      	ldr	r3, [r3, #12]
 8001772:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	2203      	movs	r2, #3
 800177a:	fa02 f303 	lsl.w	r3, r2, r3
 800177e:	43db      	mvns	r3, r3
 8001780:	693a      	ldr	r2, [r7, #16]
 8001782:	4013      	ands	r3, r2
 8001784:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	689a      	ldr	r2, [r3, #8]
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	005b      	lsls	r3, r3, #1
 800178e:	fa02 f303 	lsl.w	r3, r2, r3
 8001792:	693a      	ldr	r2, [r7, #16]
 8001794:	4313      	orrs	r3, r2
 8001796:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	693a      	ldr	r2, [r7, #16]
 800179c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f003 0303 	and.w	r3, r3, #3
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d123      	bne.n	80017f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	08da      	lsrs	r2, r3, #3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	3208      	adds	r2, #8
 80017b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	f003 0307 	and.w	r3, r3, #7
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	220f      	movs	r2, #15
 80017c2:	fa02 f303 	lsl.w	r3, r2, r3
 80017c6:	43db      	mvns	r3, r3
 80017c8:	693a      	ldr	r2, [r7, #16]
 80017ca:	4013      	ands	r3, r2
 80017cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	691a      	ldr	r2, [r3, #16]
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	f003 0307 	and.w	r3, r3, #7
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	fa02 f303 	lsl.w	r3, r2, r3
 80017de:	693a      	ldr	r2, [r7, #16]
 80017e0:	4313      	orrs	r3, r2
 80017e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	08da      	lsrs	r2, r3, #3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	3208      	adds	r2, #8
 80017ec:	6939      	ldr	r1, [r7, #16]
 80017ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	005b      	lsls	r3, r3, #1
 80017fc:	2203      	movs	r2, #3
 80017fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001802:	43db      	mvns	r3, r3
 8001804:	693a      	ldr	r2, [r7, #16]
 8001806:	4013      	ands	r3, r2
 8001808:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f003 0203 	and.w	r2, r3, #3
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	005b      	lsls	r3, r3, #1
 8001816:	fa02 f303 	lsl.w	r3, r2, r3
 800181a:	693a      	ldr	r2, [r7, #16]
 800181c:	4313      	orrs	r3, r2
 800181e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	693a      	ldr	r2, [r7, #16]
 8001824:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800182e:	2b00      	cmp	r3, #0
 8001830:	f000 8094 	beq.w	800195c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001834:	4b52      	ldr	r3, [pc, #328]	; (8001980 <HAL_GPIO_Init+0x2c0>)
 8001836:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001838:	4a51      	ldr	r2, [pc, #324]	; (8001980 <HAL_GPIO_Init+0x2c0>)
 800183a:	f043 0301 	orr.w	r3, r3, #1
 800183e:	6613      	str	r3, [r2, #96]	; 0x60
 8001840:	4b4f      	ldr	r3, [pc, #316]	; (8001980 <HAL_GPIO_Init+0x2c0>)
 8001842:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001844:	f003 0301 	and.w	r3, r3, #1
 8001848:	60bb      	str	r3, [r7, #8]
 800184a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800184c:	4a4d      	ldr	r2, [pc, #308]	; (8001984 <HAL_GPIO_Init+0x2c4>)
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	089b      	lsrs	r3, r3, #2
 8001852:	3302      	adds	r3, #2
 8001854:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001858:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	f003 0303 	and.w	r3, r3, #3
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	220f      	movs	r2, #15
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	43db      	mvns	r3, r3
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	4013      	ands	r3, r2
 800186e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001876:	d00d      	beq.n	8001894 <HAL_GPIO_Init+0x1d4>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	4a43      	ldr	r2, [pc, #268]	; (8001988 <HAL_GPIO_Init+0x2c8>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d007      	beq.n	8001890 <HAL_GPIO_Init+0x1d0>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	4a42      	ldr	r2, [pc, #264]	; (800198c <HAL_GPIO_Init+0x2cc>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d101      	bne.n	800188c <HAL_GPIO_Init+0x1cc>
 8001888:	2302      	movs	r3, #2
 800188a:	e004      	b.n	8001896 <HAL_GPIO_Init+0x1d6>
 800188c:	2307      	movs	r3, #7
 800188e:	e002      	b.n	8001896 <HAL_GPIO_Init+0x1d6>
 8001890:	2301      	movs	r3, #1
 8001892:	e000      	b.n	8001896 <HAL_GPIO_Init+0x1d6>
 8001894:	2300      	movs	r3, #0
 8001896:	697a      	ldr	r2, [r7, #20]
 8001898:	f002 0203 	and.w	r2, r2, #3
 800189c:	0092      	lsls	r2, r2, #2
 800189e:	4093      	lsls	r3, r2
 80018a0:	693a      	ldr	r2, [r7, #16]
 80018a2:	4313      	orrs	r3, r2
 80018a4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80018a6:	4937      	ldr	r1, [pc, #220]	; (8001984 <HAL_GPIO_Init+0x2c4>)
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	089b      	lsrs	r3, r3, #2
 80018ac:	3302      	adds	r3, #2
 80018ae:	693a      	ldr	r2, [r7, #16]
 80018b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80018b4:	4b36      	ldr	r3, [pc, #216]	; (8001990 <HAL_GPIO_Init+0x2d0>)
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	43db      	mvns	r3, r3
 80018be:	693a      	ldr	r2, [r7, #16]
 80018c0:	4013      	ands	r3, r2
 80018c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d003      	beq.n	80018d8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80018d0:	693a      	ldr	r2, [r7, #16]
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80018d8:	4a2d      	ldr	r2, [pc, #180]	; (8001990 <HAL_GPIO_Init+0x2d0>)
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80018de:	4b2c      	ldr	r3, [pc, #176]	; (8001990 <HAL_GPIO_Init+0x2d0>)
 80018e0:	68db      	ldr	r3, [r3, #12]
 80018e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	43db      	mvns	r3, r3
 80018e8:	693a      	ldr	r2, [r7, #16]
 80018ea:	4013      	ands	r3, r2
 80018ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d003      	beq.n	8001902 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80018fa:	693a      	ldr	r2, [r7, #16]
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	4313      	orrs	r3, r2
 8001900:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001902:	4a23      	ldr	r2, [pc, #140]	; (8001990 <HAL_GPIO_Init+0x2d0>)
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001908:	4b21      	ldr	r3, [pc, #132]	; (8001990 <HAL_GPIO_Init+0x2d0>)
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	43db      	mvns	r3, r3
 8001912:	693a      	ldr	r2, [r7, #16]
 8001914:	4013      	ands	r3, r2
 8001916:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001920:	2b00      	cmp	r3, #0
 8001922:	d003      	beq.n	800192c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001924:	693a      	ldr	r2, [r7, #16]
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	4313      	orrs	r3, r2
 800192a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800192c:	4a18      	ldr	r2, [pc, #96]	; (8001990 <HAL_GPIO_Init+0x2d0>)
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001932:	4b17      	ldr	r3, [pc, #92]	; (8001990 <HAL_GPIO_Init+0x2d0>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	43db      	mvns	r3, r3
 800193c:	693a      	ldr	r2, [r7, #16]
 800193e:	4013      	ands	r3, r2
 8001940:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d003      	beq.n	8001956 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800194e:	693a      	ldr	r2, [r7, #16]
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	4313      	orrs	r3, r2
 8001954:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001956:	4a0e      	ldr	r2, [pc, #56]	; (8001990 <HAL_GPIO_Init+0x2d0>)
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	3301      	adds	r3, #1
 8001960:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	fa22 f303 	lsr.w	r3, r2, r3
 800196c:	2b00      	cmp	r3, #0
 800196e:	f47f aeaf 	bne.w	80016d0 <HAL_GPIO_Init+0x10>
  }
}
 8001972:	bf00      	nop
 8001974:	bf00      	nop
 8001976:	371c      	adds	r7, #28
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr
 8001980:	40021000 	.word	0x40021000
 8001984:	40010000 	.word	0x40010000
 8001988:	48000400 	.word	0x48000400
 800198c:	48000800 	.word	0x48000800
 8001990:	40010400 	.word	0x40010400

08001994 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	460b      	mov	r3, r1
 800199e:	807b      	strh	r3, [r7, #2]
 80019a0:	4613      	mov	r3, r2
 80019a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019a4:	787b      	ldrb	r3, [r7, #1]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d003      	beq.n	80019b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019aa:	887a      	ldrh	r2, [r7, #2]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80019b0:	e002      	b.n	80019b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019b2:	887a      	ldrh	r2, [r7, #2]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019b8:	bf00      	nop
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr

080019c4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b085      	sub	sp, #20
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	460b      	mov	r3, r1
 80019ce:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	695b      	ldr	r3, [r3, #20]
 80019d4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80019d6:	887a      	ldrh	r2, [r7, #2]
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	4013      	ands	r3, r2
 80019dc:	041a      	lsls	r2, r3, #16
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	43d9      	mvns	r1, r3
 80019e2:	887b      	ldrh	r3, [r7, #2]
 80019e4:	400b      	ands	r3, r1
 80019e6:	431a      	orrs	r2, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	619a      	str	r2, [r3, #24]
}
 80019ec:	bf00      	nop
 80019ee:	3714      	adds	r7, #20
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80019fc:	4b04      	ldr	r3, [pc, #16]	; (8001a10 <HAL_PWREx_GetVoltageRange+0x18>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	40007000 	.word	0x40007000

08001a14 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b085      	sub	sp, #20
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a22:	d130      	bne.n	8001a86 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a24:	4b23      	ldr	r3, [pc, #140]	; (8001ab4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a30:	d038      	beq.n	8001aa4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a32:	4b20      	ldr	r3, [pc, #128]	; (8001ab4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a3a:	4a1e      	ldr	r2, [pc, #120]	; (8001ab4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a3c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a40:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a42:	4b1d      	ldr	r3, [pc, #116]	; (8001ab8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	2232      	movs	r2, #50	; 0x32
 8001a48:	fb02 f303 	mul.w	r3, r2, r3
 8001a4c:	4a1b      	ldr	r2, [pc, #108]	; (8001abc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a52:	0c9b      	lsrs	r3, r3, #18
 8001a54:	3301      	adds	r3, #1
 8001a56:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a58:	e002      	b.n	8001a60 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	3b01      	subs	r3, #1
 8001a5e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a60:	4b14      	ldr	r3, [pc, #80]	; (8001ab4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a62:	695b      	ldr	r3, [r3, #20]
 8001a64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a6c:	d102      	bne.n	8001a74 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d1f2      	bne.n	8001a5a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a74:	4b0f      	ldr	r3, [pc, #60]	; (8001ab4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a76:	695b      	ldr	r3, [r3, #20]
 8001a78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a80:	d110      	bne.n	8001aa4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001a82:	2303      	movs	r3, #3
 8001a84:	e00f      	b.n	8001aa6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a86:	4b0b      	ldr	r3, [pc, #44]	; (8001ab4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a92:	d007      	beq.n	8001aa4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a94:	4b07      	ldr	r3, [pc, #28]	; (8001ab4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a9c:	4a05      	ldr	r2, [pc, #20]	; (8001ab4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001aa2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3714      	adds	r7, #20
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	40007000 	.word	0x40007000
 8001ab8:	2000000c 	.word	0x2000000c
 8001abc:	431bde83 	.word	0x431bde83

08001ac0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b088      	sub	sp, #32
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d102      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	f000 bc02 	b.w	80022d8 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ad4:	4b96      	ldr	r3, [pc, #600]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	f003 030c 	and.w	r3, r3, #12
 8001adc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ade:	4b94      	ldr	r3, [pc, #592]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001ae0:	68db      	ldr	r3, [r3, #12]
 8001ae2:	f003 0303 	and.w	r3, r3, #3
 8001ae6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 0310 	and.w	r3, r3, #16
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	f000 80e4 	beq.w	8001cbe <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d007      	beq.n	8001b0c <HAL_RCC_OscConfig+0x4c>
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	2b0c      	cmp	r3, #12
 8001b00:	f040 808b 	bne.w	8001c1a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	f040 8087 	bne.w	8001c1a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b0c:	4b88      	ldr	r3, [pc, #544]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0302 	and.w	r3, r3, #2
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d005      	beq.n	8001b24 <HAL_RCC_OscConfig+0x64>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	699b      	ldr	r3, [r3, #24]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d101      	bne.n	8001b24 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e3d9      	b.n	80022d8 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6a1a      	ldr	r2, [r3, #32]
 8001b28:	4b81      	ldr	r3, [pc, #516]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 0308 	and.w	r3, r3, #8
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d004      	beq.n	8001b3e <HAL_RCC_OscConfig+0x7e>
 8001b34:	4b7e      	ldr	r3, [pc, #504]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b3c:	e005      	b.n	8001b4a <HAL_RCC_OscConfig+0x8a>
 8001b3e:	4b7c      	ldr	r3, [pc, #496]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001b40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b44:	091b      	lsrs	r3, r3, #4
 8001b46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d223      	bcs.n	8001b96 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6a1b      	ldr	r3, [r3, #32]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f000 fd8c 	bl	8002670 <RCC_SetFlashLatencyFromMSIRange>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e3ba      	b.n	80022d8 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b62:	4b73      	ldr	r3, [pc, #460]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a72      	ldr	r2, [pc, #456]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001b68:	f043 0308 	orr.w	r3, r3, #8
 8001b6c:	6013      	str	r3, [r2, #0]
 8001b6e:	4b70      	ldr	r3, [pc, #448]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6a1b      	ldr	r3, [r3, #32]
 8001b7a:	496d      	ldr	r1, [pc, #436]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b80:	4b6b      	ldr	r3, [pc, #428]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	69db      	ldr	r3, [r3, #28]
 8001b8c:	021b      	lsls	r3, r3, #8
 8001b8e:	4968      	ldr	r1, [pc, #416]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001b90:	4313      	orrs	r3, r2
 8001b92:	604b      	str	r3, [r1, #4]
 8001b94:	e025      	b.n	8001be2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b96:	4b66      	ldr	r3, [pc, #408]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a65      	ldr	r2, [pc, #404]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001b9c:	f043 0308 	orr.w	r3, r3, #8
 8001ba0:	6013      	str	r3, [r2, #0]
 8001ba2:	4b63      	ldr	r3, [pc, #396]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6a1b      	ldr	r3, [r3, #32]
 8001bae:	4960      	ldr	r1, [pc, #384]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bb4:	4b5e      	ldr	r3, [pc, #376]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	69db      	ldr	r3, [r3, #28]
 8001bc0:	021b      	lsls	r3, r3, #8
 8001bc2:	495b      	ldr	r1, [pc, #364]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001bc8:	69bb      	ldr	r3, [r7, #24]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d109      	bne.n	8001be2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6a1b      	ldr	r3, [r3, #32]
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f000 fd4c 	bl	8002670 <RCC_SetFlashLatencyFromMSIRange>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e37a      	b.n	80022d8 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001be2:	f000 fc81 	bl	80024e8 <HAL_RCC_GetSysClockFreq>
 8001be6:	4602      	mov	r2, r0
 8001be8:	4b51      	ldr	r3, [pc, #324]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	091b      	lsrs	r3, r3, #4
 8001bee:	f003 030f 	and.w	r3, r3, #15
 8001bf2:	4950      	ldr	r1, [pc, #320]	; (8001d34 <HAL_RCC_OscConfig+0x274>)
 8001bf4:	5ccb      	ldrb	r3, [r1, r3]
 8001bf6:	f003 031f 	and.w	r3, r3, #31
 8001bfa:	fa22 f303 	lsr.w	r3, r2, r3
 8001bfe:	4a4e      	ldr	r2, [pc, #312]	; (8001d38 <HAL_RCC_OscConfig+0x278>)
 8001c00:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001c02:	4b4e      	ldr	r3, [pc, #312]	; (8001d3c <HAL_RCC_OscConfig+0x27c>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7ff fb3c 	bl	8001284 <HAL_InitTick>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001c10:	7bfb      	ldrb	r3, [r7, #15]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d052      	beq.n	8001cbc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001c16:	7bfb      	ldrb	r3, [r7, #15]
 8001c18:	e35e      	b.n	80022d8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	699b      	ldr	r3, [r3, #24]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d032      	beq.n	8001c88 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001c22:	4b43      	ldr	r3, [pc, #268]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a42      	ldr	r2, [pc, #264]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001c28:	f043 0301 	orr.w	r3, r3, #1
 8001c2c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c2e:	f7ff fb79 	bl	8001324 <HAL_GetTick>
 8001c32:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c34:	e008      	b.n	8001c48 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c36:	f7ff fb75 	bl	8001324 <HAL_GetTick>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d901      	bls.n	8001c48 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001c44:	2303      	movs	r3, #3
 8001c46:	e347      	b.n	80022d8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c48:	4b39      	ldr	r3, [pc, #228]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 0302 	and.w	r3, r3, #2
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d0f0      	beq.n	8001c36 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c54:	4b36      	ldr	r3, [pc, #216]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a35      	ldr	r2, [pc, #212]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001c5a:	f043 0308 	orr.w	r3, r3, #8
 8001c5e:	6013      	str	r3, [r2, #0]
 8001c60:	4b33      	ldr	r3, [pc, #204]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6a1b      	ldr	r3, [r3, #32]
 8001c6c:	4930      	ldr	r1, [pc, #192]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c72:	4b2f      	ldr	r3, [pc, #188]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	69db      	ldr	r3, [r3, #28]
 8001c7e:	021b      	lsls	r3, r3, #8
 8001c80:	492b      	ldr	r1, [pc, #172]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001c82:	4313      	orrs	r3, r2
 8001c84:	604b      	str	r3, [r1, #4]
 8001c86:	e01a      	b.n	8001cbe <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001c88:	4b29      	ldr	r3, [pc, #164]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a28      	ldr	r2, [pc, #160]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001c8e:	f023 0301 	bic.w	r3, r3, #1
 8001c92:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c94:	f7ff fb46 	bl	8001324 <HAL_GetTick>
 8001c98:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c9a:	e008      	b.n	8001cae <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c9c:	f7ff fb42 	bl	8001324 <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e314      	b.n	80022d8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001cae:	4b20      	ldr	r3, [pc, #128]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0302 	and.w	r3, r3, #2
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d1f0      	bne.n	8001c9c <HAL_RCC_OscConfig+0x1dc>
 8001cba:	e000      	b.n	8001cbe <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001cbc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0301 	and.w	r3, r3, #1
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d073      	beq.n	8001db2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	2b08      	cmp	r3, #8
 8001cce:	d005      	beq.n	8001cdc <HAL_RCC_OscConfig+0x21c>
 8001cd0:	69bb      	ldr	r3, [r7, #24]
 8001cd2:	2b0c      	cmp	r3, #12
 8001cd4:	d10e      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	2b03      	cmp	r3, #3
 8001cda:	d10b      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cdc:	4b14      	ldr	r3, [pc, #80]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d063      	beq.n	8001db0 <HAL_RCC_OscConfig+0x2f0>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d15f      	bne.n	8001db0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e2f1      	b.n	80022d8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cfc:	d106      	bne.n	8001d0c <HAL_RCC_OscConfig+0x24c>
 8001cfe:	4b0c      	ldr	r3, [pc, #48]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a0b      	ldr	r2, [pc, #44]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001d04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d08:	6013      	str	r3, [r2, #0]
 8001d0a:	e025      	b.n	8001d58 <HAL_RCC_OscConfig+0x298>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d14:	d114      	bne.n	8001d40 <HAL_RCC_OscConfig+0x280>
 8001d16:	4b06      	ldr	r3, [pc, #24]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a05      	ldr	r2, [pc, #20]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001d1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d20:	6013      	str	r3, [r2, #0]
 8001d22:	4b03      	ldr	r3, [pc, #12]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a02      	ldr	r2, [pc, #8]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001d28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d2c:	6013      	str	r3, [r2, #0]
 8001d2e:	e013      	b.n	8001d58 <HAL_RCC_OscConfig+0x298>
 8001d30:	40021000 	.word	0x40021000
 8001d34:	0800565c 	.word	0x0800565c
 8001d38:	2000000c 	.word	0x2000000c
 8001d3c:	20000010 	.word	0x20000010
 8001d40:	4ba0      	ldr	r3, [pc, #640]	; (8001fc4 <HAL_RCC_OscConfig+0x504>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a9f      	ldr	r2, [pc, #636]	; (8001fc4 <HAL_RCC_OscConfig+0x504>)
 8001d46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d4a:	6013      	str	r3, [r2, #0]
 8001d4c:	4b9d      	ldr	r3, [pc, #628]	; (8001fc4 <HAL_RCC_OscConfig+0x504>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a9c      	ldr	r2, [pc, #624]	; (8001fc4 <HAL_RCC_OscConfig+0x504>)
 8001d52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d013      	beq.n	8001d88 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d60:	f7ff fae0 	bl	8001324 <HAL_GetTick>
 8001d64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d66:	e008      	b.n	8001d7a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d68:	f7ff fadc 	bl	8001324 <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	2b64      	cmp	r3, #100	; 0x64
 8001d74:	d901      	bls.n	8001d7a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e2ae      	b.n	80022d8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d7a:	4b92      	ldr	r3, [pc, #584]	; (8001fc4 <HAL_RCC_OscConfig+0x504>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d0f0      	beq.n	8001d68 <HAL_RCC_OscConfig+0x2a8>
 8001d86:	e014      	b.n	8001db2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d88:	f7ff facc 	bl	8001324 <HAL_GetTick>
 8001d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d8e:	e008      	b.n	8001da2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d90:	f7ff fac8 	bl	8001324 <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	2b64      	cmp	r3, #100	; 0x64
 8001d9c:	d901      	bls.n	8001da2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e29a      	b.n	80022d8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001da2:	4b88      	ldr	r3, [pc, #544]	; (8001fc4 <HAL_RCC_OscConfig+0x504>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d1f0      	bne.n	8001d90 <HAL_RCC_OscConfig+0x2d0>
 8001dae:	e000      	b.n	8001db2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001db0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0302 	and.w	r3, r3, #2
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d060      	beq.n	8001e80 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	2b04      	cmp	r3, #4
 8001dc2:	d005      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x310>
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	2b0c      	cmp	r3, #12
 8001dc8:	d119      	bne.n	8001dfe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d116      	bne.n	8001dfe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dd0:	4b7c      	ldr	r3, [pc, #496]	; (8001fc4 <HAL_RCC_OscConfig+0x504>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d005      	beq.n	8001de8 <HAL_RCC_OscConfig+0x328>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d101      	bne.n	8001de8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e277      	b.n	80022d8 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001de8:	4b76      	ldr	r3, [pc, #472]	; (8001fc4 <HAL_RCC_OscConfig+0x504>)
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	691b      	ldr	r3, [r3, #16]
 8001df4:	061b      	lsls	r3, r3, #24
 8001df6:	4973      	ldr	r1, [pc, #460]	; (8001fc4 <HAL_RCC_OscConfig+0x504>)
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dfc:	e040      	b.n	8001e80 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d023      	beq.n	8001e4e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e06:	4b6f      	ldr	r3, [pc, #444]	; (8001fc4 <HAL_RCC_OscConfig+0x504>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a6e      	ldr	r2, [pc, #440]	; (8001fc4 <HAL_RCC_OscConfig+0x504>)
 8001e0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e12:	f7ff fa87 	bl	8001324 <HAL_GetTick>
 8001e16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e18:	e008      	b.n	8001e2c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e1a:	f7ff fa83 	bl	8001324 <HAL_GetTick>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d901      	bls.n	8001e2c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	e255      	b.n	80022d8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e2c:	4b65      	ldr	r3, [pc, #404]	; (8001fc4 <HAL_RCC_OscConfig+0x504>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d0f0      	beq.n	8001e1a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e38:	4b62      	ldr	r3, [pc, #392]	; (8001fc4 <HAL_RCC_OscConfig+0x504>)
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	691b      	ldr	r3, [r3, #16]
 8001e44:	061b      	lsls	r3, r3, #24
 8001e46:	495f      	ldr	r1, [pc, #380]	; (8001fc4 <HAL_RCC_OscConfig+0x504>)
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	604b      	str	r3, [r1, #4]
 8001e4c:	e018      	b.n	8001e80 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e4e:	4b5d      	ldr	r3, [pc, #372]	; (8001fc4 <HAL_RCC_OscConfig+0x504>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a5c      	ldr	r2, [pc, #368]	; (8001fc4 <HAL_RCC_OscConfig+0x504>)
 8001e54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e5a:	f7ff fa63 	bl	8001324 <HAL_GetTick>
 8001e5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e60:	e008      	b.n	8001e74 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e62:	f7ff fa5f 	bl	8001324 <HAL_GetTick>
 8001e66:	4602      	mov	r2, r0
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	d901      	bls.n	8001e74 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001e70:	2303      	movs	r3, #3
 8001e72:	e231      	b.n	80022d8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e74:	4b53      	ldr	r3, [pc, #332]	; (8001fc4 <HAL_RCC_OscConfig+0x504>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d1f0      	bne.n	8001e62 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0308 	and.w	r3, r3, #8
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d03c      	beq.n	8001f06 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	695b      	ldr	r3, [r3, #20]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d01c      	beq.n	8001ece <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e94:	4b4b      	ldr	r3, [pc, #300]	; (8001fc4 <HAL_RCC_OscConfig+0x504>)
 8001e96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e9a:	4a4a      	ldr	r2, [pc, #296]	; (8001fc4 <HAL_RCC_OscConfig+0x504>)
 8001e9c:	f043 0301 	orr.w	r3, r3, #1
 8001ea0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ea4:	f7ff fa3e 	bl	8001324 <HAL_GetTick>
 8001ea8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001eaa:	e008      	b.n	8001ebe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001eac:	f7ff fa3a 	bl	8001324 <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d901      	bls.n	8001ebe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e20c      	b.n	80022d8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ebe:	4b41      	ldr	r3, [pc, #260]	; (8001fc4 <HAL_RCC_OscConfig+0x504>)
 8001ec0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ec4:	f003 0302 	and.w	r3, r3, #2
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d0ef      	beq.n	8001eac <HAL_RCC_OscConfig+0x3ec>
 8001ecc:	e01b      	b.n	8001f06 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ece:	4b3d      	ldr	r3, [pc, #244]	; (8001fc4 <HAL_RCC_OscConfig+0x504>)
 8001ed0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ed4:	4a3b      	ldr	r2, [pc, #236]	; (8001fc4 <HAL_RCC_OscConfig+0x504>)
 8001ed6:	f023 0301 	bic.w	r3, r3, #1
 8001eda:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ede:	f7ff fa21 	bl	8001324 <HAL_GetTick>
 8001ee2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ee4:	e008      	b.n	8001ef8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ee6:	f7ff fa1d 	bl	8001324 <HAL_GetTick>
 8001eea:	4602      	mov	r2, r0
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d901      	bls.n	8001ef8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e1ef      	b.n	80022d8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ef8:	4b32      	ldr	r3, [pc, #200]	; (8001fc4 <HAL_RCC_OscConfig+0x504>)
 8001efa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001efe:	f003 0302 	and.w	r3, r3, #2
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d1ef      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0304 	and.w	r3, r3, #4
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	f000 80a6 	beq.w	8002060 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f14:	2300      	movs	r3, #0
 8001f16:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001f18:	4b2a      	ldr	r3, [pc, #168]	; (8001fc4 <HAL_RCC_OscConfig+0x504>)
 8001f1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d10d      	bne.n	8001f40 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f24:	4b27      	ldr	r3, [pc, #156]	; (8001fc4 <HAL_RCC_OscConfig+0x504>)
 8001f26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f28:	4a26      	ldr	r2, [pc, #152]	; (8001fc4 <HAL_RCC_OscConfig+0x504>)
 8001f2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f2e:	6593      	str	r3, [r2, #88]	; 0x58
 8001f30:	4b24      	ldr	r3, [pc, #144]	; (8001fc4 <HAL_RCC_OscConfig+0x504>)
 8001f32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f38:	60bb      	str	r3, [r7, #8]
 8001f3a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f40:	4b21      	ldr	r3, [pc, #132]	; (8001fc8 <HAL_RCC_OscConfig+0x508>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d118      	bne.n	8001f7e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f4c:	4b1e      	ldr	r3, [pc, #120]	; (8001fc8 <HAL_RCC_OscConfig+0x508>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a1d      	ldr	r2, [pc, #116]	; (8001fc8 <HAL_RCC_OscConfig+0x508>)
 8001f52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f56:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f58:	f7ff f9e4 	bl	8001324 <HAL_GetTick>
 8001f5c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f5e:	e008      	b.n	8001f72 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f60:	f7ff f9e0 	bl	8001324 <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d901      	bls.n	8001f72 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e1b2      	b.n	80022d8 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f72:	4b15      	ldr	r3, [pc, #84]	; (8001fc8 <HAL_RCC_OscConfig+0x508>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d0f0      	beq.n	8001f60 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d108      	bne.n	8001f98 <HAL_RCC_OscConfig+0x4d8>
 8001f86:	4b0f      	ldr	r3, [pc, #60]	; (8001fc4 <HAL_RCC_OscConfig+0x504>)
 8001f88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f8c:	4a0d      	ldr	r2, [pc, #52]	; (8001fc4 <HAL_RCC_OscConfig+0x504>)
 8001f8e:	f043 0301 	orr.w	r3, r3, #1
 8001f92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f96:	e029      	b.n	8001fec <HAL_RCC_OscConfig+0x52c>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	2b05      	cmp	r3, #5
 8001f9e:	d115      	bne.n	8001fcc <HAL_RCC_OscConfig+0x50c>
 8001fa0:	4b08      	ldr	r3, [pc, #32]	; (8001fc4 <HAL_RCC_OscConfig+0x504>)
 8001fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fa6:	4a07      	ldr	r2, [pc, #28]	; (8001fc4 <HAL_RCC_OscConfig+0x504>)
 8001fa8:	f043 0304 	orr.w	r3, r3, #4
 8001fac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fb0:	4b04      	ldr	r3, [pc, #16]	; (8001fc4 <HAL_RCC_OscConfig+0x504>)
 8001fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fb6:	4a03      	ldr	r2, [pc, #12]	; (8001fc4 <HAL_RCC_OscConfig+0x504>)
 8001fb8:	f043 0301 	orr.w	r3, r3, #1
 8001fbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fc0:	e014      	b.n	8001fec <HAL_RCC_OscConfig+0x52c>
 8001fc2:	bf00      	nop
 8001fc4:	40021000 	.word	0x40021000
 8001fc8:	40007000 	.word	0x40007000
 8001fcc:	4b9a      	ldr	r3, [pc, #616]	; (8002238 <HAL_RCC_OscConfig+0x778>)
 8001fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fd2:	4a99      	ldr	r2, [pc, #612]	; (8002238 <HAL_RCC_OscConfig+0x778>)
 8001fd4:	f023 0301 	bic.w	r3, r3, #1
 8001fd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fdc:	4b96      	ldr	r3, [pc, #600]	; (8002238 <HAL_RCC_OscConfig+0x778>)
 8001fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fe2:	4a95      	ldr	r2, [pc, #596]	; (8002238 <HAL_RCC_OscConfig+0x778>)
 8001fe4:	f023 0304 	bic.w	r3, r3, #4
 8001fe8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d016      	beq.n	8002022 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ff4:	f7ff f996 	bl	8001324 <HAL_GetTick>
 8001ff8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ffa:	e00a      	b.n	8002012 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ffc:	f7ff f992 	bl	8001324 <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	f241 3288 	movw	r2, #5000	; 0x1388
 800200a:	4293      	cmp	r3, r2
 800200c:	d901      	bls.n	8002012 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e162      	b.n	80022d8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002012:	4b89      	ldr	r3, [pc, #548]	; (8002238 <HAL_RCC_OscConfig+0x778>)
 8002014:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002018:	f003 0302 	and.w	r3, r3, #2
 800201c:	2b00      	cmp	r3, #0
 800201e:	d0ed      	beq.n	8001ffc <HAL_RCC_OscConfig+0x53c>
 8002020:	e015      	b.n	800204e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002022:	f7ff f97f 	bl	8001324 <HAL_GetTick>
 8002026:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002028:	e00a      	b.n	8002040 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800202a:	f7ff f97b 	bl	8001324 <HAL_GetTick>
 800202e:	4602      	mov	r2, r0
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	f241 3288 	movw	r2, #5000	; 0x1388
 8002038:	4293      	cmp	r3, r2
 800203a:	d901      	bls.n	8002040 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800203c:	2303      	movs	r3, #3
 800203e:	e14b      	b.n	80022d8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002040:	4b7d      	ldr	r3, [pc, #500]	; (8002238 <HAL_RCC_OscConfig+0x778>)
 8002042:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	2b00      	cmp	r3, #0
 800204c:	d1ed      	bne.n	800202a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800204e:	7ffb      	ldrb	r3, [r7, #31]
 8002050:	2b01      	cmp	r3, #1
 8002052:	d105      	bne.n	8002060 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002054:	4b78      	ldr	r3, [pc, #480]	; (8002238 <HAL_RCC_OscConfig+0x778>)
 8002056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002058:	4a77      	ldr	r2, [pc, #476]	; (8002238 <HAL_RCC_OscConfig+0x778>)
 800205a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800205e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0320 	and.w	r3, r3, #32
 8002068:	2b00      	cmp	r3, #0
 800206a:	d03c      	beq.n	80020e6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002070:	2b00      	cmp	r3, #0
 8002072:	d01c      	beq.n	80020ae <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002074:	4b70      	ldr	r3, [pc, #448]	; (8002238 <HAL_RCC_OscConfig+0x778>)
 8002076:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800207a:	4a6f      	ldr	r2, [pc, #444]	; (8002238 <HAL_RCC_OscConfig+0x778>)
 800207c:	f043 0301 	orr.w	r3, r3, #1
 8002080:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002084:	f7ff f94e 	bl	8001324 <HAL_GetTick>
 8002088:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800208a:	e008      	b.n	800209e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800208c:	f7ff f94a 	bl	8001324 <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	2b02      	cmp	r3, #2
 8002098:	d901      	bls.n	800209e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e11c      	b.n	80022d8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800209e:	4b66      	ldr	r3, [pc, #408]	; (8002238 <HAL_RCC_OscConfig+0x778>)
 80020a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020a4:	f003 0302 	and.w	r3, r3, #2
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d0ef      	beq.n	800208c <HAL_RCC_OscConfig+0x5cc>
 80020ac:	e01b      	b.n	80020e6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80020ae:	4b62      	ldr	r3, [pc, #392]	; (8002238 <HAL_RCC_OscConfig+0x778>)
 80020b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020b4:	4a60      	ldr	r2, [pc, #384]	; (8002238 <HAL_RCC_OscConfig+0x778>)
 80020b6:	f023 0301 	bic.w	r3, r3, #1
 80020ba:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020be:	f7ff f931 	bl	8001324 <HAL_GetTick>
 80020c2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80020c4:	e008      	b.n	80020d8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020c6:	f7ff f92d 	bl	8001324 <HAL_GetTick>
 80020ca:	4602      	mov	r2, r0
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	2b02      	cmp	r3, #2
 80020d2:	d901      	bls.n	80020d8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80020d4:	2303      	movs	r3, #3
 80020d6:	e0ff      	b.n	80022d8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80020d8:	4b57      	ldr	r3, [pc, #348]	; (8002238 <HAL_RCC_OscConfig+0x778>)
 80020da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020de:	f003 0302 	and.w	r3, r3, #2
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d1ef      	bne.n	80020c6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	f000 80f3 	beq.w	80022d6 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	f040 80c9 	bne.w	800228c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80020fa:	4b4f      	ldr	r3, [pc, #316]	; (8002238 <HAL_RCC_OscConfig+0x778>)
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	f003 0203 	and.w	r2, r3, #3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800210a:	429a      	cmp	r2, r3
 800210c:	d12c      	bne.n	8002168 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002118:	3b01      	subs	r3, #1
 800211a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800211c:	429a      	cmp	r2, r3
 800211e:	d123      	bne.n	8002168 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800212a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800212c:	429a      	cmp	r2, r3
 800212e:	d11b      	bne.n	8002168 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800213a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800213c:	429a      	cmp	r2, r3
 800213e:	d113      	bne.n	8002168 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800214a:	085b      	lsrs	r3, r3, #1
 800214c:	3b01      	subs	r3, #1
 800214e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002150:	429a      	cmp	r2, r3
 8002152:	d109      	bne.n	8002168 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215e:	085b      	lsrs	r3, r3, #1
 8002160:	3b01      	subs	r3, #1
 8002162:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002164:	429a      	cmp	r2, r3
 8002166:	d06b      	beq.n	8002240 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002168:	69bb      	ldr	r3, [r7, #24]
 800216a:	2b0c      	cmp	r3, #12
 800216c:	d062      	beq.n	8002234 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800216e:	4b32      	ldr	r3, [pc, #200]	; (8002238 <HAL_RCC_OscConfig+0x778>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e0ac      	b.n	80022d8 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800217e:	4b2e      	ldr	r3, [pc, #184]	; (8002238 <HAL_RCC_OscConfig+0x778>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a2d      	ldr	r2, [pc, #180]	; (8002238 <HAL_RCC_OscConfig+0x778>)
 8002184:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002188:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800218a:	f7ff f8cb 	bl	8001324 <HAL_GetTick>
 800218e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002190:	e008      	b.n	80021a4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002192:	f7ff f8c7 	bl	8001324 <HAL_GetTick>
 8002196:	4602      	mov	r2, r0
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	2b02      	cmp	r3, #2
 800219e:	d901      	bls.n	80021a4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80021a0:	2303      	movs	r3, #3
 80021a2:	e099      	b.n	80022d8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021a4:	4b24      	ldr	r3, [pc, #144]	; (8002238 <HAL_RCC_OscConfig+0x778>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d1f0      	bne.n	8002192 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021b0:	4b21      	ldr	r3, [pc, #132]	; (8002238 <HAL_RCC_OscConfig+0x778>)
 80021b2:	68da      	ldr	r2, [r3, #12]
 80021b4:	4b21      	ldr	r3, [pc, #132]	; (800223c <HAL_RCC_OscConfig+0x77c>)
 80021b6:	4013      	ands	r3, r2
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80021c0:	3a01      	subs	r2, #1
 80021c2:	0112      	lsls	r2, r2, #4
 80021c4:	4311      	orrs	r1, r2
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80021ca:	0212      	lsls	r2, r2, #8
 80021cc:	4311      	orrs	r1, r2
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80021d2:	0852      	lsrs	r2, r2, #1
 80021d4:	3a01      	subs	r2, #1
 80021d6:	0552      	lsls	r2, r2, #21
 80021d8:	4311      	orrs	r1, r2
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80021de:	0852      	lsrs	r2, r2, #1
 80021e0:	3a01      	subs	r2, #1
 80021e2:	0652      	lsls	r2, r2, #25
 80021e4:	4311      	orrs	r1, r2
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80021ea:	06d2      	lsls	r2, r2, #27
 80021ec:	430a      	orrs	r2, r1
 80021ee:	4912      	ldr	r1, [pc, #72]	; (8002238 <HAL_RCC_OscConfig+0x778>)
 80021f0:	4313      	orrs	r3, r2
 80021f2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80021f4:	4b10      	ldr	r3, [pc, #64]	; (8002238 <HAL_RCC_OscConfig+0x778>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a0f      	ldr	r2, [pc, #60]	; (8002238 <HAL_RCC_OscConfig+0x778>)
 80021fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021fe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002200:	4b0d      	ldr	r3, [pc, #52]	; (8002238 <HAL_RCC_OscConfig+0x778>)
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	4a0c      	ldr	r2, [pc, #48]	; (8002238 <HAL_RCC_OscConfig+0x778>)
 8002206:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800220a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800220c:	f7ff f88a 	bl	8001324 <HAL_GetTick>
 8002210:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002212:	e008      	b.n	8002226 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002214:	f7ff f886 	bl	8001324 <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	2b02      	cmp	r3, #2
 8002220:	d901      	bls.n	8002226 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e058      	b.n	80022d8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002226:	4b04      	ldr	r3, [pc, #16]	; (8002238 <HAL_RCC_OscConfig+0x778>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d0f0      	beq.n	8002214 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002232:	e050      	b.n	80022d6 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e04f      	b.n	80022d8 <HAL_RCC_OscConfig+0x818>
 8002238:	40021000 	.word	0x40021000
 800223c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002240:	4b27      	ldr	r3, [pc, #156]	; (80022e0 <HAL_RCC_OscConfig+0x820>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d144      	bne.n	80022d6 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800224c:	4b24      	ldr	r3, [pc, #144]	; (80022e0 <HAL_RCC_OscConfig+0x820>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a23      	ldr	r2, [pc, #140]	; (80022e0 <HAL_RCC_OscConfig+0x820>)
 8002252:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002256:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002258:	4b21      	ldr	r3, [pc, #132]	; (80022e0 <HAL_RCC_OscConfig+0x820>)
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	4a20      	ldr	r2, [pc, #128]	; (80022e0 <HAL_RCC_OscConfig+0x820>)
 800225e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002262:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002264:	f7ff f85e 	bl	8001324 <HAL_GetTick>
 8002268:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800226a:	e008      	b.n	800227e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800226c:	f7ff f85a 	bl	8001324 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	2b02      	cmp	r3, #2
 8002278:	d901      	bls.n	800227e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e02c      	b.n	80022d8 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800227e:	4b18      	ldr	r3, [pc, #96]	; (80022e0 <HAL_RCC_OscConfig+0x820>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d0f0      	beq.n	800226c <HAL_RCC_OscConfig+0x7ac>
 800228a:	e024      	b.n	80022d6 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800228c:	69bb      	ldr	r3, [r7, #24]
 800228e:	2b0c      	cmp	r3, #12
 8002290:	d01f      	beq.n	80022d2 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002292:	4b13      	ldr	r3, [pc, #76]	; (80022e0 <HAL_RCC_OscConfig+0x820>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a12      	ldr	r2, [pc, #72]	; (80022e0 <HAL_RCC_OscConfig+0x820>)
 8002298:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800229c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800229e:	f7ff f841 	bl	8001324 <HAL_GetTick>
 80022a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022a4:	e008      	b.n	80022b8 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022a6:	f7ff f83d 	bl	8001324 <HAL_GetTick>
 80022aa:	4602      	mov	r2, r0
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	1ad3      	subs	r3, r2, r3
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d901      	bls.n	80022b8 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80022b4:	2303      	movs	r3, #3
 80022b6:	e00f      	b.n	80022d8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022b8:	4b09      	ldr	r3, [pc, #36]	; (80022e0 <HAL_RCC_OscConfig+0x820>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d1f0      	bne.n	80022a6 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80022c4:	4b06      	ldr	r3, [pc, #24]	; (80022e0 <HAL_RCC_OscConfig+0x820>)
 80022c6:	68da      	ldr	r2, [r3, #12]
 80022c8:	4905      	ldr	r1, [pc, #20]	; (80022e0 <HAL_RCC_OscConfig+0x820>)
 80022ca:	4b06      	ldr	r3, [pc, #24]	; (80022e4 <HAL_RCC_OscConfig+0x824>)
 80022cc:	4013      	ands	r3, r2
 80022ce:	60cb      	str	r3, [r1, #12]
 80022d0:	e001      	b.n	80022d6 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e000      	b.n	80022d8 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80022d6:	2300      	movs	r3, #0
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3720      	adds	r7, #32
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	40021000 	.word	0x40021000
 80022e4:	feeefffc 	.word	0xfeeefffc

080022e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d101      	bne.n	80022fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e0e7      	b.n	80024cc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022fc:	4b75      	ldr	r3, [pc, #468]	; (80024d4 <HAL_RCC_ClockConfig+0x1ec>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0307 	and.w	r3, r3, #7
 8002304:	683a      	ldr	r2, [r7, #0]
 8002306:	429a      	cmp	r2, r3
 8002308:	d910      	bls.n	800232c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800230a:	4b72      	ldr	r3, [pc, #456]	; (80024d4 <HAL_RCC_ClockConfig+0x1ec>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f023 0207 	bic.w	r2, r3, #7
 8002312:	4970      	ldr	r1, [pc, #448]	; (80024d4 <HAL_RCC_ClockConfig+0x1ec>)
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	4313      	orrs	r3, r2
 8002318:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800231a:	4b6e      	ldr	r3, [pc, #440]	; (80024d4 <HAL_RCC_ClockConfig+0x1ec>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0307 	and.w	r3, r3, #7
 8002322:	683a      	ldr	r2, [r7, #0]
 8002324:	429a      	cmp	r2, r3
 8002326:	d001      	beq.n	800232c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e0cf      	b.n	80024cc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0302 	and.w	r3, r3, #2
 8002334:	2b00      	cmp	r3, #0
 8002336:	d010      	beq.n	800235a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	689a      	ldr	r2, [r3, #8]
 800233c:	4b66      	ldr	r3, [pc, #408]	; (80024d8 <HAL_RCC_ClockConfig+0x1f0>)
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002344:	429a      	cmp	r2, r3
 8002346:	d908      	bls.n	800235a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002348:	4b63      	ldr	r3, [pc, #396]	; (80024d8 <HAL_RCC_ClockConfig+0x1f0>)
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	4960      	ldr	r1, [pc, #384]	; (80024d8 <HAL_RCC_ClockConfig+0x1f0>)
 8002356:	4313      	orrs	r3, r2
 8002358:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0301 	and.w	r3, r3, #1
 8002362:	2b00      	cmp	r3, #0
 8002364:	d04c      	beq.n	8002400 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	2b03      	cmp	r3, #3
 800236c:	d107      	bne.n	800237e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800236e:	4b5a      	ldr	r3, [pc, #360]	; (80024d8 <HAL_RCC_ClockConfig+0x1f0>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d121      	bne.n	80023be <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e0a6      	b.n	80024cc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	2b02      	cmp	r3, #2
 8002384:	d107      	bne.n	8002396 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002386:	4b54      	ldr	r3, [pc, #336]	; (80024d8 <HAL_RCC_ClockConfig+0x1f0>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d115      	bne.n	80023be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e09a      	b.n	80024cc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d107      	bne.n	80023ae <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800239e:	4b4e      	ldr	r3, [pc, #312]	; (80024d8 <HAL_RCC_ClockConfig+0x1f0>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0302 	and.w	r3, r3, #2
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d109      	bne.n	80023be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e08e      	b.n	80024cc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023ae:	4b4a      	ldr	r3, [pc, #296]	; (80024d8 <HAL_RCC_ClockConfig+0x1f0>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d101      	bne.n	80023be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e086      	b.n	80024cc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80023be:	4b46      	ldr	r3, [pc, #280]	; (80024d8 <HAL_RCC_ClockConfig+0x1f0>)
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	f023 0203 	bic.w	r2, r3, #3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	4943      	ldr	r1, [pc, #268]	; (80024d8 <HAL_RCC_ClockConfig+0x1f0>)
 80023cc:	4313      	orrs	r3, r2
 80023ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023d0:	f7fe ffa8 	bl	8001324 <HAL_GetTick>
 80023d4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023d6:	e00a      	b.n	80023ee <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023d8:	f7fe ffa4 	bl	8001324 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e06e      	b.n	80024cc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ee:	4b3a      	ldr	r3, [pc, #232]	; (80024d8 <HAL_RCC_ClockConfig+0x1f0>)
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	f003 020c 	and.w	r2, r3, #12
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d1eb      	bne.n	80023d8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0302 	and.w	r3, r3, #2
 8002408:	2b00      	cmp	r3, #0
 800240a:	d010      	beq.n	800242e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	689a      	ldr	r2, [r3, #8]
 8002410:	4b31      	ldr	r3, [pc, #196]	; (80024d8 <HAL_RCC_ClockConfig+0x1f0>)
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002418:	429a      	cmp	r2, r3
 800241a:	d208      	bcs.n	800242e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800241c:	4b2e      	ldr	r3, [pc, #184]	; (80024d8 <HAL_RCC_ClockConfig+0x1f0>)
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	492b      	ldr	r1, [pc, #172]	; (80024d8 <HAL_RCC_ClockConfig+0x1f0>)
 800242a:	4313      	orrs	r3, r2
 800242c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800242e:	4b29      	ldr	r3, [pc, #164]	; (80024d4 <HAL_RCC_ClockConfig+0x1ec>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0307 	and.w	r3, r3, #7
 8002436:	683a      	ldr	r2, [r7, #0]
 8002438:	429a      	cmp	r2, r3
 800243a:	d210      	bcs.n	800245e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800243c:	4b25      	ldr	r3, [pc, #148]	; (80024d4 <HAL_RCC_ClockConfig+0x1ec>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f023 0207 	bic.w	r2, r3, #7
 8002444:	4923      	ldr	r1, [pc, #140]	; (80024d4 <HAL_RCC_ClockConfig+0x1ec>)
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	4313      	orrs	r3, r2
 800244a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800244c:	4b21      	ldr	r3, [pc, #132]	; (80024d4 <HAL_RCC_ClockConfig+0x1ec>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0307 	and.w	r3, r3, #7
 8002454:	683a      	ldr	r2, [r7, #0]
 8002456:	429a      	cmp	r2, r3
 8002458:	d001      	beq.n	800245e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e036      	b.n	80024cc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0304 	and.w	r3, r3, #4
 8002466:	2b00      	cmp	r3, #0
 8002468:	d008      	beq.n	800247c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800246a:	4b1b      	ldr	r3, [pc, #108]	; (80024d8 <HAL_RCC_ClockConfig+0x1f0>)
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	4918      	ldr	r1, [pc, #96]	; (80024d8 <HAL_RCC_ClockConfig+0x1f0>)
 8002478:	4313      	orrs	r3, r2
 800247a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0308 	and.w	r3, r3, #8
 8002484:	2b00      	cmp	r3, #0
 8002486:	d009      	beq.n	800249c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002488:	4b13      	ldr	r3, [pc, #76]	; (80024d8 <HAL_RCC_ClockConfig+0x1f0>)
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	691b      	ldr	r3, [r3, #16]
 8002494:	00db      	lsls	r3, r3, #3
 8002496:	4910      	ldr	r1, [pc, #64]	; (80024d8 <HAL_RCC_ClockConfig+0x1f0>)
 8002498:	4313      	orrs	r3, r2
 800249a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800249c:	f000 f824 	bl	80024e8 <HAL_RCC_GetSysClockFreq>
 80024a0:	4602      	mov	r2, r0
 80024a2:	4b0d      	ldr	r3, [pc, #52]	; (80024d8 <HAL_RCC_ClockConfig+0x1f0>)
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	091b      	lsrs	r3, r3, #4
 80024a8:	f003 030f 	and.w	r3, r3, #15
 80024ac:	490b      	ldr	r1, [pc, #44]	; (80024dc <HAL_RCC_ClockConfig+0x1f4>)
 80024ae:	5ccb      	ldrb	r3, [r1, r3]
 80024b0:	f003 031f 	and.w	r3, r3, #31
 80024b4:	fa22 f303 	lsr.w	r3, r2, r3
 80024b8:	4a09      	ldr	r2, [pc, #36]	; (80024e0 <HAL_RCC_ClockConfig+0x1f8>)
 80024ba:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80024bc:	4b09      	ldr	r3, [pc, #36]	; (80024e4 <HAL_RCC_ClockConfig+0x1fc>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4618      	mov	r0, r3
 80024c2:	f7fe fedf 	bl	8001284 <HAL_InitTick>
 80024c6:	4603      	mov	r3, r0
 80024c8:	72fb      	strb	r3, [r7, #11]

  return status;
 80024ca:	7afb      	ldrb	r3, [r7, #11]
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3710      	adds	r7, #16
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	40022000 	.word	0x40022000
 80024d8:	40021000 	.word	0x40021000
 80024dc:	0800565c 	.word	0x0800565c
 80024e0:	2000000c 	.word	0x2000000c
 80024e4:	20000010 	.word	0x20000010

080024e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b089      	sub	sp, #36	; 0x24
 80024ec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80024ee:	2300      	movs	r3, #0
 80024f0:	61fb      	str	r3, [r7, #28]
 80024f2:	2300      	movs	r3, #0
 80024f4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024f6:	4b3e      	ldr	r3, [pc, #248]	; (80025f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	f003 030c 	and.w	r3, r3, #12
 80024fe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002500:	4b3b      	ldr	r3, [pc, #236]	; (80025f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	f003 0303 	and.w	r3, r3, #3
 8002508:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d005      	beq.n	800251c <HAL_RCC_GetSysClockFreq+0x34>
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	2b0c      	cmp	r3, #12
 8002514:	d121      	bne.n	800255a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2b01      	cmp	r3, #1
 800251a:	d11e      	bne.n	800255a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800251c:	4b34      	ldr	r3, [pc, #208]	; (80025f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0308 	and.w	r3, r3, #8
 8002524:	2b00      	cmp	r3, #0
 8002526:	d107      	bne.n	8002538 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002528:	4b31      	ldr	r3, [pc, #196]	; (80025f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800252a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800252e:	0a1b      	lsrs	r3, r3, #8
 8002530:	f003 030f 	and.w	r3, r3, #15
 8002534:	61fb      	str	r3, [r7, #28]
 8002536:	e005      	b.n	8002544 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002538:	4b2d      	ldr	r3, [pc, #180]	; (80025f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	091b      	lsrs	r3, r3, #4
 800253e:	f003 030f 	and.w	r3, r3, #15
 8002542:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002544:	4a2b      	ldr	r2, [pc, #172]	; (80025f4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800254c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d10d      	bne.n	8002570 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002558:	e00a      	b.n	8002570 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	2b04      	cmp	r3, #4
 800255e:	d102      	bne.n	8002566 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002560:	4b25      	ldr	r3, [pc, #148]	; (80025f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002562:	61bb      	str	r3, [r7, #24]
 8002564:	e004      	b.n	8002570 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	2b08      	cmp	r3, #8
 800256a:	d101      	bne.n	8002570 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800256c:	4b23      	ldr	r3, [pc, #140]	; (80025fc <HAL_RCC_GetSysClockFreq+0x114>)
 800256e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	2b0c      	cmp	r3, #12
 8002574:	d134      	bne.n	80025e0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002576:	4b1e      	ldr	r3, [pc, #120]	; (80025f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	f003 0303 	and.w	r3, r3, #3
 800257e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	2b02      	cmp	r3, #2
 8002584:	d003      	beq.n	800258e <HAL_RCC_GetSysClockFreq+0xa6>
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	2b03      	cmp	r3, #3
 800258a:	d003      	beq.n	8002594 <HAL_RCC_GetSysClockFreq+0xac>
 800258c:	e005      	b.n	800259a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800258e:	4b1a      	ldr	r3, [pc, #104]	; (80025f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002590:	617b      	str	r3, [r7, #20]
      break;
 8002592:	e005      	b.n	80025a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002594:	4b19      	ldr	r3, [pc, #100]	; (80025fc <HAL_RCC_GetSysClockFreq+0x114>)
 8002596:	617b      	str	r3, [r7, #20]
      break;
 8002598:	e002      	b.n	80025a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	617b      	str	r3, [r7, #20]
      break;
 800259e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025a0:	4b13      	ldr	r3, [pc, #76]	; (80025f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	091b      	lsrs	r3, r3, #4
 80025a6:	f003 0307 	and.w	r3, r3, #7
 80025aa:	3301      	adds	r3, #1
 80025ac:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80025ae:	4b10      	ldr	r3, [pc, #64]	; (80025f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	0a1b      	lsrs	r3, r3, #8
 80025b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80025b8:	697a      	ldr	r2, [r7, #20]
 80025ba:	fb03 f202 	mul.w	r2, r3, r2
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025c4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80025c6:	4b0a      	ldr	r3, [pc, #40]	; (80025f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	0e5b      	lsrs	r3, r3, #25
 80025cc:	f003 0303 	and.w	r3, r3, #3
 80025d0:	3301      	adds	r3, #1
 80025d2:	005b      	lsls	r3, r3, #1
 80025d4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80025d6:	697a      	ldr	r2, [r7, #20]
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	fbb2 f3f3 	udiv	r3, r2, r3
 80025de:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80025e0:	69bb      	ldr	r3, [r7, #24]
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3724      	adds	r7, #36	; 0x24
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	40021000 	.word	0x40021000
 80025f4:	08005674 	.word	0x08005674
 80025f8:	00f42400 	.word	0x00f42400
 80025fc:	007a1200 	.word	0x007a1200

08002600 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002604:	4b03      	ldr	r3, [pc, #12]	; (8002614 <HAL_RCC_GetHCLKFreq+0x14>)
 8002606:	681b      	ldr	r3, [r3, #0]
}
 8002608:	4618      	mov	r0, r3
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop
 8002614:	2000000c 	.word	0x2000000c

08002618 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800261c:	f7ff fff0 	bl	8002600 <HAL_RCC_GetHCLKFreq>
 8002620:	4602      	mov	r2, r0
 8002622:	4b06      	ldr	r3, [pc, #24]	; (800263c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	0a1b      	lsrs	r3, r3, #8
 8002628:	f003 0307 	and.w	r3, r3, #7
 800262c:	4904      	ldr	r1, [pc, #16]	; (8002640 <HAL_RCC_GetPCLK1Freq+0x28>)
 800262e:	5ccb      	ldrb	r3, [r1, r3]
 8002630:	f003 031f 	and.w	r3, r3, #31
 8002634:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002638:	4618      	mov	r0, r3
 800263a:	bd80      	pop	{r7, pc}
 800263c:	40021000 	.word	0x40021000
 8002640:	0800566c 	.word	0x0800566c

08002644 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002648:	f7ff ffda 	bl	8002600 <HAL_RCC_GetHCLKFreq>
 800264c:	4602      	mov	r2, r0
 800264e:	4b06      	ldr	r3, [pc, #24]	; (8002668 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	0adb      	lsrs	r3, r3, #11
 8002654:	f003 0307 	and.w	r3, r3, #7
 8002658:	4904      	ldr	r1, [pc, #16]	; (800266c <HAL_RCC_GetPCLK2Freq+0x28>)
 800265a:	5ccb      	ldrb	r3, [r1, r3]
 800265c:	f003 031f 	and.w	r3, r3, #31
 8002660:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002664:	4618      	mov	r0, r3
 8002666:	bd80      	pop	{r7, pc}
 8002668:	40021000 	.word	0x40021000
 800266c:	0800566c 	.word	0x0800566c

08002670 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b086      	sub	sp, #24
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002678:	2300      	movs	r3, #0
 800267a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800267c:	4b2a      	ldr	r3, [pc, #168]	; (8002728 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800267e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002680:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d003      	beq.n	8002690 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002688:	f7ff f9b6 	bl	80019f8 <HAL_PWREx_GetVoltageRange>
 800268c:	6178      	str	r0, [r7, #20]
 800268e:	e014      	b.n	80026ba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002690:	4b25      	ldr	r3, [pc, #148]	; (8002728 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002692:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002694:	4a24      	ldr	r2, [pc, #144]	; (8002728 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002696:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800269a:	6593      	str	r3, [r2, #88]	; 0x58
 800269c:	4b22      	ldr	r3, [pc, #136]	; (8002728 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800269e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026a4:	60fb      	str	r3, [r7, #12]
 80026a6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80026a8:	f7ff f9a6 	bl	80019f8 <HAL_PWREx_GetVoltageRange>
 80026ac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80026ae:	4b1e      	ldr	r3, [pc, #120]	; (8002728 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026b2:	4a1d      	ldr	r2, [pc, #116]	; (8002728 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026b8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026c0:	d10b      	bne.n	80026da <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2b80      	cmp	r3, #128	; 0x80
 80026c6:	d919      	bls.n	80026fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2ba0      	cmp	r3, #160	; 0xa0
 80026cc:	d902      	bls.n	80026d4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80026ce:	2302      	movs	r3, #2
 80026d0:	613b      	str	r3, [r7, #16]
 80026d2:	e013      	b.n	80026fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80026d4:	2301      	movs	r3, #1
 80026d6:	613b      	str	r3, [r7, #16]
 80026d8:	e010      	b.n	80026fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2b80      	cmp	r3, #128	; 0x80
 80026de:	d902      	bls.n	80026e6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80026e0:	2303      	movs	r3, #3
 80026e2:	613b      	str	r3, [r7, #16]
 80026e4:	e00a      	b.n	80026fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2b80      	cmp	r3, #128	; 0x80
 80026ea:	d102      	bne.n	80026f2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80026ec:	2302      	movs	r3, #2
 80026ee:	613b      	str	r3, [r7, #16]
 80026f0:	e004      	b.n	80026fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2b70      	cmp	r3, #112	; 0x70
 80026f6:	d101      	bne.n	80026fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80026f8:	2301      	movs	r3, #1
 80026fa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80026fc:	4b0b      	ldr	r3, [pc, #44]	; (800272c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f023 0207 	bic.w	r2, r3, #7
 8002704:	4909      	ldr	r1, [pc, #36]	; (800272c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	4313      	orrs	r3, r2
 800270a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800270c:	4b07      	ldr	r3, [pc, #28]	; (800272c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0307 	and.w	r3, r3, #7
 8002714:	693a      	ldr	r2, [r7, #16]
 8002716:	429a      	cmp	r2, r3
 8002718:	d001      	beq.n	800271e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e000      	b.n	8002720 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800271e:	2300      	movs	r3, #0
}
 8002720:	4618      	mov	r0, r3
 8002722:	3718      	adds	r7, #24
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	40021000 	.word	0x40021000
 800272c:	40022000 	.word	0x40022000

08002730 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b086      	sub	sp, #24
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002738:	2300      	movs	r3, #0
 800273a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800273c:	2300      	movs	r3, #0
 800273e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002748:	2b00      	cmp	r3, #0
 800274a:	d031      	beq.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002750:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002754:	d01a      	beq.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002756:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800275a:	d814      	bhi.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800275c:	2b00      	cmp	r3, #0
 800275e:	d009      	beq.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002760:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002764:	d10f      	bne.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002766:	4b5d      	ldr	r3, [pc, #372]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	4a5c      	ldr	r2, [pc, #368]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800276c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002770:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002772:	e00c      	b.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	3304      	adds	r3, #4
 8002778:	2100      	movs	r1, #0
 800277a:	4618      	mov	r0, r3
 800277c:	f000 f9ce 	bl	8002b1c <RCCEx_PLLSAI1_Config>
 8002780:	4603      	mov	r3, r0
 8002782:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002784:	e003      	b.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	74fb      	strb	r3, [r7, #19]
      break;
 800278a:	e000      	b.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800278c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800278e:	7cfb      	ldrb	r3, [r7, #19]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d10b      	bne.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002794:	4b51      	ldr	r3, [pc, #324]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002796:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800279a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027a2:	494e      	ldr	r1, [pc, #312]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027a4:	4313      	orrs	r3, r2
 80027a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80027aa:	e001      	b.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027ac:	7cfb      	ldrb	r3, [r7, #19]
 80027ae:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	f000 809e 	beq.w	80028fa <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027be:	2300      	movs	r3, #0
 80027c0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80027c2:	4b46      	ldr	r3, [pc, #280]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d101      	bne.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80027ce:	2301      	movs	r3, #1
 80027d0:	e000      	b.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80027d2:	2300      	movs	r3, #0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d00d      	beq.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027d8:	4b40      	ldr	r3, [pc, #256]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027dc:	4a3f      	ldr	r2, [pc, #252]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027e2:	6593      	str	r3, [r2, #88]	; 0x58
 80027e4:	4b3d      	ldr	r3, [pc, #244]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ec:	60bb      	str	r3, [r7, #8]
 80027ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027f0:	2301      	movs	r3, #1
 80027f2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027f4:	4b3a      	ldr	r3, [pc, #232]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a39      	ldr	r2, [pc, #228]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80027fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027fe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002800:	f7fe fd90 	bl	8001324 <HAL_GetTick>
 8002804:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002806:	e009      	b.n	800281c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002808:	f7fe fd8c 	bl	8001324 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	2b02      	cmp	r3, #2
 8002814:	d902      	bls.n	800281c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	74fb      	strb	r3, [r7, #19]
        break;
 800281a:	e005      	b.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800281c:	4b30      	ldr	r3, [pc, #192]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002824:	2b00      	cmp	r3, #0
 8002826:	d0ef      	beq.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002828:	7cfb      	ldrb	r3, [r7, #19]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d15a      	bne.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800282e:	4b2b      	ldr	r3, [pc, #172]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002830:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002834:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002838:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d01e      	beq.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002844:	697a      	ldr	r2, [r7, #20]
 8002846:	429a      	cmp	r2, r3
 8002848:	d019      	beq.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800284a:	4b24      	ldr	r3, [pc, #144]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800284c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002850:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002854:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002856:	4b21      	ldr	r3, [pc, #132]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002858:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800285c:	4a1f      	ldr	r2, [pc, #124]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800285e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002862:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002866:	4b1d      	ldr	r3, [pc, #116]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002868:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800286c:	4a1b      	ldr	r2, [pc, #108]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800286e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002872:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002876:	4a19      	ldr	r2, [pc, #100]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	f003 0301 	and.w	r3, r3, #1
 8002884:	2b00      	cmp	r3, #0
 8002886:	d016      	beq.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002888:	f7fe fd4c 	bl	8001324 <HAL_GetTick>
 800288c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800288e:	e00b      	b.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002890:	f7fe fd48 	bl	8001324 <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	f241 3288 	movw	r2, #5000	; 0x1388
 800289e:	4293      	cmp	r3, r2
 80028a0:	d902      	bls.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	74fb      	strb	r3, [r7, #19]
            break;
 80028a6:	e006      	b.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028a8:	4b0c      	ldr	r3, [pc, #48]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80028aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ae:	f003 0302 	and.w	r3, r3, #2
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d0ec      	beq.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80028b6:	7cfb      	ldrb	r3, [r7, #19]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d10b      	bne.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028bc:	4b07      	ldr	r3, [pc, #28]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80028be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028c2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028ca:	4904      	ldr	r1, [pc, #16]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80028cc:	4313      	orrs	r3, r2
 80028ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80028d2:	e009      	b.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80028d4:	7cfb      	ldrb	r3, [r7, #19]
 80028d6:	74bb      	strb	r3, [r7, #18]
 80028d8:	e006      	b.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80028da:	bf00      	nop
 80028dc:	40021000 	.word	0x40021000
 80028e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028e4:	7cfb      	ldrb	r3, [r7, #19]
 80028e6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028e8:	7c7b      	ldrb	r3, [r7, #17]
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d105      	bne.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028ee:	4b8a      	ldr	r3, [pc, #552]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f2:	4a89      	ldr	r2, [pc, #548]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028f8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0301 	and.w	r3, r3, #1
 8002902:	2b00      	cmp	r3, #0
 8002904:	d00a      	beq.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002906:	4b84      	ldr	r3, [pc, #528]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002908:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800290c:	f023 0203 	bic.w	r2, r3, #3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6a1b      	ldr	r3, [r3, #32]
 8002914:	4980      	ldr	r1, [pc, #512]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002916:	4313      	orrs	r3, r2
 8002918:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0302 	and.w	r3, r3, #2
 8002924:	2b00      	cmp	r3, #0
 8002926:	d00a      	beq.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002928:	4b7b      	ldr	r3, [pc, #492]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800292a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800292e:	f023 020c 	bic.w	r2, r3, #12
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002936:	4978      	ldr	r1, [pc, #480]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002938:	4313      	orrs	r3, r2
 800293a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0320 	and.w	r3, r3, #32
 8002946:	2b00      	cmp	r3, #0
 8002948:	d00a      	beq.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800294a:	4b73      	ldr	r3, [pc, #460]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800294c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002950:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002958:	496f      	ldr	r1, [pc, #444]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800295a:	4313      	orrs	r3, r2
 800295c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002968:	2b00      	cmp	r3, #0
 800296a:	d00a      	beq.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800296c:	4b6a      	ldr	r3, [pc, #424]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800296e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002972:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800297a:	4967      	ldr	r1, [pc, #412]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800297c:	4313      	orrs	r3, r2
 800297e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800298a:	2b00      	cmp	r3, #0
 800298c:	d00a      	beq.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800298e:	4b62      	ldr	r3, [pc, #392]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002990:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002994:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800299c:	495e      	ldr	r1, [pc, #376]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800299e:	4313      	orrs	r3, r2
 80029a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d00a      	beq.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80029b0:	4b59      	ldr	r3, [pc, #356]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029b6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029be:	4956      	ldr	r1, [pc, #344]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029c0:	4313      	orrs	r3, r2
 80029c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d00a      	beq.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80029d2:	4b51      	ldr	r3, [pc, #324]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e0:	494d      	ldr	r1, [pc, #308]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029e2:	4313      	orrs	r3, r2
 80029e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d028      	beq.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80029f4:	4b48      	ldr	r3, [pc, #288]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029fa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a02:	4945      	ldr	r1, [pc, #276]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a04:	4313      	orrs	r3, r2
 8002a06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a12:	d106      	bne.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a14:	4b40      	ldr	r3, [pc, #256]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	4a3f      	ldr	r2, [pc, #252]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a1e:	60d3      	str	r3, [r2, #12]
 8002a20:	e011      	b.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a26:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a2a:	d10c      	bne.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	3304      	adds	r3, #4
 8002a30:	2101      	movs	r1, #1
 8002a32:	4618      	mov	r0, r3
 8002a34:	f000 f872 	bl	8002b1c <RCCEx_PLLSAI1_Config>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002a3c:	7cfb      	ldrb	r3, [r7, #19]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d001      	beq.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8002a42:	7cfb      	ldrb	r3, [r7, #19]
 8002a44:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d028      	beq.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002a52:	4b31      	ldr	r3, [pc, #196]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a58:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a60:	492d      	ldr	r1, [pc, #180]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a62:	4313      	orrs	r3, r2
 8002a64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a6c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a70:	d106      	bne.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a72:	4b29      	ldr	r3, [pc, #164]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	4a28      	ldr	r2, [pc, #160]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a78:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a7c:	60d3      	str	r3, [r2, #12]
 8002a7e:	e011      	b.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a84:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a88:	d10c      	bne.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	3304      	adds	r3, #4
 8002a8e:	2101      	movs	r1, #1
 8002a90:	4618      	mov	r0, r3
 8002a92:	f000 f843 	bl	8002b1c <RCCEx_PLLSAI1_Config>
 8002a96:	4603      	mov	r3, r0
 8002a98:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a9a:	7cfb      	ldrb	r3, [r7, #19]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d001      	beq.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002aa0:	7cfb      	ldrb	r3, [r7, #19]
 8002aa2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d01c      	beq.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ab0:	4b19      	ldr	r3, [pc, #100]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ab6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002abe:	4916      	ldr	r1, [pc, #88]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002aca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ace:	d10c      	bne.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	3304      	adds	r3, #4
 8002ad4:	2102      	movs	r1, #2
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f000 f820 	bl	8002b1c <RCCEx_PLLSAI1_Config>
 8002adc:	4603      	mov	r3, r0
 8002ade:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ae0:	7cfb      	ldrb	r3, [r7, #19]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d001      	beq.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8002ae6:	7cfb      	ldrb	r3, [r7, #19]
 8002ae8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d00a      	beq.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002af6:	4b08      	ldr	r3, [pc, #32]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002afc:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b04:	4904      	ldr	r1, [pc, #16]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002b0c:	7cbb      	ldrb	r3, [r7, #18]
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3718      	adds	r7, #24
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	40021000 	.word	0x40021000

08002b1c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b26:	2300      	movs	r3, #0
 8002b28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b2a:	4b74      	ldr	r3, [pc, #464]	; (8002cfc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	f003 0303 	and.w	r3, r3, #3
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d018      	beq.n	8002b68 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002b36:	4b71      	ldr	r3, [pc, #452]	; (8002cfc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	f003 0203 	and.w	r2, r3, #3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d10d      	bne.n	8002b62 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
       ||
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d009      	beq.n	8002b62 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002b4e:	4b6b      	ldr	r3, [pc, #428]	; (8002cfc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	091b      	lsrs	r3, r3, #4
 8002b54:	f003 0307 	and.w	r3, r3, #7
 8002b58:	1c5a      	adds	r2, r3, #1
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
       ||
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d047      	beq.n	8002bf2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	73fb      	strb	r3, [r7, #15]
 8002b66:	e044      	b.n	8002bf2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2b03      	cmp	r3, #3
 8002b6e:	d018      	beq.n	8002ba2 <RCCEx_PLLSAI1_Config+0x86>
 8002b70:	2b03      	cmp	r3, #3
 8002b72:	d825      	bhi.n	8002bc0 <RCCEx_PLLSAI1_Config+0xa4>
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d002      	beq.n	8002b7e <RCCEx_PLLSAI1_Config+0x62>
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d009      	beq.n	8002b90 <RCCEx_PLLSAI1_Config+0x74>
 8002b7c:	e020      	b.n	8002bc0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b7e:	4b5f      	ldr	r3, [pc, #380]	; (8002cfc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0302 	and.w	r3, r3, #2
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d11d      	bne.n	8002bc6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b8e:	e01a      	b.n	8002bc6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b90:	4b5a      	ldr	r3, [pc, #360]	; (8002cfc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d116      	bne.n	8002bca <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ba0:	e013      	b.n	8002bca <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002ba2:	4b56      	ldr	r3, [pc, #344]	; (8002cfc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d10f      	bne.n	8002bce <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002bae:	4b53      	ldr	r3, [pc, #332]	; (8002cfc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d109      	bne.n	8002bce <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002bbe:	e006      	b.n	8002bce <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	73fb      	strb	r3, [r7, #15]
      break;
 8002bc4:	e004      	b.n	8002bd0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002bc6:	bf00      	nop
 8002bc8:	e002      	b.n	8002bd0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002bca:	bf00      	nop
 8002bcc:	e000      	b.n	8002bd0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002bce:	bf00      	nop
    }

    if(status == HAL_OK)
 8002bd0:	7bfb      	ldrb	r3, [r7, #15]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d10d      	bne.n	8002bf2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002bd6:	4b49      	ldr	r3, [pc, #292]	; (8002cfc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6819      	ldr	r1, [r3, #0]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	3b01      	subs	r3, #1
 8002be8:	011b      	lsls	r3, r3, #4
 8002bea:	430b      	orrs	r3, r1
 8002bec:	4943      	ldr	r1, [pc, #268]	; (8002cfc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002bf2:	7bfb      	ldrb	r3, [r7, #15]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d17c      	bne.n	8002cf2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002bf8:	4b40      	ldr	r3, [pc, #256]	; (8002cfc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a3f      	ldr	r2, [pc, #252]	; (8002cfc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bfe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002c02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c04:	f7fe fb8e 	bl	8001324 <HAL_GetTick>
 8002c08:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c0a:	e009      	b.n	8002c20 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c0c:	f7fe fb8a 	bl	8001324 <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d902      	bls.n	8002c20 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	73fb      	strb	r3, [r7, #15]
        break;
 8002c1e:	e005      	b.n	8002c2c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c20:	4b36      	ldr	r3, [pc, #216]	; (8002cfc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d1ef      	bne.n	8002c0c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002c2c:	7bfb      	ldrb	r3, [r7, #15]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d15f      	bne.n	8002cf2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d110      	bne.n	8002c5a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c38:	4b30      	ldr	r3, [pc, #192]	; (8002cfc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c3a:	691b      	ldr	r3, [r3, #16]
 8002c3c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002c40:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	6892      	ldr	r2, [r2, #8]
 8002c48:	0211      	lsls	r1, r2, #8
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	68d2      	ldr	r2, [r2, #12]
 8002c4e:	06d2      	lsls	r2, r2, #27
 8002c50:	430a      	orrs	r2, r1
 8002c52:	492a      	ldr	r1, [pc, #168]	; (8002cfc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c54:	4313      	orrs	r3, r2
 8002c56:	610b      	str	r3, [r1, #16]
 8002c58:	e027      	b.n	8002caa <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d112      	bne.n	8002c86 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c60:	4b26      	ldr	r3, [pc, #152]	; (8002cfc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c62:	691b      	ldr	r3, [r3, #16]
 8002c64:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002c68:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	6892      	ldr	r2, [r2, #8]
 8002c70:	0211      	lsls	r1, r2, #8
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	6912      	ldr	r2, [r2, #16]
 8002c76:	0852      	lsrs	r2, r2, #1
 8002c78:	3a01      	subs	r2, #1
 8002c7a:	0552      	lsls	r2, r2, #21
 8002c7c:	430a      	orrs	r2, r1
 8002c7e:	491f      	ldr	r1, [pc, #124]	; (8002cfc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c80:	4313      	orrs	r3, r2
 8002c82:	610b      	str	r3, [r1, #16]
 8002c84:	e011      	b.n	8002caa <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c86:	4b1d      	ldr	r3, [pc, #116]	; (8002cfc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c88:	691b      	ldr	r3, [r3, #16]
 8002c8a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002c8e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	6892      	ldr	r2, [r2, #8]
 8002c96:	0211      	lsls	r1, r2, #8
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	6952      	ldr	r2, [r2, #20]
 8002c9c:	0852      	lsrs	r2, r2, #1
 8002c9e:	3a01      	subs	r2, #1
 8002ca0:	0652      	lsls	r2, r2, #25
 8002ca2:	430a      	orrs	r2, r1
 8002ca4:	4915      	ldr	r1, [pc, #84]	; (8002cfc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002caa:	4b14      	ldr	r3, [pc, #80]	; (8002cfc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a13      	ldr	r2, [pc, #76]	; (8002cfc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cb0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002cb4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cb6:	f7fe fb35 	bl	8001324 <HAL_GetTick>
 8002cba:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002cbc:	e009      	b.n	8002cd2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002cbe:	f7fe fb31 	bl	8001324 <HAL_GetTick>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d902      	bls.n	8002cd2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	73fb      	strb	r3, [r7, #15]
          break;
 8002cd0:	e005      	b.n	8002cde <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002cd2:	4b0a      	ldr	r3, [pc, #40]	; (8002cfc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d0ef      	beq.n	8002cbe <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002cde:	7bfb      	ldrb	r3, [r7, #15]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d106      	bne.n	8002cf2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002ce4:	4b05      	ldr	r3, [pc, #20]	; (8002cfc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ce6:	691a      	ldr	r2, [r3, #16]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	699b      	ldr	r3, [r3, #24]
 8002cec:	4903      	ldr	r1, [pc, #12]	; (8002cfc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002cf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3710      	adds	r7, #16
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	40021000 	.word	0x40021000

08002d00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d101      	bne.n	8002d12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e049      	b.n	8002da6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d106      	bne.n	8002d2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f7fe f8d4 	bl	8000ed4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2202      	movs	r2, #2
 8002d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	3304      	adds	r3, #4
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	4610      	mov	r0, r2
 8002d40:	f000 f9d2 	bl	80030e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2201      	movs	r2, #1
 8002d48:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2201      	movs	r2, #1
 8002d58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002da4:	2300      	movs	r3, #0
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3708      	adds	r7, #8
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
	...

08002db0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b085      	sub	sp, #20
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d001      	beq.n	8002dc8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e03b      	b.n	8002e40 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2202      	movs	r2, #2
 8002dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	68da      	ldr	r2, [r3, #12]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f042 0201 	orr.w	r2, r2, #1
 8002dde:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a19      	ldr	r2, [pc, #100]	; (8002e4c <HAL_TIM_Base_Start_IT+0x9c>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d009      	beq.n	8002dfe <HAL_TIM_Base_Start_IT+0x4e>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002df2:	d004      	beq.n	8002dfe <HAL_TIM_Base_Start_IT+0x4e>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a15      	ldr	r2, [pc, #84]	; (8002e50 <HAL_TIM_Base_Start_IT+0xa0>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d115      	bne.n	8002e2a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	689a      	ldr	r2, [r3, #8]
 8002e04:	4b13      	ldr	r3, [pc, #76]	; (8002e54 <HAL_TIM_Base_Start_IT+0xa4>)
 8002e06:	4013      	ands	r3, r2
 8002e08:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2b06      	cmp	r3, #6
 8002e0e:	d015      	beq.n	8002e3c <HAL_TIM_Base_Start_IT+0x8c>
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e16:	d011      	beq.n	8002e3c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f042 0201 	orr.w	r2, r2, #1
 8002e26:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e28:	e008      	b.n	8002e3c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f042 0201 	orr.w	r2, r2, #1
 8002e38:	601a      	str	r2, [r3, #0]
 8002e3a:	e000      	b.n	8002e3e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e3c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002e3e:	2300      	movs	r3, #0
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3714      	adds	r7, #20
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr
 8002e4c:	40012c00 	.word	0x40012c00
 8002e50:	40014000 	.word	0x40014000
 8002e54:	00010007 	.word	0x00010007

08002e58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	691b      	ldr	r3, [r3, #16]
 8002e66:	f003 0302 	and.w	r3, r3, #2
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d122      	bne.n	8002eb4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	f003 0302 	and.w	r3, r3, #2
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d11b      	bne.n	8002eb4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f06f 0202 	mvn.w	r2, #2
 8002e84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2201      	movs	r2, #1
 8002e8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	699b      	ldr	r3, [r3, #24]
 8002e92:	f003 0303 	and.w	r3, r3, #3
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d003      	beq.n	8002ea2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f000 f905 	bl	80030aa <HAL_TIM_IC_CaptureCallback>
 8002ea0:	e005      	b.n	8002eae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f000 f8f7 	bl	8003096 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	f000 f908 	bl	80030be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	691b      	ldr	r3, [r3, #16]
 8002eba:	f003 0304 	and.w	r3, r3, #4
 8002ebe:	2b04      	cmp	r3, #4
 8002ec0:	d122      	bne.n	8002f08 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	f003 0304 	and.w	r3, r3, #4
 8002ecc:	2b04      	cmp	r3, #4
 8002ece:	d11b      	bne.n	8002f08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f06f 0204 	mvn.w	r2, #4
 8002ed8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2202      	movs	r2, #2
 8002ede:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	699b      	ldr	r3, [r3, #24]
 8002ee6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d003      	beq.n	8002ef6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f000 f8db 	bl	80030aa <HAL_TIM_IC_CaptureCallback>
 8002ef4:	e005      	b.n	8002f02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f000 f8cd 	bl	8003096 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	f000 f8de 	bl	80030be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	691b      	ldr	r3, [r3, #16]
 8002f0e:	f003 0308 	and.w	r3, r3, #8
 8002f12:	2b08      	cmp	r3, #8
 8002f14:	d122      	bne.n	8002f5c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	f003 0308 	and.w	r3, r3, #8
 8002f20:	2b08      	cmp	r3, #8
 8002f22:	d11b      	bne.n	8002f5c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f06f 0208 	mvn.w	r2, #8
 8002f2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2204      	movs	r2, #4
 8002f32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	69db      	ldr	r3, [r3, #28]
 8002f3a:	f003 0303 	and.w	r3, r3, #3
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d003      	beq.n	8002f4a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f000 f8b1 	bl	80030aa <HAL_TIM_IC_CaptureCallback>
 8002f48:	e005      	b.n	8002f56 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f000 f8a3 	bl	8003096 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f000 f8b4 	bl	80030be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	691b      	ldr	r3, [r3, #16]
 8002f62:	f003 0310 	and.w	r3, r3, #16
 8002f66:	2b10      	cmp	r3, #16
 8002f68:	d122      	bne.n	8002fb0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	f003 0310 	and.w	r3, r3, #16
 8002f74:	2b10      	cmp	r3, #16
 8002f76:	d11b      	bne.n	8002fb0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f06f 0210 	mvn.w	r2, #16
 8002f80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2208      	movs	r2, #8
 8002f86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	69db      	ldr	r3, [r3, #28]
 8002f8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d003      	beq.n	8002f9e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f000 f887 	bl	80030aa <HAL_TIM_IC_CaptureCallback>
 8002f9c:	e005      	b.n	8002faa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f000 f879 	bl	8003096 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f000 f88a 	bl	80030be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	691b      	ldr	r3, [r3, #16]
 8002fb6:	f003 0301 	and.w	r3, r3, #1
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d10e      	bne.n	8002fdc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	f003 0301 	and.w	r3, r3, #1
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d107      	bne.n	8002fdc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f06f 0201 	mvn.w	r2, #1
 8002fd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f7fd fdd4 	bl	8000b84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fe6:	2b80      	cmp	r3, #128	; 0x80
 8002fe8:	d10e      	bne.n	8003008 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ff4:	2b80      	cmp	r3, #128	; 0x80
 8002ff6:	d107      	bne.n	8003008 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003000:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f000 f944 	bl	8003290 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	691b      	ldr	r3, [r3, #16]
 800300e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003012:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003016:	d10e      	bne.n	8003036 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003022:	2b80      	cmp	r3, #128	; 0x80
 8003024:	d107      	bne.n	8003036 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800302e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f000 f937 	bl	80032a4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	691b      	ldr	r3, [r3, #16]
 800303c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003040:	2b40      	cmp	r3, #64	; 0x40
 8003042:	d10e      	bne.n	8003062 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800304e:	2b40      	cmp	r3, #64	; 0x40
 8003050:	d107      	bne.n	8003062 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800305a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f000 f838 	bl	80030d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	691b      	ldr	r3, [r3, #16]
 8003068:	f003 0320 	and.w	r3, r3, #32
 800306c:	2b20      	cmp	r3, #32
 800306e:	d10e      	bne.n	800308e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	f003 0320 	and.w	r3, r3, #32
 800307a:	2b20      	cmp	r3, #32
 800307c:	d107      	bne.n	800308e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f06f 0220 	mvn.w	r2, #32
 8003086:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f000 f8f7 	bl	800327c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800308e:	bf00      	nop
 8003090:	3708      	adds	r7, #8
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}

08003096 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003096:	b480      	push	{r7}
 8003098:	b083      	sub	sp, #12
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800309e:	bf00      	nop
 80030a0:	370c      	adds	r7, #12
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr

080030aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80030aa:	b480      	push	{r7}
 80030ac:	b083      	sub	sp, #12
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80030b2:	bf00      	nop
 80030b4:	370c      	adds	r7, #12
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr

080030be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80030be:	b480      	push	{r7}
 80030c0:	b083      	sub	sp, #12
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80030c6:	bf00      	nop
 80030c8:	370c      	adds	r7, #12
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr

080030d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80030d2:	b480      	push	{r7}
 80030d4:	b083      	sub	sp, #12
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80030da:	bf00      	nop
 80030dc:	370c      	adds	r7, #12
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr
	...

080030e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b085      	sub	sp, #20
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	4a2a      	ldr	r2, [pc, #168]	; (80031a4 <TIM_Base_SetConfig+0xbc>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d003      	beq.n	8003108 <TIM_Base_SetConfig+0x20>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003106:	d108      	bne.n	800311a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800310e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	68fa      	ldr	r2, [r7, #12]
 8003116:	4313      	orrs	r3, r2
 8003118:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a21      	ldr	r2, [pc, #132]	; (80031a4 <TIM_Base_SetConfig+0xbc>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d00b      	beq.n	800313a <TIM_Base_SetConfig+0x52>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003128:	d007      	beq.n	800313a <TIM_Base_SetConfig+0x52>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a1e      	ldr	r2, [pc, #120]	; (80031a8 <TIM_Base_SetConfig+0xc0>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d003      	beq.n	800313a <TIM_Base_SetConfig+0x52>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a1d      	ldr	r2, [pc, #116]	; (80031ac <TIM_Base_SetConfig+0xc4>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d108      	bne.n	800314c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003140:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	68db      	ldr	r3, [r3, #12]
 8003146:	68fa      	ldr	r2, [r7, #12]
 8003148:	4313      	orrs	r3, r2
 800314a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	695b      	ldr	r3, [r3, #20]
 8003156:	4313      	orrs	r3, r2
 8003158:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	68fa      	ldr	r2, [r7, #12]
 800315e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	689a      	ldr	r2, [r3, #8]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	4a0c      	ldr	r2, [pc, #48]	; (80031a4 <TIM_Base_SetConfig+0xbc>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d007      	beq.n	8003188 <TIM_Base_SetConfig+0xa0>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	4a0b      	ldr	r2, [pc, #44]	; (80031a8 <TIM_Base_SetConfig+0xc0>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d003      	beq.n	8003188 <TIM_Base_SetConfig+0xa0>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	4a0a      	ldr	r2, [pc, #40]	; (80031ac <TIM_Base_SetConfig+0xc4>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d103      	bne.n	8003190 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	691a      	ldr	r2, [r3, #16]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	615a      	str	r2, [r3, #20]
}
 8003196:	bf00      	nop
 8003198:	3714      	adds	r7, #20
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop
 80031a4:	40012c00 	.word	0x40012c00
 80031a8:	40014000 	.word	0x40014000
 80031ac:	40014400 	.word	0x40014400

080031b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b085      	sub	sp, #20
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d101      	bne.n	80031c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80031c4:	2302      	movs	r3, #2
 80031c6:	e04f      	b.n	8003268 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2202      	movs	r2, #2
 80031d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a21      	ldr	r2, [pc, #132]	; (8003274 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d108      	bne.n	8003204 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80031f8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	68fa      	ldr	r2, [r7, #12]
 8003200:	4313      	orrs	r3, r2
 8003202:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800320a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	68fa      	ldr	r2, [r7, #12]
 8003212:	4313      	orrs	r3, r2
 8003214:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	68fa      	ldr	r2, [r7, #12]
 800321c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a14      	ldr	r2, [pc, #80]	; (8003274 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d009      	beq.n	800323c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003230:	d004      	beq.n	800323c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a10      	ldr	r2, [pc, #64]	; (8003278 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d10c      	bne.n	8003256 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003242:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	68ba      	ldr	r2, [r7, #8]
 800324a:	4313      	orrs	r3, r2
 800324c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	68ba      	ldr	r2, [r7, #8]
 8003254:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2201      	movs	r2, #1
 800325a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003266:	2300      	movs	r3, #0
}
 8003268:	4618      	mov	r0, r3
 800326a:	3714      	adds	r7, #20
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr
 8003274:	40012c00 	.word	0x40012c00
 8003278:	40014000 	.word	0x40014000

0800327c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003284:	bf00      	nop
 8003286:	370c      	adds	r7, #12
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr

08003290 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003298:	bf00      	nop
 800329a:	370c      	adds	r7, #12
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr

080032a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80032ac:	bf00      	nop
 80032ae:	370c      	adds	r7, #12
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr

080032b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b082      	sub	sp, #8
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d101      	bne.n	80032ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e040      	b.n	800334c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d106      	bne.n	80032e0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2200      	movs	r2, #0
 80032d6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f7fd fe20 	bl	8000f20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2224      	movs	r2, #36	; 0x24
 80032e4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f022 0201 	bic.w	r2, r2, #1
 80032f4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f000 fbe8 	bl	8003acc <UART_SetConfig>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d101      	bne.n	8003306 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e022      	b.n	800334c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330a:	2b00      	cmp	r3, #0
 800330c:	d002      	beq.n	8003314 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f000 fe08 	bl	8003f24 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	685a      	ldr	r2, [r3, #4]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003322:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	689a      	ldr	r2, [r3, #8]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003332:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f042 0201 	orr.w	r2, r2, #1
 8003342:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f000 fe8f 	bl	8004068 <UART_CheckIdleState>
 800334a:	4603      	mov	r3, r0
}
 800334c:	4618      	mov	r0, r3
 800334e:	3708      	adds	r7, #8
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}

08003354 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003354:	b480      	push	{r7}
 8003356:	b08b      	sub	sp, #44	; 0x2c
 8003358:	af00      	add	r7, sp, #0
 800335a:	60f8      	str	r0, [r7, #12]
 800335c:	60b9      	str	r1, [r7, #8]
 800335e:	4613      	mov	r3, r2
 8003360:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003366:	2b20      	cmp	r3, #32
 8003368:	d156      	bne.n	8003418 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d002      	beq.n	8003376 <HAL_UART_Transmit_IT+0x22>
 8003370:	88fb      	ldrh	r3, [r7, #6]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d101      	bne.n	800337a <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e04f      	b.n	800341a <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003380:	2b01      	cmp	r3, #1
 8003382:	d101      	bne.n	8003388 <HAL_UART_Transmit_IT+0x34>
 8003384:	2302      	movs	r3, #2
 8003386:	e048      	b.n	800341a <HAL_UART_Transmit_IT+0xc6>
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2201      	movs	r2, #1
 800338c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	68ba      	ldr	r2, [r7, #8]
 8003394:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	88fa      	ldrh	r2, [r7, #6]
 800339a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	88fa      	ldrh	r2, [r7, #6]
 80033a2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2200      	movs	r2, #0
 80033aa:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2221      	movs	r2, #33	; 0x21
 80033b8:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033c2:	d107      	bne.n	80033d4 <HAL_UART_Transmit_IT+0x80>
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	691b      	ldr	r3, [r3, #16]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d103      	bne.n	80033d4 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	4a16      	ldr	r2, [pc, #88]	; (8003428 <HAL_UART_Transmit_IT+0xd4>)
 80033d0:	669a      	str	r2, [r3, #104]	; 0x68
 80033d2:	e002      	b.n	80033da <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	4a15      	ldr	r2, [pc, #84]	; (800342c <HAL_UART_Transmit_IT+0xd8>)
 80033d8:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2200      	movs	r2, #0
 80033de:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	e853 3f00 	ldrex	r3, [r3]
 80033ee:	613b      	str	r3, [r7, #16]
   return(result);
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033f6:	627b      	str	r3, [r7, #36]	; 0x24
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	461a      	mov	r2, r3
 80033fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003400:	623b      	str	r3, [r7, #32]
 8003402:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003404:	69f9      	ldr	r1, [r7, #28]
 8003406:	6a3a      	ldr	r2, [r7, #32]
 8003408:	e841 2300 	strex	r3, r2, [r1]
 800340c:	61bb      	str	r3, [r7, #24]
   return(result);
 800340e:	69bb      	ldr	r3, [r7, #24]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d1e6      	bne.n	80033e2 <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8003414:	2300      	movs	r3, #0
 8003416:	e000      	b.n	800341a <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8003418:	2302      	movs	r3, #2
  }
}
 800341a:	4618      	mov	r0, r3
 800341c:	372c      	adds	r7, #44	; 0x2c
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop
 8003428:	080045c3 	.word	0x080045c3
 800342c:	0800450b 	.word	0x0800450b

08003430 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b08a      	sub	sp, #40	; 0x28
 8003434:	af00      	add	r7, sp, #0
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	60b9      	str	r1, [r7, #8]
 800343a:	4613      	mov	r3, r2
 800343c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003442:	2b20      	cmp	r3, #32
 8003444:	d142      	bne.n	80034cc <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d002      	beq.n	8003452 <HAL_UART_Receive_IT+0x22>
 800344c:	88fb      	ldrh	r3, [r7, #6]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d101      	bne.n	8003456 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e03b      	b.n	80034ce <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800345c:	2b01      	cmp	r3, #1
 800345e:	d101      	bne.n	8003464 <HAL_UART_Receive_IT+0x34>
 8003460:	2302      	movs	r3, #2
 8003462:	e034      	b.n	80034ce <HAL_UART_Receive_IT+0x9e>
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2200      	movs	r2, #0
 8003470:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a18      	ldr	r2, [pc, #96]	; (80034d8 <HAL_UART_Receive_IT+0xa8>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d01f      	beq.n	80034bc <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d018      	beq.n	80034bc <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	e853 3f00 	ldrex	r3, [r3]
 8003496:	613b      	str	r3, [r7, #16]
   return(result);
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800349e:	627b      	str	r3, [r7, #36]	; 0x24
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	461a      	mov	r2, r3
 80034a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a8:	623b      	str	r3, [r7, #32]
 80034aa:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ac:	69f9      	ldr	r1, [r7, #28]
 80034ae:	6a3a      	ldr	r2, [r7, #32]
 80034b0:	e841 2300 	strex	r3, r2, [r1]
 80034b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80034b6:	69bb      	ldr	r3, [r7, #24]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d1e6      	bne.n	800348a <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80034bc:	88fb      	ldrh	r3, [r7, #6]
 80034be:	461a      	mov	r2, r3
 80034c0:	68b9      	ldr	r1, [r7, #8]
 80034c2:	68f8      	ldr	r0, [r7, #12]
 80034c4:	f000 fede 	bl	8004284 <UART_Start_Receive_IT>
 80034c8:	4603      	mov	r3, r0
 80034ca:	e000      	b.n	80034ce <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80034cc:	2302      	movs	r3, #2
  }
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3728      	adds	r7, #40	; 0x28
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	40008000 	.word	0x40008000

080034dc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b0ba      	sub	sp, #232	; 0xe8
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	69db      	ldr	r3, [r3, #28]
 80034ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003502:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003506:	f640 030f 	movw	r3, #2063	; 0x80f
 800350a:	4013      	ands	r3, r2
 800350c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003510:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003514:	2b00      	cmp	r3, #0
 8003516:	d115      	bne.n	8003544 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003518:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800351c:	f003 0320 	and.w	r3, r3, #32
 8003520:	2b00      	cmp	r3, #0
 8003522:	d00f      	beq.n	8003544 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003524:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003528:	f003 0320 	and.w	r3, r3, #32
 800352c:	2b00      	cmp	r3, #0
 800352e:	d009      	beq.n	8003544 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003534:	2b00      	cmp	r3, #0
 8003536:	f000 82a6 	beq.w	8003a86 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	4798      	blx	r3
      }
      return;
 8003542:	e2a0      	b.n	8003a86 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003544:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003548:	2b00      	cmp	r3, #0
 800354a:	f000 8117 	beq.w	800377c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800354e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003552:	f003 0301 	and.w	r3, r3, #1
 8003556:	2b00      	cmp	r3, #0
 8003558:	d106      	bne.n	8003568 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800355a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800355e:	4b85      	ldr	r3, [pc, #532]	; (8003774 <HAL_UART_IRQHandler+0x298>)
 8003560:	4013      	ands	r3, r2
 8003562:	2b00      	cmp	r3, #0
 8003564:	f000 810a 	beq.w	800377c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003568:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800356c:	f003 0301 	and.w	r3, r3, #1
 8003570:	2b00      	cmp	r3, #0
 8003572:	d011      	beq.n	8003598 <HAL_UART_IRQHandler+0xbc>
 8003574:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800357c:	2b00      	cmp	r3, #0
 800357e:	d00b      	beq.n	8003598 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	2201      	movs	r2, #1
 8003586:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800358e:	f043 0201 	orr.w	r2, r3, #1
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003598:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800359c:	f003 0302 	and.w	r3, r3, #2
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d011      	beq.n	80035c8 <HAL_UART_IRQHandler+0xec>
 80035a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035a8:	f003 0301 	and.w	r3, r3, #1
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d00b      	beq.n	80035c8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2202      	movs	r2, #2
 80035b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035be:	f043 0204 	orr.w	r2, r3, #4
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80035c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035cc:	f003 0304 	and.w	r3, r3, #4
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d011      	beq.n	80035f8 <HAL_UART_IRQHandler+0x11c>
 80035d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035d8:	f003 0301 	and.w	r3, r3, #1
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d00b      	beq.n	80035f8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2204      	movs	r2, #4
 80035e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035ee:	f043 0202 	orr.w	r2, r3, #2
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80035f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035fc:	f003 0308 	and.w	r3, r3, #8
 8003600:	2b00      	cmp	r3, #0
 8003602:	d017      	beq.n	8003634 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003604:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003608:	f003 0320 	and.w	r3, r3, #32
 800360c:	2b00      	cmp	r3, #0
 800360e:	d105      	bne.n	800361c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003610:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003614:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003618:	2b00      	cmp	r3, #0
 800361a:	d00b      	beq.n	8003634 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	2208      	movs	r2, #8
 8003622:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800362a:	f043 0208 	orr.w	r2, r3, #8
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003634:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003638:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800363c:	2b00      	cmp	r3, #0
 800363e:	d012      	beq.n	8003666 <HAL_UART_IRQHandler+0x18a>
 8003640:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003644:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003648:	2b00      	cmp	r3, #0
 800364a:	d00c      	beq.n	8003666 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003654:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800365c:	f043 0220 	orr.w	r2, r3, #32
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800366c:	2b00      	cmp	r3, #0
 800366e:	f000 820c 	beq.w	8003a8a <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003672:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003676:	f003 0320 	and.w	r3, r3, #32
 800367a:	2b00      	cmp	r3, #0
 800367c:	d00d      	beq.n	800369a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800367e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003682:	f003 0320 	and.w	r3, r3, #32
 8003686:	2b00      	cmp	r3, #0
 8003688:	d007      	beq.n	800369a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800368e:	2b00      	cmp	r3, #0
 8003690:	d003      	beq.n	800369a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036a0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ae:	2b40      	cmp	r3, #64	; 0x40
 80036b0:	d005      	beq.n	80036be <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80036b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80036b6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d04f      	beq.n	800375e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f000 feaa 	bl	8004418 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ce:	2b40      	cmp	r3, #64	; 0x40
 80036d0:	d141      	bne.n	8003756 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	3308      	adds	r3, #8
 80036d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80036e0:	e853 3f00 	ldrex	r3, [r3]
 80036e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80036e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80036ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	3308      	adds	r3, #8
 80036fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80036fe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003702:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003706:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800370a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800370e:	e841 2300 	strex	r3, r2, [r1]
 8003712:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003716:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800371a:	2b00      	cmp	r3, #0
 800371c:	d1d9      	bne.n	80036d2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003722:	2b00      	cmp	r3, #0
 8003724:	d013      	beq.n	800374e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800372a:	4a13      	ldr	r2, [pc, #76]	; (8003778 <HAL_UART_IRQHandler+0x29c>)
 800372c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003732:	4618      	mov	r0, r3
 8003734:	f7fd ff83 	bl	800163e <HAL_DMA_Abort_IT>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d017      	beq.n	800376e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003748:	4610      	mov	r0, r2
 800374a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800374c:	e00f      	b.n	800376e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f000 f9a6 	bl	8003aa0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003754:	e00b      	b.n	800376e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f000 f9a2 	bl	8003aa0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800375c:	e007      	b.n	800376e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f000 f99e 	bl	8003aa0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800376c:	e18d      	b.n	8003a8a <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800376e:	bf00      	nop
    return;
 8003770:	e18b      	b.n	8003a8a <HAL_UART_IRQHandler+0x5ae>
 8003772:	bf00      	nop
 8003774:	04000120 	.word	0x04000120
 8003778:	080044df 	.word	0x080044df

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003780:	2b01      	cmp	r3, #1
 8003782:	f040 8146 	bne.w	8003a12 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003786:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800378a:	f003 0310 	and.w	r3, r3, #16
 800378e:	2b00      	cmp	r3, #0
 8003790:	f000 813f 	beq.w	8003a12 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003794:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003798:	f003 0310 	and.w	r3, r3, #16
 800379c:	2b00      	cmp	r3, #0
 800379e:	f000 8138 	beq.w	8003a12 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	2210      	movs	r2, #16
 80037a8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037b4:	2b40      	cmp	r3, #64	; 0x40
 80037b6:	f040 80b4 	bne.w	8003922 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80037c6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	f000 815f 	beq.w	8003a8e <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80037d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80037da:	429a      	cmp	r2, r3
 80037dc:	f080 8157 	bcs.w	8003a8e <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80037e6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0320 	and.w	r3, r3, #32
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	f040 8085 	bne.w	8003906 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003804:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003808:	e853 3f00 	ldrex	r3, [r3]
 800380c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003810:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003814:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003818:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	461a      	mov	r2, r3
 8003822:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003826:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800382a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800382e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003832:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003836:	e841 2300 	strex	r3, r2, [r1]
 800383a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800383e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003842:	2b00      	cmp	r3, #0
 8003844:	d1da      	bne.n	80037fc <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	3308      	adds	r3, #8
 800384c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800384e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003850:	e853 3f00 	ldrex	r3, [r3]
 8003854:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003856:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003858:	f023 0301 	bic.w	r3, r3, #1
 800385c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	3308      	adds	r3, #8
 8003866:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800386a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800386e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003870:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003872:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003876:	e841 2300 	strex	r3, r2, [r1]
 800387a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800387c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800387e:	2b00      	cmp	r3, #0
 8003880:	d1e1      	bne.n	8003846 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	3308      	adds	r3, #8
 8003888:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800388a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800388c:	e853 3f00 	ldrex	r3, [r3]
 8003890:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003892:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003894:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003898:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	3308      	adds	r3, #8
 80038a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80038a6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80038a8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038aa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80038ac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80038ae:	e841 2300 	strex	r3, r2, [r1]
 80038b2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80038b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d1e3      	bne.n	8003882 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2220      	movs	r2, #32
 80038be:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038ce:	e853 3f00 	ldrex	r3, [r3]
 80038d2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80038d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038d6:	f023 0310 	bic.w	r3, r3, #16
 80038da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	461a      	mov	r2, r3
 80038e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80038e8:	65bb      	str	r3, [r7, #88]	; 0x58
 80038ea:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80038ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80038f0:	e841 2300 	strex	r3, r2, [r1]
 80038f4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80038f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d1e4      	bne.n	80038c6 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003900:	4618      	mov	r0, r3
 8003902:	f7fd fe5e 	bl	80015c2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003912:	b29b      	uxth	r3, r3
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	b29b      	uxth	r3, r3
 8003918:	4619      	mov	r1, r3
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f000 f8ca 	bl	8003ab4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003920:	e0b5      	b.n	8003a8e <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800392e:	b29b      	uxth	r3, r3
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800393c:	b29b      	uxth	r3, r3
 800393e:	2b00      	cmp	r3, #0
 8003940:	f000 80a7 	beq.w	8003a92 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8003944:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003948:	2b00      	cmp	r3, #0
 800394a:	f000 80a2 	beq.w	8003a92 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003956:	e853 3f00 	ldrex	r3, [r3]
 800395a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800395c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800395e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003962:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	461a      	mov	r2, r3
 800396c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003970:	647b      	str	r3, [r7, #68]	; 0x44
 8003972:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003974:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003976:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003978:	e841 2300 	strex	r3, r2, [r1]
 800397c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800397e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003980:	2b00      	cmp	r3, #0
 8003982:	d1e4      	bne.n	800394e <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	3308      	adds	r3, #8
 800398a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800398c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398e:	e853 3f00 	ldrex	r3, [r3]
 8003992:	623b      	str	r3, [r7, #32]
   return(result);
 8003994:	6a3b      	ldr	r3, [r7, #32]
 8003996:	f023 0301 	bic.w	r3, r3, #1
 800399a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	3308      	adds	r3, #8
 80039a4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80039a8:	633a      	str	r2, [r7, #48]	; 0x30
 80039aa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80039ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039b0:	e841 2300 	strex	r3, r2, [r1]
 80039b4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80039b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d1e3      	bne.n	8003984 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2220      	movs	r2, #32
 80039c0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2200      	movs	r2, #0
 80039cc:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	e853 3f00 	ldrex	r3, [r3]
 80039da:	60fb      	str	r3, [r7, #12]
   return(result);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f023 0310 	bic.w	r3, r3, #16
 80039e2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	461a      	mov	r2, r3
 80039ec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80039f0:	61fb      	str	r3, [r7, #28]
 80039f2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039f4:	69b9      	ldr	r1, [r7, #24]
 80039f6:	69fa      	ldr	r2, [r7, #28]
 80039f8:	e841 2300 	strex	r3, r2, [r1]
 80039fc:	617b      	str	r3, [r7, #20]
   return(result);
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d1e4      	bne.n	80039ce <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003a04:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003a08:	4619      	mov	r1, r3
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f000 f852 	bl	8003ab4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003a10:	e03f      	b.n	8003a92 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003a12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d00e      	beq.n	8003a3c <HAL_UART_IRQHandler+0x560>
 8003a1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d008      	beq.n	8003a3c <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003a32:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f000 ffae 	bl	8004996 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003a3a:	e02d      	b.n	8003a98 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003a3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d00e      	beq.n	8003a66 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003a48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d008      	beq.n	8003a66 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d01c      	beq.n	8003a96 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	4798      	blx	r3
    }
    return;
 8003a64:	e017      	b.n	8003a96 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003a66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d012      	beq.n	8003a98 <HAL_UART_IRQHandler+0x5bc>
 8003a72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d00c      	beq.n	8003a98 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f000 fdff 	bl	8004682 <UART_EndTransmit_IT>
    return;
 8003a84:	e008      	b.n	8003a98 <HAL_UART_IRQHandler+0x5bc>
      return;
 8003a86:	bf00      	nop
 8003a88:	e006      	b.n	8003a98 <HAL_UART_IRQHandler+0x5bc>
    return;
 8003a8a:	bf00      	nop
 8003a8c:	e004      	b.n	8003a98 <HAL_UART_IRQHandler+0x5bc>
      return;
 8003a8e:	bf00      	nop
 8003a90:	e002      	b.n	8003a98 <HAL_UART_IRQHandler+0x5bc>
      return;
 8003a92:	bf00      	nop
 8003a94:	e000      	b.n	8003a98 <HAL_UART_IRQHandler+0x5bc>
    return;
 8003a96:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003a98:	37e8      	adds	r7, #232	; 0xe8
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop

08003aa0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b083      	sub	sp, #12
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003aa8:	bf00      	nop
 8003aaa:	370c      	adds	r7, #12
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr

08003ab4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	460b      	mov	r3, r1
 8003abe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003ac0:	bf00      	nop
 8003ac2:	370c      	adds	r7, #12
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr

08003acc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003acc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ad0:	b08a      	sub	sp, #40	; 0x28
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	689a      	ldr	r2, [r3, #8]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	691b      	ldr	r3, [r3, #16]
 8003ae4:	431a      	orrs	r2, r3
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	695b      	ldr	r3, [r3, #20]
 8003aea:	431a      	orrs	r2, r3
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	69db      	ldr	r3, [r3, #28]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	4bb4      	ldr	r3, [pc, #720]	; (8003dcc <UART_SetConfig+0x300>)
 8003afc:	4013      	ands	r3, r2
 8003afe:	68fa      	ldr	r2, [r7, #12]
 8003b00:	6812      	ldr	r2, [r2, #0]
 8003b02:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b04:	430b      	orrs	r3, r1
 8003b06:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	68da      	ldr	r2, [r3, #12]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	430a      	orrs	r2, r1
 8003b1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	699b      	ldr	r3, [r3, #24]
 8003b22:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4aa9      	ldr	r2, [pc, #676]	; (8003dd0 <UART_SetConfig+0x304>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d004      	beq.n	8003b38 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6a1b      	ldr	r3, [r3, #32]
 8003b32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b34:	4313      	orrs	r3, r2
 8003b36:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b48:	430a      	orrs	r2, r1
 8003b4a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4aa0      	ldr	r2, [pc, #640]	; (8003dd4 <UART_SetConfig+0x308>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d126      	bne.n	8003ba4 <UART_SetConfig+0xd8>
 8003b56:	4ba0      	ldr	r3, [pc, #640]	; (8003dd8 <UART_SetConfig+0x30c>)
 8003b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b5c:	f003 0303 	and.w	r3, r3, #3
 8003b60:	2b03      	cmp	r3, #3
 8003b62:	d81b      	bhi.n	8003b9c <UART_SetConfig+0xd0>
 8003b64:	a201      	add	r2, pc, #4	; (adr r2, 8003b6c <UART_SetConfig+0xa0>)
 8003b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b6a:	bf00      	nop
 8003b6c:	08003b7d 	.word	0x08003b7d
 8003b70:	08003b8d 	.word	0x08003b8d
 8003b74:	08003b85 	.word	0x08003b85
 8003b78:	08003b95 	.word	0x08003b95
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b82:	e080      	b.n	8003c86 <UART_SetConfig+0x1ba>
 8003b84:	2302      	movs	r3, #2
 8003b86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b8a:	e07c      	b.n	8003c86 <UART_SetConfig+0x1ba>
 8003b8c:	2304      	movs	r3, #4
 8003b8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b92:	e078      	b.n	8003c86 <UART_SetConfig+0x1ba>
 8003b94:	2308      	movs	r3, #8
 8003b96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b9a:	e074      	b.n	8003c86 <UART_SetConfig+0x1ba>
 8003b9c:	2310      	movs	r3, #16
 8003b9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ba2:	e070      	b.n	8003c86 <UART_SetConfig+0x1ba>
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a8c      	ldr	r2, [pc, #560]	; (8003ddc <UART_SetConfig+0x310>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d138      	bne.n	8003c20 <UART_SetConfig+0x154>
 8003bae:	4b8a      	ldr	r3, [pc, #552]	; (8003dd8 <UART_SetConfig+0x30c>)
 8003bb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bb4:	f003 030c 	and.w	r3, r3, #12
 8003bb8:	2b0c      	cmp	r3, #12
 8003bba:	d82d      	bhi.n	8003c18 <UART_SetConfig+0x14c>
 8003bbc:	a201      	add	r2, pc, #4	; (adr r2, 8003bc4 <UART_SetConfig+0xf8>)
 8003bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bc2:	bf00      	nop
 8003bc4:	08003bf9 	.word	0x08003bf9
 8003bc8:	08003c19 	.word	0x08003c19
 8003bcc:	08003c19 	.word	0x08003c19
 8003bd0:	08003c19 	.word	0x08003c19
 8003bd4:	08003c09 	.word	0x08003c09
 8003bd8:	08003c19 	.word	0x08003c19
 8003bdc:	08003c19 	.word	0x08003c19
 8003be0:	08003c19 	.word	0x08003c19
 8003be4:	08003c01 	.word	0x08003c01
 8003be8:	08003c19 	.word	0x08003c19
 8003bec:	08003c19 	.word	0x08003c19
 8003bf0:	08003c19 	.word	0x08003c19
 8003bf4:	08003c11 	.word	0x08003c11
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bfe:	e042      	b.n	8003c86 <UART_SetConfig+0x1ba>
 8003c00:	2302      	movs	r3, #2
 8003c02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c06:	e03e      	b.n	8003c86 <UART_SetConfig+0x1ba>
 8003c08:	2304      	movs	r3, #4
 8003c0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c0e:	e03a      	b.n	8003c86 <UART_SetConfig+0x1ba>
 8003c10:	2308      	movs	r3, #8
 8003c12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c16:	e036      	b.n	8003c86 <UART_SetConfig+0x1ba>
 8003c18:	2310      	movs	r3, #16
 8003c1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c1e:	e032      	b.n	8003c86 <UART_SetConfig+0x1ba>
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a6a      	ldr	r2, [pc, #424]	; (8003dd0 <UART_SetConfig+0x304>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d12a      	bne.n	8003c80 <UART_SetConfig+0x1b4>
 8003c2a:	4b6b      	ldr	r3, [pc, #428]	; (8003dd8 <UART_SetConfig+0x30c>)
 8003c2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c30:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003c34:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c38:	d01a      	beq.n	8003c70 <UART_SetConfig+0x1a4>
 8003c3a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c3e:	d81b      	bhi.n	8003c78 <UART_SetConfig+0x1ac>
 8003c40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c44:	d00c      	beq.n	8003c60 <UART_SetConfig+0x194>
 8003c46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c4a:	d815      	bhi.n	8003c78 <UART_SetConfig+0x1ac>
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d003      	beq.n	8003c58 <UART_SetConfig+0x18c>
 8003c50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c54:	d008      	beq.n	8003c68 <UART_SetConfig+0x19c>
 8003c56:	e00f      	b.n	8003c78 <UART_SetConfig+0x1ac>
 8003c58:	2300      	movs	r3, #0
 8003c5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c5e:	e012      	b.n	8003c86 <UART_SetConfig+0x1ba>
 8003c60:	2302      	movs	r3, #2
 8003c62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c66:	e00e      	b.n	8003c86 <UART_SetConfig+0x1ba>
 8003c68:	2304      	movs	r3, #4
 8003c6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c6e:	e00a      	b.n	8003c86 <UART_SetConfig+0x1ba>
 8003c70:	2308      	movs	r3, #8
 8003c72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c76:	e006      	b.n	8003c86 <UART_SetConfig+0x1ba>
 8003c78:	2310      	movs	r3, #16
 8003c7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c7e:	e002      	b.n	8003c86 <UART_SetConfig+0x1ba>
 8003c80:	2310      	movs	r3, #16
 8003c82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a51      	ldr	r2, [pc, #324]	; (8003dd0 <UART_SetConfig+0x304>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d17a      	bne.n	8003d86 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003c90:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c94:	2b08      	cmp	r3, #8
 8003c96:	d824      	bhi.n	8003ce2 <UART_SetConfig+0x216>
 8003c98:	a201      	add	r2, pc, #4	; (adr r2, 8003ca0 <UART_SetConfig+0x1d4>)
 8003c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c9e:	bf00      	nop
 8003ca0:	08003cc5 	.word	0x08003cc5
 8003ca4:	08003ce3 	.word	0x08003ce3
 8003ca8:	08003ccd 	.word	0x08003ccd
 8003cac:	08003ce3 	.word	0x08003ce3
 8003cb0:	08003cd3 	.word	0x08003cd3
 8003cb4:	08003ce3 	.word	0x08003ce3
 8003cb8:	08003ce3 	.word	0x08003ce3
 8003cbc:	08003ce3 	.word	0x08003ce3
 8003cc0:	08003cdb 	.word	0x08003cdb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cc4:	f7fe fca8 	bl	8002618 <HAL_RCC_GetPCLK1Freq>
 8003cc8:	61f8      	str	r0, [r7, #28]
        break;
 8003cca:	e010      	b.n	8003cee <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ccc:	4b44      	ldr	r3, [pc, #272]	; (8003de0 <UART_SetConfig+0x314>)
 8003cce:	61fb      	str	r3, [r7, #28]
        break;
 8003cd0:	e00d      	b.n	8003cee <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cd2:	f7fe fc09 	bl	80024e8 <HAL_RCC_GetSysClockFreq>
 8003cd6:	61f8      	str	r0, [r7, #28]
        break;
 8003cd8:	e009      	b.n	8003cee <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cde:	61fb      	str	r3, [r7, #28]
        break;
 8003ce0:	e005      	b.n	8003cee <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003cec:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	f000 8107 	beq.w	8003f04 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	685a      	ldr	r2, [r3, #4]
 8003cfa:	4613      	mov	r3, r2
 8003cfc:	005b      	lsls	r3, r3, #1
 8003cfe:	4413      	add	r3, r2
 8003d00:	69fa      	ldr	r2, [r7, #28]
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d305      	bcc.n	8003d12 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003d0c:	69fa      	ldr	r2, [r7, #28]
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d903      	bls.n	8003d1a <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003d18:	e0f4      	b.n	8003f04 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	461c      	mov	r4, r3
 8003d20:	4615      	mov	r5, r2
 8003d22:	f04f 0200 	mov.w	r2, #0
 8003d26:	f04f 0300 	mov.w	r3, #0
 8003d2a:	022b      	lsls	r3, r5, #8
 8003d2c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003d30:	0222      	lsls	r2, r4, #8
 8003d32:	68f9      	ldr	r1, [r7, #12]
 8003d34:	6849      	ldr	r1, [r1, #4]
 8003d36:	0849      	lsrs	r1, r1, #1
 8003d38:	2000      	movs	r0, #0
 8003d3a:	4688      	mov	r8, r1
 8003d3c:	4681      	mov	r9, r0
 8003d3e:	eb12 0a08 	adds.w	sl, r2, r8
 8003d42:	eb43 0b09 	adc.w	fp, r3, r9
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	603b      	str	r3, [r7, #0]
 8003d4e:	607a      	str	r2, [r7, #4]
 8003d50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d54:	4650      	mov	r0, sl
 8003d56:	4659      	mov	r1, fp
 8003d58:	f7fc fa92 	bl	8000280 <__aeabi_uldivmod>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	460b      	mov	r3, r1
 8003d60:	4613      	mov	r3, r2
 8003d62:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003d64:	69bb      	ldr	r3, [r7, #24]
 8003d66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d6a:	d308      	bcc.n	8003d7e <UART_SetConfig+0x2b2>
 8003d6c:	69bb      	ldr	r3, [r7, #24]
 8003d6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d72:	d204      	bcs.n	8003d7e <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	69ba      	ldr	r2, [r7, #24]
 8003d7a:	60da      	str	r2, [r3, #12]
 8003d7c:	e0c2      	b.n	8003f04 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003d84:	e0be      	b.n	8003f04 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	69db      	ldr	r3, [r3, #28]
 8003d8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d8e:	d16a      	bne.n	8003e66 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8003d90:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d94:	2b08      	cmp	r3, #8
 8003d96:	d834      	bhi.n	8003e02 <UART_SetConfig+0x336>
 8003d98:	a201      	add	r2, pc, #4	; (adr r2, 8003da0 <UART_SetConfig+0x2d4>)
 8003d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d9e:	bf00      	nop
 8003da0:	08003dc5 	.word	0x08003dc5
 8003da4:	08003de5 	.word	0x08003de5
 8003da8:	08003ded 	.word	0x08003ded
 8003dac:	08003e03 	.word	0x08003e03
 8003db0:	08003df3 	.word	0x08003df3
 8003db4:	08003e03 	.word	0x08003e03
 8003db8:	08003e03 	.word	0x08003e03
 8003dbc:	08003e03 	.word	0x08003e03
 8003dc0:	08003dfb 	.word	0x08003dfb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003dc4:	f7fe fc28 	bl	8002618 <HAL_RCC_GetPCLK1Freq>
 8003dc8:	61f8      	str	r0, [r7, #28]
        break;
 8003dca:	e020      	b.n	8003e0e <UART_SetConfig+0x342>
 8003dcc:	efff69f3 	.word	0xefff69f3
 8003dd0:	40008000 	.word	0x40008000
 8003dd4:	40013800 	.word	0x40013800
 8003dd8:	40021000 	.word	0x40021000
 8003ddc:	40004400 	.word	0x40004400
 8003de0:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003de4:	f7fe fc2e 	bl	8002644 <HAL_RCC_GetPCLK2Freq>
 8003de8:	61f8      	str	r0, [r7, #28]
        break;
 8003dea:	e010      	b.n	8003e0e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003dec:	4b4c      	ldr	r3, [pc, #304]	; (8003f20 <UART_SetConfig+0x454>)
 8003dee:	61fb      	str	r3, [r7, #28]
        break;
 8003df0:	e00d      	b.n	8003e0e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003df2:	f7fe fb79 	bl	80024e8 <HAL_RCC_GetSysClockFreq>
 8003df6:	61f8      	str	r0, [r7, #28]
        break;
 8003df8:	e009      	b.n	8003e0e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003dfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003dfe:	61fb      	str	r3, [r7, #28]
        break;
 8003e00:	e005      	b.n	8003e0e <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8003e02:	2300      	movs	r3, #0
 8003e04:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003e0c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d077      	beq.n	8003f04 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	005a      	lsls	r2, r3, #1
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	085b      	lsrs	r3, r3, #1
 8003e1e:	441a      	add	r2, r3
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e28:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e2a:	69bb      	ldr	r3, [r7, #24]
 8003e2c:	2b0f      	cmp	r3, #15
 8003e2e:	d916      	bls.n	8003e5e <UART_SetConfig+0x392>
 8003e30:	69bb      	ldr	r3, [r7, #24]
 8003e32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e36:	d212      	bcs.n	8003e5e <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e38:	69bb      	ldr	r3, [r7, #24]
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	f023 030f 	bic.w	r3, r3, #15
 8003e40:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e42:	69bb      	ldr	r3, [r7, #24]
 8003e44:	085b      	lsrs	r3, r3, #1
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	f003 0307 	and.w	r3, r3, #7
 8003e4c:	b29a      	uxth	r2, r3
 8003e4e:	8afb      	ldrh	r3, [r7, #22]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	8afa      	ldrh	r2, [r7, #22]
 8003e5a:	60da      	str	r2, [r3, #12]
 8003e5c:	e052      	b.n	8003f04 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003e64:	e04e      	b.n	8003f04 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e66:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e6a:	2b08      	cmp	r3, #8
 8003e6c:	d827      	bhi.n	8003ebe <UART_SetConfig+0x3f2>
 8003e6e:	a201      	add	r2, pc, #4	; (adr r2, 8003e74 <UART_SetConfig+0x3a8>)
 8003e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e74:	08003e99 	.word	0x08003e99
 8003e78:	08003ea1 	.word	0x08003ea1
 8003e7c:	08003ea9 	.word	0x08003ea9
 8003e80:	08003ebf 	.word	0x08003ebf
 8003e84:	08003eaf 	.word	0x08003eaf
 8003e88:	08003ebf 	.word	0x08003ebf
 8003e8c:	08003ebf 	.word	0x08003ebf
 8003e90:	08003ebf 	.word	0x08003ebf
 8003e94:	08003eb7 	.word	0x08003eb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e98:	f7fe fbbe 	bl	8002618 <HAL_RCC_GetPCLK1Freq>
 8003e9c:	61f8      	str	r0, [r7, #28]
        break;
 8003e9e:	e014      	b.n	8003eca <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ea0:	f7fe fbd0 	bl	8002644 <HAL_RCC_GetPCLK2Freq>
 8003ea4:	61f8      	str	r0, [r7, #28]
        break;
 8003ea6:	e010      	b.n	8003eca <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ea8:	4b1d      	ldr	r3, [pc, #116]	; (8003f20 <UART_SetConfig+0x454>)
 8003eaa:	61fb      	str	r3, [r7, #28]
        break;
 8003eac:	e00d      	b.n	8003eca <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003eae:	f7fe fb1b 	bl	80024e8 <HAL_RCC_GetSysClockFreq>
 8003eb2:	61f8      	str	r0, [r7, #28]
        break;
 8003eb4:	e009      	b.n	8003eca <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003eb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003eba:	61fb      	str	r3, [r7, #28]
        break;
 8003ebc:	e005      	b.n	8003eca <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003ec8:	bf00      	nop
    }

    if (pclk != 0U)
 8003eca:	69fb      	ldr	r3, [r7, #28]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d019      	beq.n	8003f04 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	085a      	lsrs	r2, r3, #1
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	441a      	add	r2, r3
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ee2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ee4:	69bb      	ldr	r3, [r7, #24]
 8003ee6:	2b0f      	cmp	r3, #15
 8003ee8:	d909      	bls.n	8003efe <UART_SetConfig+0x432>
 8003eea:	69bb      	ldr	r3, [r7, #24]
 8003eec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ef0:	d205      	bcs.n	8003efe <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003ef2:	69bb      	ldr	r3, [r7, #24]
 8003ef4:	b29a      	uxth	r2, r3
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	60da      	str	r2, [r3, #12]
 8003efc:	e002      	b.n	8003f04 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2200      	movs	r2, #0
 8003f08:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003f10:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3728      	adds	r7, #40	; 0x28
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f1e:	bf00      	nop
 8003f20:	00f42400 	.word	0x00f42400

08003f24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b083      	sub	sp, #12
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f30:	f003 0301 	and.w	r3, r3, #1
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d00a      	beq.n	8003f4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	430a      	orrs	r2, r1
 8003f4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f52:	f003 0302 	and.w	r3, r3, #2
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d00a      	beq.n	8003f70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	430a      	orrs	r2, r1
 8003f6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f74:	f003 0304 	and.w	r3, r3, #4
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d00a      	beq.n	8003f92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	430a      	orrs	r2, r1
 8003f90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f96:	f003 0308 	and.w	r3, r3, #8
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d00a      	beq.n	8003fb4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	430a      	orrs	r2, r1
 8003fb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb8:	f003 0310 	and.w	r3, r3, #16
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d00a      	beq.n	8003fd6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	430a      	orrs	r2, r1
 8003fd4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fda:	f003 0320 	and.w	r3, r3, #32
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d00a      	beq.n	8003ff8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	430a      	orrs	r2, r1
 8003ff6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004000:	2b00      	cmp	r3, #0
 8004002:	d01a      	beq.n	800403a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	430a      	orrs	r2, r1
 8004018:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004022:	d10a      	bne.n	800403a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	430a      	orrs	r2, r1
 8004038:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800403e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004042:	2b00      	cmp	r3, #0
 8004044:	d00a      	beq.n	800405c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	430a      	orrs	r2, r1
 800405a:	605a      	str	r2, [r3, #4]
  }
}
 800405c:	bf00      	nop
 800405e:	370c      	adds	r7, #12
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr

08004068 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b086      	sub	sp, #24
 800406c:	af02      	add	r7, sp, #8
 800406e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2200      	movs	r2, #0
 8004074:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004078:	f7fd f954 	bl	8001324 <HAL_GetTick>
 800407c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 0308 	and.w	r3, r3, #8
 8004088:	2b08      	cmp	r3, #8
 800408a:	d10e      	bne.n	80040aa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800408c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004090:	9300      	str	r3, [sp, #0]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2200      	movs	r2, #0
 8004096:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f000 f82d 	bl	80040fa <UART_WaitOnFlagUntilTimeout>
 80040a0:	4603      	mov	r3, r0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d001      	beq.n	80040aa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040a6:	2303      	movs	r3, #3
 80040a8:	e023      	b.n	80040f2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 0304 	and.w	r3, r3, #4
 80040b4:	2b04      	cmp	r3, #4
 80040b6:	d10e      	bne.n	80040d6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80040bc:	9300      	str	r3, [sp, #0]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2200      	movs	r2, #0
 80040c2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f000 f817 	bl	80040fa <UART_WaitOnFlagUntilTimeout>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d001      	beq.n	80040d6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040d2:	2303      	movs	r3, #3
 80040d4:	e00d      	b.n	80040f2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2220      	movs	r2, #32
 80040da:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2220      	movs	r2, #32
 80040e0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80040f0:	2300      	movs	r3, #0
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3710      	adds	r7, #16
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}

080040fa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80040fa:	b580      	push	{r7, lr}
 80040fc:	b09c      	sub	sp, #112	; 0x70
 80040fe:	af00      	add	r7, sp, #0
 8004100:	60f8      	str	r0, [r7, #12]
 8004102:	60b9      	str	r1, [r7, #8]
 8004104:	603b      	str	r3, [r7, #0]
 8004106:	4613      	mov	r3, r2
 8004108:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800410a:	e0a5      	b.n	8004258 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800410c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800410e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004112:	f000 80a1 	beq.w	8004258 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004116:	f7fd f905 	bl	8001324 <HAL_GetTick>
 800411a:	4602      	mov	r2, r0
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	1ad3      	subs	r3, r2, r3
 8004120:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004122:	429a      	cmp	r2, r3
 8004124:	d302      	bcc.n	800412c <UART_WaitOnFlagUntilTimeout+0x32>
 8004126:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004128:	2b00      	cmp	r3, #0
 800412a:	d13e      	bne.n	80041aa <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004132:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004134:	e853 3f00 	ldrex	r3, [r3]
 8004138:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800413a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800413c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004140:	667b      	str	r3, [r7, #100]	; 0x64
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	461a      	mov	r2, r3
 8004148:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800414a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800414c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800414e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004150:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004152:	e841 2300 	strex	r3, r2, [r1]
 8004156:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004158:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800415a:	2b00      	cmp	r3, #0
 800415c:	d1e6      	bne.n	800412c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	3308      	adds	r3, #8
 8004164:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004166:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004168:	e853 3f00 	ldrex	r3, [r3]
 800416c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800416e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004170:	f023 0301 	bic.w	r3, r3, #1
 8004174:	663b      	str	r3, [r7, #96]	; 0x60
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	3308      	adds	r3, #8
 800417c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800417e:	64ba      	str	r2, [r7, #72]	; 0x48
 8004180:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004182:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004184:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004186:	e841 2300 	strex	r3, r2, [r1]
 800418a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800418c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800418e:	2b00      	cmp	r3, #0
 8004190:	d1e5      	bne.n	800415e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2220      	movs	r2, #32
 8004196:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2220      	movs	r2, #32
 800419c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2200      	movs	r2, #0
 80041a2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80041a6:	2303      	movs	r3, #3
 80041a8:	e067      	b.n	800427a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 0304 	and.w	r3, r3, #4
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d04f      	beq.n	8004258 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	69db      	ldr	r3, [r3, #28]
 80041be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041c6:	d147      	bne.n	8004258 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80041d0:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041da:	e853 3f00 	ldrex	r3, [r3]
 80041de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80041e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80041e6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	461a      	mov	r2, r3
 80041ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041f0:	637b      	str	r3, [r7, #52]	; 0x34
 80041f2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80041f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80041f8:	e841 2300 	strex	r3, r2, [r1]
 80041fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80041fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004200:	2b00      	cmp	r3, #0
 8004202:	d1e6      	bne.n	80041d2 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	3308      	adds	r3, #8
 800420a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	e853 3f00 	ldrex	r3, [r3]
 8004212:	613b      	str	r3, [r7, #16]
   return(result);
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	f023 0301 	bic.w	r3, r3, #1
 800421a:	66bb      	str	r3, [r7, #104]	; 0x68
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	3308      	adds	r3, #8
 8004222:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004224:	623a      	str	r2, [r7, #32]
 8004226:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004228:	69f9      	ldr	r1, [r7, #28]
 800422a:	6a3a      	ldr	r2, [r7, #32]
 800422c:	e841 2300 	strex	r3, r2, [r1]
 8004230:	61bb      	str	r3, [r7, #24]
   return(result);
 8004232:	69bb      	ldr	r3, [r7, #24]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d1e5      	bne.n	8004204 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2220      	movs	r2, #32
 800423c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2220      	movs	r2, #32
 8004242:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2220      	movs	r2, #32
 8004248:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2200      	movs	r2, #0
 8004250:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004254:	2303      	movs	r3, #3
 8004256:	e010      	b.n	800427a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	69da      	ldr	r2, [r3, #28]
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	4013      	ands	r3, r2
 8004262:	68ba      	ldr	r2, [r7, #8]
 8004264:	429a      	cmp	r2, r3
 8004266:	bf0c      	ite	eq
 8004268:	2301      	moveq	r3, #1
 800426a:	2300      	movne	r3, #0
 800426c:	b2db      	uxtb	r3, r3
 800426e:	461a      	mov	r2, r3
 8004270:	79fb      	ldrb	r3, [r7, #7]
 8004272:	429a      	cmp	r2, r3
 8004274:	f43f af4a 	beq.w	800410c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004278:	2300      	movs	r3, #0
}
 800427a:	4618      	mov	r0, r3
 800427c:	3770      	adds	r7, #112	; 0x70
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
	...

08004284 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004284:	b480      	push	{r7}
 8004286:	b097      	sub	sp, #92	; 0x5c
 8004288:	af00      	add	r7, sp, #0
 800428a:	60f8      	str	r0, [r7, #12]
 800428c:	60b9      	str	r1, [r7, #8]
 800428e:	4613      	mov	r3, r2
 8004290:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	68ba      	ldr	r2, [r7, #8]
 8004296:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	88fa      	ldrh	r2, [r7, #6]
 800429c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	88fa      	ldrh	r2, [r7, #6]
 80042a4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2200      	movs	r2, #0
 80042ac:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042b6:	d10e      	bne.n	80042d6 <UART_Start_Receive_IT+0x52>
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	691b      	ldr	r3, [r3, #16]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d105      	bne.n	80042cc <UART_Start_Receive_IT+0x48>
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80042c6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80042ca:	e02d      	b.n	8004328 <UART_Start_Receive_IT+0xa4>
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	22ff      	movs	r2, #255	; 0xff
 80042d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80042d4:	e028      	b.n	8004328 <UART_Start_Receive_IT+0xa4>
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d10d      	bne.n	80042fa <UART_Start_Receive_IT+0x76>
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d104      	bne.n	80042f0 <UART_Start_Receive_IT+0x6c>
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	22ff      	movs	r2, #255	; 0xff
 80042ea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80042ee:	e01b      	b.n	8004328 <UART_Start_Receive_IT+0xa4>
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	227f      	movs	r2, #127	; 0x7f
 80042f4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80042f8:	e016      	b.n	8004328 <UART_Start_Receive_IT+0xa4>
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004302:	d10d      	bne.n	8004320 <UART_Start_Receive_IT+0x9c>
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	691b      	ldr	r3, [r3, #16]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d104      	bne.n	8004316 <UART_Start_Receive_IT+0x92>
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	227f      	movs	r2, #127	; 0x7f
 8004310:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004314:	e008      	b.n	8004328 <UART_Start_Receive_IT+0xa4>
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	223f      	movs	r2, #63	; 0x3f
 800431a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800431e:	e003      	b.n	8004328 <UART_Start_Receive_IT+0xa4>
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2200      	movs	r2, #0
 8004324:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2200      	movs	r2, #0
 800432c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2222      	movs	r2, #34	; 0x22
 8004334:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	3308      	adds	r3, #8
 800433c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800433e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004340:	e853 3f00 	ldrex	r3, [r3]
 8004344:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004348:	f043 0301 	orr.w	r3, r3, #1
 800434c:	657b      	str	r3, [r7, #84]	; 0x54
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	3308      	adds	r3, #8
 8004354:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004356:	64ba      	str	r2, [r7, #72]	; 0x48
 8004358:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800435a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800435c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800435e:	e841 2300 	strex	r3, r2, [r1]
 8004362:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004364:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004366:	2b00      	cmp	r3, #0
 8004368:	d1e5      	bne.n	8004336 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004372:	d107      	bne.n	8004384 <UART_Start_Receive_IT+0x100>
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	691b      	ldr	r3, [r3, #16]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d103      	bne.n	8004384 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	4a24      	ldr	r2, [pc, #144]	; (8004410 <UART_Start_Receive_IT+0x18c>)
 8004380:	665a      	str	r2, [r3, #100]	; 0x64
 8004382:	e002      	b.n	800438a <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	4a23      	ldr	r2, [pc, #140]	; (8004414 <UART_Start_Receive_IT+0x190>)
 8004388:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2200      	movs	r2, #0
 800438e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	691b      	ldr	r3, [r3, #16]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d019      	beq.n	80043ce <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043a2:	e853 3f00 	ldrex	r3, [r3]
 80043a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80043a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043aa:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80043ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	461a      	mov	r2, r3
 80043b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043b8:	637b      	str	r3, [r7, #52]	; 0x34
 80043ba:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80043be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80043c0:	e841 2300 	strex	r3, r2, [r1]
 80043c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80043c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d1e6      	bne.n	800439a <UART_Start_Receive_IT+0x116>
 80043cc:	e018      	b.n	8004400 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	e853 3f00 	ldrex	r3, [r3]
 80043da:	613b      	str	r3, [r7, #16]
   return(result);
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	f043 0320 	orr.w	r3, r3, #32
 80043e2:	653b      	str	r3, [r7, #80]	; 0x50
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	461a      	mov	r2, r3
 80043ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043ec:	623b      	str	r3, [r7, #32]
 80043ee:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043f0:	69f9      	ldr	r1, [r7, #28]
 80043f2:	6a3a      	ldr	r2, [r7, #32]
 80043f4:	e841 2300 	strex	r3, r2, [r1]
 80043f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80043fa:	69bb      	ldr	r3, [r7, #24]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d1e6      	bne.n	80043ce <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8004400:	2300      	movs	r3, #0
}
 8004402:	4618      	mov	r0, r3
 8004404:	375c      	adds	r7, #92	; 0x5c
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr
 800440e:	bf00      	nop
 8004410:	08004837 	.word	0x08004837
 8004414:	080046d7 	.word	0x080046d7

08004418 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004418:	b480      	push	{r7}
 800441a:	b095      	sub	sp, #84	; 0x54
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004428:	e853 3f00 	ldrex	r3, [r3]
 800442c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800442e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004430:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004434:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	461a      	mov	r2, r3
 800443c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800443e:	643b      	str	r3, [r7, #64]	; 0x40
 8004440:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004442:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004444:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004446:	e841 2300 	strex	r3, r2, [r1]
 800444a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800444c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800444e:	2b00      	cmp	r3, #0
 8004450:	d1e6      	bne.n	8004420 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	3308      	adds	r3, #8
 8004458:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800445a:	6a3b      	ldr	r3, [r7, #32]
 800445c:	e853 3f00 	ldrex	r3, [r3]
 8004460:	61fb      	str	r3, [r7, #28]
   return(result);
 8004462:	69fb      	ldr	r3, [r7, #28]
 8004464:	f023 0301 	bic.w	r3, r3, #1
 8004468:	64bb      	str	r3, [r7, #72]	; 0x48
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	3308      	adds	r3, #8
 8004470:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004472:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004474:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004476:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004478:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800447a:	e841 2300 	strex	r3, r2, [r1]
 800447e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004482:	2b00      	cmp	r3, #0
 8004484:	d1e5      	bne.n	8004452 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800448a:	2b01      	cmp	r3, #1
 800448c:	d118      	bne.n	80044c0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	e853 3f00 	ldrex	r3, [r3]
 800449a:	60bb      	str	r3, [r7, #8]
   return(result);
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	f023 0310 	bic.w	r3, r3, #16
 80044a2:	647b      	str	r3, [r7, #68]	; 0x44
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	461a      	mov	r2, r3
 80044aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044ac:	61bb      	str	r3, [r7, #24]
 80044ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b0:	6979      	ldr	r1, [r7, #20]
 80044b2:	69ba      	ldr	r2, [r7, #24]
 80044b4:	e841 2300 	strex	r3, r2, [r1]
 80044b8:	613b      	str	r3, [r7, #16]
   return(result);
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d1e6      	bne.n	800448e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2220      	movs	r2, #32
 80044c4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	665a      	str	r2, [r3, #100]	; 0x64
}
 80044d2:	bf00      	nop
 80044d4:	3754      	adds	r7, #84	; 0x54
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr

080044de <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80044de:	b580      	push	{r7, lr}
 80044e0:	b084      	sub	sp, #16
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2200      	movs	r2, #0
 80044f0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2200      	movs	r2, #0
 80044f8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80044fc:	68f8      	ldr	r0, [r7, #12]
 80044fe:	f7ff facf 	bl	8003aa0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004502:	bf00      	nop
 8004504:	3710      	adds	r7, #16
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}

0800450a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800450a:	b480      	push	{r7}
 800450c:	b08f      	sub	sp, #60	; 0x3c
 800450e:	af00      	add	r7, sp, #0
 8004510:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004516:	2b21      	cmp	r3, #33	; 0x21
 8004518:	d14d      	bne.n	80045b6 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004520:	b29b      	uxth	r3, r3
 8004522:	2b00      	cmp	r3, #0
 8004524:	d132      	bne.n	800458c <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800452c:	6a3b      	ldr	r3, [r7, #32]
 800452e:	e853 3f00 	ldrex	r3, [r3]
 8004532:	61fb      	str	r3, [r7, #28]
   return(result);
 8004534:	69fb      	ldr	r3, [r7, #28]
 8004536:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800453a:	637b      	str	r3, [r7, #52]	; 0x34
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	461a      	mov	r2, r3
 8004542:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004544:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004546:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004548:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800454a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800454c:	e841 2300 	strex	r3, r2, [r1]
 8004550:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004554:	2b00      	cmp	r3, #0
 8004556:	d1e6      	bne.n	8004526 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	e853 3f00 	ldrex	r3, [r3]
 8004564:	60bb      	str	r3, [r7, #8]
   return(result);
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800456c:	633b      	str	r3, [r7, #48]	; 0x30
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	461a      	mov	r2, r3
 8004574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004576:	61bb      	str	r3, [r7, #24]
 8004578:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800457a:	6979      	ldr	r1, [r7, #20]
 800457c:	69ba      	ldr	r2, [r7, #24]
 800457e:	e841 2300 	strex	r3, r2, [r1]
 8004582:	613b      	str	r3, [r7, #16]
   return(result);
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d1e6      	bne.n	8004558 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800458a:	e014      	b.n	80045b6 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004590:	781a      	ldrb	r2, [r3, #0]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	b292      	uxth	r2, r2
 8004598:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800459e:	1c5a      	adds	r2, r3, #1
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80045aa:	b29b      	uxth	r3, r3
 80045ac:	3b01      	subs	r3, #1
 80045ae:	b29a      	uxth	r2, r3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80045b6:	bf00      	nop
 80045b8:	373c      	adds	r7, #60	; 0x3c
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr

080045c2 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80045c2:	b480      	push	{r7}
 80045c4:	b091      	sub	sp, #68	; 0x44
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045ce:	2b21      	cmp	r3, #33	; 0x21
 80045d0:	d151      	bne.n	8004676 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80045d8:	b29b      	uxth	r3, r3
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d132      	bne.n	8004644 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e6:	e853 3f00 	ldrex	r3, [r3]
 80045ea:	623b      	str	r3, [r7, #32]
   return(result);
 80045ec:	6a3b      	ldr	r3, [r7, #32]
 80045ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	461a      	mov	r2, r3
 80045fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045fc:	633b      	str	r3, [r7, #48]	; 0x30
 80045fe:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004600:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004602:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004604:	e841 2300 	strex	r3, r2, [r1]
 8004608:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800460a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800460c:	2b00      	cmp	r3, #0
 800460e:	d1e6      	bne.n	80045de <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	e853 3f00 	ldrex	r3, [r3]
 800461c:	60fb      	str	r3, [r7, #12]
   return(result);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004624:	637b      	str	r3, [r7, #52]	; 0x34
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	461a      	mov	r2, r3
 800462c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800462e:	61fb      	str	r3, [r7, #28]
 8004630:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004632:	69b9      	ldr	r1, [r7, #24]
 8004634:	69fa      	ldr	r2, [r7, #28]
 8004636:	e841 2300 	strex	r3, r2, [r1]
 800463a:	617b      	str	r3, [r7, #20]
   return(result);
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d1e6      	bne.n	8004610 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004642:	e018      	b.n	8004676 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004648:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800464a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800464c:	881a      	ldrh	r2, [r3, #0]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004656:	b292      	uxth	r2, r2
 8004658:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800465e:	1c9a      	adds	r2, r3, #2
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800466a:	b29b      	uxth	r3, r3
 800466c:	3b01      	subs	r3, #1
 800466e:	b29a      	uxth	r2, r3
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8004676:	bf00      	nop
 8004678:	3744      	adds	r7, #68	; 0x44
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr

08004682 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004682:	b580      	push	{r7, lr}
 8004684:	b088      	sub	sp, #32
 8004686:	af00      	add	r7, sp, #0
 8004688:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	e853 3f00 	ldrex	r3, [r3]
 8004696:	60bb      	str	r3, [r7, #8]
   return(result);
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800469e:	61fb      	str	r3, [r7, #28]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	461a      	mov	r2, r3
 80046a6:	69fb      	ldr	r3, [r7, #28]
 80046a8:	61bb      	str	r3, [r7, #24]
 80046aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ac:	6979      	ldr	r1, [r7, #20]
 80046ae:	69ba      	ldr	r2, [r7, #24]
 80046b0:	e841 2300 	strex	r3, r2, [r1]
 80046b4:	613b      	str	r3, [r7, #16]
   return(result);
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d1e6      	bne.n	800468a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2220      	movs	r2, #32
 80046c0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f7fc fbc9 	bl	8000e60 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80046ce:	bf00      	nop
 80046d0:	3720      	adds	r7, #32
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}

080046d6 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80046d6:	b580      	push	{r7, lr}
 80046d8:	b096      	sub	sp, #88	; 0x58
 80046da:	af00      	add	r7, sp, #0
 80046dc:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80046e4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046ec:	2b22      	cmp	r3, #34	; 0x22
 80046ee:	f040 8094 	bne.w	800481a <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80046f8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80046fc:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8004700:	b2d9      	uxtb	r1, r3
 8004702:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004706:	b2da      	uxtb	r2, r3
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800470c:	400a      	ands	r2, r1
 800470e:	b2d2      	uxtb	r2, r2
 8004710:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004716:	1c5a      	adds	r2, r3, #1
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004722:	b29b      	uxth	r3, r3
 8004724:	3b01      	subs	r3, #1
 8004726:	b29a      	uxth	r2, r3
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004734:	b29b      	uxth	r3, r3
 8004736:	2b00      	cmp	r3, #0
 8004738:	d179      	bne.n	800482e <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004742:	e853 3f00 	ldrex	r3, [r3]
 8004746:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800474a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800474e:	653b      	str	r3, [r7, #80]	; 0x50
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	461a      	mov	r2, r3
 8004756:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004758:	647b      	str	r3, [r7, #68]	; 0x44
 800475a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800475c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800475e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004760:	e841 2300 	strex	r3, r2, [r1]
 8004764:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004766:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004768:	2b00      	cmp	r3, #0
 800476a:	d1e6      	bne.n	800473a <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	3308      	adds	r3, #8
 8004772:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004776:	e853 3f00 	ldrex	r3, [r3]
 800477a:	623b      	str	r3, [r7, #32]
   return(result);
 800477c:	6a3b      	ldr	r3, [r7, #32]
 800477e:	f023 0301 	bic.w	r3, r3, #1
 8004782:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	3308      	adds	r3, #8
 800478a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800478c:	633a      	str	r2, [r7, #48]	; 0x30
 800478e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004790:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004792:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004794:	e841 2300 	strex	r3, r2, [r1]
 8004798:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800479a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800479c:	2b00      	cmp	r3, #0
 800479e:	d1e5      	bne.n	800476c <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2220      	movs	r2, #32
 80047a4:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2200      	movs	r2, #0
 80047aa:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d12e      	bne.n	8004812 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	e853 3f00 	ldrex	r3, [r3]
 80047c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f023 0310 	bic.w	r3, r3, #16
 80047ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	461a      	mov	r2, r3
 80047d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047d8:	61fb      	str	r3, [r7, #28]
 80047da:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047dc:	69b9      	ldr	r1, [r7, #24]
 80047de:	69fa      	ldr	r2, [r7, #28]
 80047e0:	e841 2300 	strex	r3, r2, [r1]
 80047e4:	617b      	str	r3, [r7, #20]
   return(result);
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d1e6      	bne.n	80047ba <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	69db      	ldr	r3, [r3, #28]
 80047f2:	f003 0310 	and.w	r3, r3, #16
 80047f6:	2b10      	cmp	r3, #16
 80047f8:	d103      	bne.n	8004802 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	2210      	movs	r2, #16
 8004800:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004808:	4619      	mov	r1, r3
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f7ff f952 	bl	8003ab4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004810:	e00d      	b.n	800482e <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f7fc faec 	bl	8000df0 <HAL_UART_RxCpltCallback>
}
 8004818:	e009      	b.n	800482e <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	8b1b      	ldrh	r3, [r3, #24]
 8004820:	b29a      	uxth	r2, r3
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f042 0208 	orr.w	r2, r2, #8
 800482a:	b292      	uxth	r2, r2
 800482c:	831a      	strh	r2, [r3, #24]
}
 800482e:	bf00      	nop
 8004830:	3758      	adds	r7, #88	; 0x58
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}

08004836 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004836:	b580      	push	{r7, lr}
 8004838:	b096      	sub	sp, #88	; 0x58
 800483a:	af00      	add	r7, sp, #0
 800483c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004844:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800484c:	2b22      	cmp	r3, #34	; 0x22
 800484e:	f040 8094 	bne.w	800497a <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004858:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004860:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8004862:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8004866:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800486a:	4013      	ands	r3, r2
 800486c:	b29a      	uxth	r2, r3
 800486e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004870:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004876:	1c9a      	adds	r2, r3, #2
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004882:	b29b      	uxth	r3, r3
 8004884:	3b01      	subs	r3, #1
 8004886:	b29a      	uxth	r2, r3
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004894:	b29b      	uxth	r3, r3
 8004896:	2b00      	cmp	r3, #0
 8004898:	d179      	bne.n	800498e <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048a2:	e853 3f00 	ldrex	r3, [r3]
 80048a6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80048a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80048ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	461a      	mov	r2, r3
 80048b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048b8:	643b      	str	r3, [r7, #64]	; 0x40
 80048ba:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048bc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80048be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80048c0:	e841 2300 	strex	r3, r2, [r1]
 80048c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80048c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d1e6      	bne.n	800489a <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	3308      	adds	r3, #8
 80048d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d4:	6a3b      	ldr	r3, [r7, #32]
 80048d6:	e853 3f00 	ldrex	r3, [r3]
 80048da:	61fb      	str	r3, [r7, #28]
   return(result);
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	f023 0301 	bic.w	r3, r3, #1
 80048e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	3308      	adds	r3, #8
 80048ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80048ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 80048ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80048f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048f4:	e841 2300 	strex	r3, r2, [r1]
 80048f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80048fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d1e5      	bne.n	80048cc <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2220      	movs	r2, #32
 8004904:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004910:	2b01      	cmp	r3, #1
 8004912:	d12e      	bne.n	8004972 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	e853 3f00 	ldrex	r3, [r3]
 8004926:	60bb      	str	r3, [r7, #8]
   return(result);
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	f023 0310 	bic.w	r3, r3, #16
 800492e:	647b      	str	r3, [r7, #68]	; 0x44
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	461a      	mov	r2, r3
 8004936:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004938:	61bb      	str	r3, [r7, #24]
 800493a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800493c:	6979      	ldr	r1, [r7, #20]
 800493e:	69ba      	ldr	r2, [r7, #24]
 8004940:	e841 2300 	strex	r3, r2, [r1]
 8004944:	613b      	str	r3, [r7, #16]
   return(result);
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d1e6      	bne.n	800491a <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	69db      	ldr	r3, [r3, #28]
 8004952:	f003 0310 	and.w	r3, r3, #16
 8004956:	2b10      	cmp	r3, #16
 8004958:	d103      	bne.n	8004962 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	2210      	movs	r2, #16
 8004960:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004968:	4619      	mov	r1, r3
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f7ff f8a2 	bl	8003ab4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004970:	e00d      	b.n	800498e <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f7fc fa3c 	bl	8000df0 <HAL_UART_RxCpltCallback>
}
 8004978:	e009      	b.n	800498e <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	8b1b      	ldrh	r3, [r3, #24]
 8004980:	b29a      	uxth	r2, r3
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f042 0208 	orr.w	r2, r2, #8
 800498a:	b292      	uxth	r2, r2
 800498c:	831a      	strh	r2, [r3, #24]
}
 800498e:	bf00      	nop
 8004990:	3758      	adds	r7, #88	; 0x58
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}

08004996 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004996:	b480      	push	{r7}
 8004998:	b083      	sub	sp, #12
 800499a:	af00      	add	r7, sp, #0
 800499c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800499e:	bf00      	nop
 80049a0:	370c      	adds	r7, #12
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr
	...

080049ac <__errno>:
 80049ac:	4b01      	ldr	r3, [pc, #4]	; (80049b4 <__errno+0x8>)
 80049ae:	6818      	ldr	r0, [r3, #0]
 80049b0:	4770      	bx	lr
 80049b2:	bf00      	nop
 80049b4:	20000018 	.word	0x20000018

080049b8 <__libc_init_array>:
 80049b8:	b570      	push	{r4, r5, r6, lr}
 80049ba:	4d0d      	ldr	r5, [pc, #52]	; (80049f0 <__libc_init_array+0x38>)
 80049bc:	4c0d      	ldr	r4, [pc, #52]	; (80049f4 <__libc_init_array+0x3c>)
 80049be:	1b64      	subs	r4, r4, r5
 80049c0:	10a4      	asrs	r4, r4, #2
 80049c2:	2600      	movs	r6, #0
 80049c4:	42a6      	cmp	r6, r4
 80049c6:	d109      	bne.n	80049dc <__libc_init_array+0x24>
 80049c8:	4d0b      	ldr	r5, [pc, #44]	; (80049f8 <__libc_init_array+0x40>)
 80049ca:	4c0c      	ldr	r4, [pc, #48]	; (80049fc <__libc_init_array+0x44>)
 80049cc:	f000 fe20 	bl	8005610 <_init>
 80049d0:	1b64      	subs	r4, r4, r5
 80049d2:	10a4      	asrs	r4, r4, #2
 80049d4:	2600      	movs	r6, #0
 80049d6:	42a6      	cmp	r6, r4
 80049d8:	d105      	bne.n	80049e6 <__libc_init_array+0x2e>
 80049da:	bd70      	pop	{r4, r5, r6, pc}
 80049dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80049e0:	4798      	blx	r3
 80049e2:	3601      	adds	r6, #1
 80049e4:	e7ee      	b.n	80049c4 <__libc_init_array+0xc>
 80049e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80049ea:	4798      	blx	r3
 80049ec:	3601      	adds	r6, #1
 80049ee:	e7f2      	b.n	80049d6 <__libc_init_array+0x1e>
 80049f0:	0800582c 	.word	0x0800582c
 80049f4:	0800582c 	.word	0x0800582c
 80049f8:	0800582c 	.word	0x0800582c
 80049fc:	08005830 	.word	0x08005830

08004a00 <memcpy>:
 8004a00:	440a      	add	r2, r1
 8004a02:	4291      	cmp	r1, r2
 8004a04:	f100 33ff 	add.w	r3, r0, #4294967295
 8004a08:	d100      	bne.n	8004a0c <memcpy+0xc>
 8004a0a:	4770      	bx	lr
 8004a0c:	b510      	push	{r4, lr}
 8004a0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a12:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a16:	4291      	cmp	r1, r2
 8004a18:	d1f9      	bne.n	8004a0e <memcpy+0xe>
 8004a1a:	bd10      	pop	{r4, pc}

08004a1c <memset>:
 8004a1c:	4402      	add	r2, r0
 8004a1e:	4603      	mov	r3, r0
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d100      	bne.n	8004a26 <memset+0xa>
 8004a24:	4770      	bx	lr
 8004a26:	f803 1b01 	strb.w	r1, [r3], #1
 8004a2a:	e7f9      	b.n	8004a20 <memset+0x4>

08004a2c <siscanf>:
 8004a2c:	b40e      	push	{r1, r2, r3}
 8004a2e:	b510      	push	{r4, lr}
 8004a30:	b09f      	sub	sp, #124	; 0x7c
 8004a32:	ac21      	add	r4, sp, #132	; 0x84
 8004a34:	f44f 7101 	mov.w	r1, #516	; 0x204
 8004a38:	f854 2b04 	ldr.w	r2, [r4], #4
 8004a3c:	9201      	str	r2, [sp, #4]
 8004a3e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8004a42:	9004      	str	r0, [sp, #16]
 8004a44:	9008      	str	r0, [sp, #32]
 8004a46:	f7fb fbc3 	bl	80001d0 <strlen>
 8004a4a:	4b0c      	ldr	r3, [pc, #48]	; (8004a7c <siscanf+0x50>)
 8004a4c:	9005      	str	r0, [sp, #20]
 8004a4e:	9009      	str	r0, [sp, #36]	; 0x24
 8004a50:	930d      	str	r3, [sp, #52]	; 0x34
 8004a52:	480b      	ldr	r0, [pc, #44]	; (8004a80 <siscanf+0x54>)
 8004a54:	9a01      	ldr	r2, [sp, #4]
 8004a56:	6800      	ldr	r0, [r0, #0]
 8004a58:	9403      	str	r4, [sp, #12]
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	9311      	str	r3, [sp, #68]	; 0x44
 8004a5e:	9316      	str	r3, [sp, #88]	; 0x58
 8004a60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004a64:	f8ad 301e 	strh.w	r3, [sp, #30]
 8004a68:	a904      	add	r1, sp, #16
 8004a6a:	4623      	mov	r3, r4
 8004a6c:	f000 f866 	bl	8004b3c <__ssvfiscanf_r>
 8004a70:	b01f      	add	sp, #124	; 0x7c
 8004a72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a76:	b003      	add	sp, #12
 8004a78:	4770      	bx	lr
 8004a7a:	bf00      	nop
 8004a7c:	08004a85 	.word	0x08004a85
 8004a80:	20000018 	.word	0x20000018

08004a84 <__seofread>:
 8004a84:	2000      	movs	r0, #0
 8004a86:	4770      	bx	lr

08004a88 <_sungetc_r>:
 8004a88:	b538      	push	{r3, r4, r5, lr}
 8004a8a:	1c4b      	adds	r3, r1, #1
 8004a8c:	4614      	mov	r4, r2
 8004a8e:	d103      	bne.n	8004a98 <_sungetc_r+0x10>
 8004a90:	f04f 35ff 	mov.w	r5, #4294967295
 8004a94:	4628      	mov	r0, r5
 8004a96:	bd38      	pop	{r3, r4, r5, pc}
 8004a98:	8993      	ldrh	r3, [r2, #12]
 8004a9a:	f023 0320 	bic.w	r3, r3, #32
 8004a9e:	8193      	strh	r3, [r2, #12]
 8004aa0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004aa2:	6852      	ldr	r2, [r2, #4]
 8004aa4:	b2cd      	uxtb	r5, r1
 8004aa6:	b18b      	cbz	r3, 8004acc <_sungetc_r+0x44>
 8004aa8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	dd08      	ble.n	8004ac0 <_sungetc_r+0x38>
 8004aae:	6823      	ldr	r3, [r4, #0]
 8004ab0:	1e5a      	subs	r2, r3, #1
 8004ab2:	6022      	str	r2, [r4, #0]
 8004ab4:	f803 5c01 	strb.w	r5, [r3, #-1]
 8004ab8:	6863      	ldr	r3, [r4, #4]
 8004aba:	3301      	adds	r3, #1
 8004abc:	6063      	str	r3, [r4, #4]
 8004abe:	e7e9      	b.n	8004a94 <_sungetc_r+0xc>
 8004ac0:	4621      	mov	r1, r4
 8004ac2:	f000 fc35 	bl	8005330 <__submore>
 8004ac6:	2800      	cmp	r0, #0
 8004ac8:	d0f1      	beq.n	8004aae <_sungetc_r+0x26>
 8004aca:	e7e1      	b.n	8004a90 <_sungetc_r+0x8>
 8004acc:	6921      	ldr	r1, [r4, #16]
 8004ace:	6823      	ldr	r3, [r4, #0]
 8004ad0:	b151      	cbz	r1, 8004ae8 <_sungetc_r+0x60>
 8004ad2:	4299      	cmp	r1, r3
 8004ad4:	d208      	bcs.n	8004ae8 <_sungetc_r+0x60>
 8004ad6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8004ada:	42a9      	cmp	r1, r5
 8004adc:	d104      	bne.n	8004ae8 <_sungetc_r+0x60>
 8004ade:	3b01      	subs	r3, #1
 8004ae0:	3201      	adds	r2, #1
 8004ae2:	6023      	str	r3, [r4, #0]
 8004ae4:	6062      	str	r2, [r4, #4]
 8004ae6:	e7d5      	b.n	8004a94 <_sungetc_r+0xc>
 8004ae8:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8004aec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004af0:	6363      	str	r3, [r4, #52]	; 0x34
 8004af2:	2303      	movs	r3, #3
 8004af4:	63a3      	str	r3, [r4, #56]	; 0x38
 8004af6:	4623      	mov	r3, r4
 8004af8:	f803 5f46 	strb.w	r5, [r3, #70]!
 8004afc:	6023      	str	r3, [r4, #0]
 8004afe:	2301      	movs	r3, #1
 8004b00:	e7dc      	b.n	8004abc <_sungetc_r+0x34>

08004b02 <__ssrefill_r>:
 8004b02:	b510      	push	{r4, lr}
 8004b04:	460c      	mov	r4, r1
 8004b06:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8004b08:	b169      	cbz	r1, 8004b26 <__ssrefill_r+0x24>
 8004b0a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004b0e:	4299      	cmp	r1, r3
 8004b10:	d001      	beq.n	8004b16 <__ssrefill_r+0x14>
 8004b12:	f000 fc49 	bl	80053a8 <_free_r>
 8004b16:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004b18:	6063      	str	r3, [r4, #4]
 8004b1a:	2000      	movs	r0, #0
 8004b1c:	6360      	str	r0, [r4, #52]	; 0x34
 8004b1e:	b113      	cbz	r3, 8004b26 <__ssrefill_r+0x24>
 8004b20:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004b22:	6023      	str	r3, [r4, #0]
 8004b24:	bd10      	pop	{r4, pc}
 8004b26:	6923      	ldr	r3, [r4, #16]
 8004b28:	6023      	str	r3, [r4, #0]
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	6063      	str	r3, [r4, #4]
 8004b2e:	89a3      	ldrh	r3, [r4, #12]
 8004b30:	f043 0320 	orr.w	r3, r3, #32
 8004b34:	81a3      	strh	r3, [r4, #12]
 8004b36:	f04f 30ff 	mov.w	r0, #4294967295
 8004b3a:	e7f3      	b.n	8004b24 <__ssrefill_r+0x22>

08004b3c <__ssvfiscanf_r>:
 8004b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b40:	460c      	mov	r4, r1
 8004b42:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8004b46:	2100      	movs	r1, #0
 8004b48:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8004b4c:	49a6      	ldr	r1, [pc, #664]	; (8004de8 <__ssvfiscanf_r+0x2ac>)
 8004b4e:	91a0      	str	r1, [sp, #640]	; 0x280
 8004b50:	f10d 0804 	add.w	r8, sp, #4
 8004b54:	49a5      	ldr	r1, [pc, #660]	; (8004dec <__ssvfiscanf_r+0x2b0>)
 8004b56:	4fa6      	ldr	r7, [pc, #664]	; (8004df0 <__ssvfiscanf_r+0x2b4>)
 8004b58:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8004df4 <__ssvfiscanf_r+0x2b8>
 8004b5c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8004b60:	4606      	mov	r6, r0
 8004b62:	91a1      	str	r1, [sp, #644]	; 0x284
 8004b64:	9300      	str	r3, [sp, #0]
 8004b66:	7813      	ldrb	r3, [r2, #0]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	f000 815a 	beq.w	8004e22 <__ssvfiscanf_r+0x2e6>
 8004b6e:	5dd9      	ldrb	r1, [r3, r7]
 8004b70:	f011 0108 	ands.w	r1, r1, #8
 8004b74:	f102 0501 	add.w	r5, r2, #1
 8004b78:	d019      	beq.n	8004bae <__ssvfiscanf_r+0x72>
 8004b7a:	6863      	ldr	r3, [r4, #4]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	dd0f      	ble.n	8004ba0 <__ssvfiscanf_r+0x64>
 8004b80:	6823      	ldr	r3, [r4, #0]
 8004b82:	781a      	ldrb	r2, [r3, #0]
 8004b84:	5cba      	ldrb	r2, [r7, r2]
 8004b86:	0712      	lsls	r2, r2, #28
 8004b88:	d401      	bmi.n	8004b8e <__ssvfiscanf_r+0x52>
 8004b8a:	462a      	mov	r2, r5
 8004b8c:	e7eb      	b.n	8004b66 <__ssvfiscanf_r+0x2a>
 8004b8e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8004b90:	3201      	adds	r2, #1
 8004b92:	9245      	str	r2, [sp, #276]	; 0x114
 8004b94:	6862      	ldr	r2, [r4, #4]
 8004b96:	3301      	adds	r3, #1
 8004b98:	3a01      	subs	r2, #1
 8004b9a:	6062      	str	r2, [r4, #4]
 8004b9c:	6023      	str	r3, [r4, #0]
 8004b9e:	e7ec      	b.n	8004b7a <__ssvfiscanf_r+0x3e>
 8004ba0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004ba2:	4621      	mov	r1, r4
 8004ba4:	4630      	mov	r0, r6
 8004ba6:	4798      	blx	r3
 8004ba8:	2800      	cmp	r0, #0
 8004baa:	d0e9      	beq.n	8004b80 <__ssvfiscanf_r+0x44>
 8004bac:	e7ed      	b.n	8004b8a <__ssvfiscanf_r+0x4e>
 8004bae:	2b25      	cmp	r3, #37	; 0x25
 8004bb0:	d012      	beq.n	8004bd8 <__ssvfiscanf_r+0x9c>
 8004bb2:	469a      	mov	sl, r3
 8004bb4:	6863      	ldr	r3, [r4, #4]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	f340 8091 	ble.w	8004cde <__ssvfiscanf_r+0x1a2>
 8004bbc:	6822      	ldr	r2, [r4, #0]
 8004bbe:	7813      	ldrb	r3, [r2, #0]
 8004bc0:	4553      	cmp	r3, sl
 8004bc2:	f040 812e 	bne.w	8004e22 <__ssvfiscanf_r+0x2e6>
 8004bc6:	6863      	ldr	r3, [r4, #4]
 8004bc8:	3b01      	subs	r3, #1
 8004bca:	6063      	str	r3, [r4, #4]
 8004bcc:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8004bce:	3201      	adds	r2, #1
 8004bd0:	3301      	adds	r3, #1
 8004bd2:	6022      	str	r2, [r4, #0]
 8004bd4:	9345      	str	r3, [sp, #276]	; 0x114
 8004bd6:	e7d8      	b.n	8004b8a <__ssvfiscanf_r+0x4e>
 8004bd8:	9141      	str	r1, [sp, #260]	; 0x104
 8004bda:	9143      	str	r1, [sp, #268]	; 0x10c
 8004bdc:	7853      	ldrb	r3, [r2, #1]
 8004bde:	2b2a      	cmp	r3, #42	; 0x2a
 8004be0:	bf02      	ittt	eq
 8004be2:	2310      	moveq	r3, #16
 8004be4:	1c95      	addeq	r5, r2, #2
 8004be6:	9341      	streq	r3, [sp, #260]	; 0x104
 8004be8:	220a      	movs	r2, #10
 8004bea:	46aa      	mov	sl, r5
 8004bec:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8004bf0:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8004bf4:	2b09      	cmp	r3, #9
 8004bf6:	d91d      	bls.n	8004c34 <__ssvfiscanf_r+0xf8>
 8004bf8:	487e      	ldr	r0, [pc, #504]	; (8004df4 <__ssvfiscanf_r+0x2b8>)
 8004bfa:	2203      	movs	r2, #3
 8004bfc:	f7fb faf0 	bl	80001e0 <memchr>
 8004c00:	b140      	cbz	r0, 8004c14 <__ssvfiscanf_r+0xd8>
 8004c02:	2301      	movs	r3, #1
 8004c04:	eba0 0009 	sub.w	r0, r0, r9
 8004c08:	fa03 f000 	lsl.w	r0, r3, r0
 8004c0c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004c0e:	4318      	orrs	r0, r3
 8004c10:	9041      	str	r0, [sp, #260]	; 0x104
 8004c12:	4655      	mov	r5, sl
 8004c14:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004c18:	2b78      	cmp	r3, #120	; 0x78
 8004c1a:	d806      	bhi.n	8004c2a <__ssvfiscanf_r+0xee>
 8004c1c:	2b57      	cmp	r3, #87	; 0x57
 8004c1e:	d810      	bhi.n	8004c42 <__ssvfiscanf_r+0x106>
 8004c20:	2b25      	cmp	r3, #37	; 0x25
 8004c22:	d0c6      	beq.n	8004bb2 <__ssvfiscanf_r+0x76>
 8004c24:	d856      	bhi.n	8004cd4 <__ssvfiscanf_r+0x198>
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d064      	beq.n	8004cf4 <__ssvfiscanf_r+0x1b8>
 8004c2a:	2303      	movs	r3, #3
 8004c2c:	9347      	str	r3, [sp, #284]	; 0x11c
 8004c2e:	230a      	movs	r3, #10
 8004c30:	9342      	str	r3, [sp, #264]	; 0x108
 8004c32:	e071      	b.n	8004d18 <__ssvfiscanf_r+0x1dc>
 8004c34:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8004c36:	fb02 1103 	mla	r1, r2, r3, r1
 8004c3a:	3930      	subs	r1, #48	; 0x30
 8004c3c:	9143      	str	r1, [sp, #268]	; 0x10c
 8004c3e:	4655      	mov	r5, sl
 8004c40:	e7d3      	b.n	8004bea <__ssvfiscanf_r+0xae>
 8004c42:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8004c46:	2a20      	cmp	r2, #32
 8004c48:	d8ef      	bhi.n	8004c2a <__ssvfiscanf_r+0xee>
 8004c4a:	a101      	add	r1, pc, #4	; (adr r1, 8004c50 <__ssvfiscanf_r+0x114>)
 8004c4c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004c50:	08004d03 	.word	0x08004d03
 8004c54:	08004c2b 	.word	0x08004c2b
 8004c58:	08004c2b 	.word	0x08004c2b
 8004c5c:	08004d61 	.word	0x08004d61
 8004c60:	08004c2b 	.word	0x08004c2b
 8004c64:	08004c2b 	.word	0x08004c2b
 8004c68:	08004c2b 	.word	0x08004c2b
 8004c6c:	08004c2b 	.word	0x08004c2b
 8004c70:	08004c2b 	.word	0x08004c2b
 8004c74:	08004c2b 	.word	0x08004c2b
 8004c78:	08004c2b 	.word	0x08004c2b
 8004c7c:	08004d77 	.word	0x08004d77
 8004c80:	08004d4d 	.word	0x08004d4d
 8004c84:	08004cdb 	.word	0x08004cdb
 8004c88:	08004cdb 	.word	0x08004cdb
 8004c8c:	08004cdb 	.word	0x08004cdb
 8004c90:	08004c2b 	.word	0x08004c2b
 8004c94:	08004d51 	.word	0x08004d51
 8004c98:	08004c2b 	.word	0x08004c2b
 8004c9c:	08004c2b 	.word	0x08004c2b
 8004ca0:	08004c2b 	.word	0x08004c2b
 8004ca4:	08004c2b 	.word	0x08004c2b
 8004ca8:	08004d87 	.word	0x08004d87
 8004cac:	08004d59 	.word	0x08004d59
 8004cb0:	08004cfb 	.word	0x08004cfb
 8004cb4:	08004c2b 	.word	0x08004c2b
 8004cb8:	08004c2b 	.word	0x08004c2b
 8004cbc:	08004d83 	.word	0x08004d83
 8004cc0:	08004c2b 	.word	0x08004c2b
 8004cc4:	08004d4d 	.word	0x08004d4d
 8004cc8:	08004c2b 	.word	0x08004c2b
 8004ccc:	08004c2b 	.word	0x08004c2b
 8004cd0:	08004d03 	.word	0x08004d03
 8004cd4:	3b45      	subs	r3, #69	; 0x45
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	d8a7      	bhi.n	8004c2a <__ssvfiscanf_r+0xee>
 8004cda:	2305      	movs	r3, #5
 8004cdc:	e01b      	b.n	8004d16 <__ssvfiscanf_r+0x1da>
 8004cde:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004ce0:	4621      	mov	r1, r4
 8004ce2:	4630      	mov	r0, r6
 8004ce4:	4798      	blx	r3
 8004ce6:	2800      	cmp	r0, #0
 8004ce8:	f43f af68 	beq.w	8004bbc <__ssvfiscanf_r+0x80>
 8004cec:	9844      	ldr	r0, [sp, #272]	; 0x110
 8004cee:	2800      	cmp	r0, #0
 8004cf0:	f040 808d 	bne.w	8004e0e <__ssvfiscanf_r+0x2d2>
 8004cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8004cf8:	e08f      	b.n	8004e1a <__ssvfiscanf_r+0x2de>
 8004cfa:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8004cfc:	f042 0220 	orr.w	r2, r2, #32
 8004d00:	9241      	str	r2, [sp, #260]	; 0x104
 8004d02:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8004d04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d08:	9241      	str	r2, [sp, #260]	; 0x104
 8004d0a:	2210      	movs	r2, #16
 8004d0c:	2b6f      	cmp	r3, #111	; 0x6f
 8004d0e:	9242      	str	r2, [sp, #264]	; 0x108
 8004d10:	bf34      	ite	cc
 8004d12:	2303      	movcc	r3, #3
 8004d14:	2304      	movcs	r3, #4
 8004d16:	9347      	str	r3, [sp, #284]	; 0x11c
 8004d18:	6863      	ldr	r3, [r4, #4]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	dd42      	ble.n	8004da4 <__ssvfiscanf_r+0x268>
 8004d1e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004d20:	0659      	lsls	r1, r3, #25
 8004d22:	d404      	bmi.n	8004d2e <__ssvfiscanf_r+0x1f2>
 8004d24:	6823      	ldr	r3, [r4, #0]
 8004d26:	781a      	ldrb	r2, [r3, #0]
 8004d28:	5cba      	ldrb	r2, [r7, r2]
 8004d2a:	0712      	lsls	r2, r2, #28
 8004d2c:	d441      	bmi.n	8004db2 <__ssvfiscanf_r+0x276>
 8004d2e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8004d30:	2b02      	cmp	r3, #2
 8004d32:	dc50      	bgt.n	8004dd6 <__ssvfiscanf_r+0x29a>
 8004d34:	466b      	mov	r3, sp
 8004d36:	4622      	mov	r2, r4
 8004d38:	a941      	add	r1, sp, #260	; 0x104
 8004d3a:	4630      	mov	r0, r6
 8004d3c:	f000 f876 	bl	8004e2c <_scanf_chars>
 8004d40:	2801      	cmp	r0, #1
 8004d42:	d06e      	beq.n	8004e22 <__ssvfiscanf_r+0x2e6>
 8004d44:	2802      	cmp	r0, #2
 8004d46:	f47f af20 	bne.w	8004b8a <__ssvfiscanf_r+0x4e>
 8004d4a:	e7cf      	b.n	8004cec <__ssvfiscanf_r+0x1b0>
 8004d4c:	220a      	movs	r2, #10
 8004d4e:	e7dd      	b.n	8004d0c <__ssvfiscanf_r+0x1d0>
 8004d50:	2300      	movs	r3, #0
 8004d52:	9342      	str	r3, [sp, #264]	; 0x108
 8004d54:	2303      	movs	r3, #3
 8004d56:	e7de      	b.n	8004d16 <__ssvfiscanf_r+0x1da>
 8004d58:	2308      	movs	r3, #8
 8004d5a:	9342      	str	r3, [sp, #264]	; 0x108
 8004d5c:	2304      	movs	r3, #4
 8004d5e:	e7da      	b.n	8004d16 <__ssvfiscanf_r+0x1da>
 8004d60:	4629      	mov	r1, r5
 8004d62:	4640      	mov	r0, r8
 8004d64:	f000 f9b4 	bl	80050d0 <__sccl>
 8004d68:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004d6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d6e:	9341      	str	r3, [sp, #260]	; 0x104
 8004d70:	4605      	mov	r5, r0
 8004d72:	2301      	movs	r3, #1
 8004d74:	e7cf      	b.n	8004d16 <__ssvfiscanf_r+0x1da>
 8004d76:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004d78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d7c:	9341      	str	r3, [sp, #260]	; 0x104
 8004d7e:	2300      	movs	r3, #0
 8004d80:	e7c9      	b.n	8004d16 <__ssvfiscanf_r+0x1da>
 8004d82:	2302      	movs	r3, #2
 8004d84:	e7c7      	b.n	8004d16 <__ssvfiscanf_r+0x1da>
 8004d86:	9841      	ldr	r0, [sp, #260]	; 0x104
 8004d88:	06c3      	lsls	r3, r0, #27
 8004d8a:	f53f aefe 	bmi.w	8004b8a <__ssvfiscanf_r+0x4e>
 8004d8e:	9b00      	ldr	r3, [sp, #0]
 8004d90:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8004d92:	1d19      	adds	r1, r3, #4
 8004d94:	9100      	str	r1, [sp, #0]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f010 0f01 	tst.w	r0, #1
 8004d9c:	bf14      	ite	ne
 8004d9e:	801a      	strhne	r2, [r3, #0]
 8004da0:	601a      	streq	r2, [r3, #0]
 8004da2:	e6f2      	b.n	8004b8a <__ssvfiscanf_r+0x4e>
 8004da4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004da6:	4621      	mov	r1, r4
 8004da8:	4630      	mov	r0, r6
 8004daa:	4798      	blx	r3
 8004dac:	2800      	cmp	r0, #0
 8004dae:	d0b6      	beq.n	8004d1e <__ssvfiscanf_r+0x1e2>
 8004db0:	e79c      	b.n	8004cec <__ssvfiscanf_r+0x1b0>
 8004db2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8004db4:	3201      	adds	r2, #1
 8004db6:	9245      	str	r2, [sp, #276]	; 0x114
 8004db8:	6862      	ldr	r2, [r4, #4]
 8004dba:	3a01      	subs	r2, #1
 8004dbc:	2a00      	cmp	r2, #0
 8004dbe:	6062      	str	r2, [r4, #4]
 8004dc0:	dd02      	ble.n	8004dc8 <__ssvfiscanf_r+0x28c>
 8004dc2:	3301      	adds	r3, #1
 8004dc4:	6023      	str	r3, [r4, #0]
 8004dc6:	e7ad      	b.n	8004d24 <__ssvfiscanf_r+0x1e8>
 8004dc8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004dca:	4621      	mov	r1, r4
 8004dcc:	4630      	mov	r0, r6
 8004dce:	4798      	blx	r3
 8004dd0:	2800      	cmp	r0, #0
 8004dd2:	d0a7      	beq.n	8004d24 <__ssvfiscanf_r+0x1e8>
 8004dd4:	e78a      	b.n	8004cec <__ssvfiscanf_r+0x1b0>
 8004dd6:	2b04      	cmp	r3, #4
 8004dd8:	dc0e      	bgt.n	8004df8 <__ssvfiscanf_r+0x2bc>
 8004dda:	466b      	mov	r3, sp
 8004ddc:	4622      	mov	r2, r4
 8004dde:	a941      	add	r1, sp, #260	; 0x104
 8004de0:	4630      	mov	r0, r6
 8004de2:	f000 f87d 	bl	8004ee0 <_scanf_i>
 8004de6:	e7ab      	b.n	8004d40 <__ssvfiscanf_r+0x204>
 8004de8:	08004a89 	.word	0x08004a89
 8004dec:	08004b03 	.word	0x08004b03
 8004df0:	080056c4 	.word	0x080056c4
 8004df4:	080056a4 	.word	0x080056a4
 8004df8:	4b0b      	ldr	r3, [pc, #44]	; (8004e28 <__ssvfiscanf_r+0x2ec>)
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	f43f aec5 	beq.w	8004b8a <__ssvfiscanf_r+0x4e>
 8004e00:	466b      	mov	r3, sp
 8004e02:	4622      	mov	r2, r4
 8004e04:	a941      	add	r1, sp, #260	; 0x104
 8004e06:	4630      	mov	r0, r6
 8004e08:	f3af 8000 	nop.w
 8004e0c:	e798      	b.n	8004d40 <__ssvfiscanf_r+0x204>
 8004e0e:	89a3      	ldrh	r3, [r4, #12]
 8004e10:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004e14:	bf18      	it	ne
 8004e16:	f04f 30ff 	movne.w	r0, #4294967295
 8004e1a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8004e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e22:	9844      	ldr	r0, [sp, #272]	; 0x110
 8004e24:	e7f9      	b.n	8004e1a <__ssvfiscanf_r+0x2de>
 8004e26:	bf00      	nop
 8004e28:	00000000 	.word	0x00000000

08004e2c <_scanf_chars>:
 8004e2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e30:	4615      	mov	r5, r2
 8004e32:	688a      	ldr	r2, [r1, #8]
 8004e34:	4680      	mov	r8, r0
 8004e36:	460c      	mov	r4, r1
 8004e38:	b932      	cbnz	r2, 8004e48 <_scanf_chars+0x1c>
 8004e3a:	698a      	ldr	r2, [r1, #24]
 8004e3c:	2a00      	cmp	r2, #0
 8004e3e:	bf0c      	ite	eq
 8004e40:	2201      	moveq	r2, #1
 8004e42:	f04f 32ff 	movne.w	r2, #4294967295
 8004e46:	608a      	str	r2, [r1, #8]
 8004e48:	6822      	ldr	r2, [r4, #0]
 8004e4a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8004edc <_scanf_chars+0xb0>
 8004e4e:	06d1      	lsls	r1, r2, #27
 8004e50:	bf5f      	itttt	pl
 8004e52:	681a      	ldrpl	r2, [r3, #0]
 8004e54:	1d11      	addpl	r1, r2, #4
 8004e56:	6019      	strpl	r1, [r3, #0]
 8004e58:	6816      	ldrpl	r6, [r2, #0]
 8004e5a:	2700      	movs	r7, #0
 8004e5c:	69a0      	ldr	r0, [r4, #24]
 8004e5e:	b188      	cbz	r0, 8004e84 <_scanf_chars+0x58>
 8004e60:	2801      	cmp	r0, #1
 8004e62:	d107      	bne.n	8004e74 <_scanf_chars+0x48>
 8004e64:	682a      	ldr	r2, [r5, #0]
 8004e66:	7811      	ldrb	r1, [r2, #0]
 8004e68:	6962      	ldr	r2, [r4, #20]
 8004e6a:	5c52      	ldrb	r2, [r2, r1]
 8004e6c:	b952      	cbnz	r2, 8004e84 <_scanf_chars+0x58>
 8004e6e:	2f00      	cmp	r7, #0
 8004e70:	d031      	beq.n	8004ed6 <_scanf_chars+0xaa>
 8004e72:	e022      	b.n	8004eba <_scanf_chars+0x8e>
 8004e74:	2802      	cmp	r0, #2
 8004e76:	d120      	bne.n	8004eba <_scanf_chars+0x8e>
 8004e78:	682b      	ldr	r3, [r5, #0]
 8004e7a:	781b      	ldrb	r3, [r3, #0]
 8004e7c:	f813 3009 	ldrb.w	r3, [r3, r9]
 8004e80:	071b      	lsls	r3, r3, #28
 8004e82:	d41a      	bmi.n	8004eba <_scanf_chars+0x8e>
 8004e84:	6823      	ldr	r3, [r4, #0]
 8004e86:	06da      	lsls	r2, r3, #27
 8004e88:	bf5e      	ittt	pl
 8004e8a:	682b      	ldrpl	r3, [r5, #0]
 8004e8c:	781b      	ldrbpl	r3, [r3, #0]
 8004e8e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8004e92:	682a      	ldr	r2, [r5, #0]
 8004e94:	686b      	ldr	r3, [r5, #4]
 8004e96:	3201      	adds	r2, #1
 8004e98:	602a      	str	r2, [r5, #0]
 8004e9a:	68a2      	ldr	r2, [r4, #8]
 8004e9c:	3b01      	subs	r3, #1
 8004e9e:	3a01      	subs	r2, #1
 8004ea0:	606b      	str	r3, [r5, #4]
 8004ea2:	3701      	adds	r7, #1
 8004ea4:	60a2      	str	r2, [r4, #8]
 8004ea6:	b142      	cbz	r2, 8004eba <_scanf_chars+0x8e>
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	dcd7      	bgt.n	8004e5c <_scanf_chars+0x30>
 8004eac:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004eb0:	4629      	mov	r1, r5
 8004eb2:	4640      	mov	r0, r8
 8004eb4:	4798      	blx	r3
 8004eb6:	2800      	cmp	r0, #0
 8004eb8:	d0d0      	beq.n	8004e5c <_scanf_chars+0x30>
 8004eba:	6823      	ldr	r3, [r4, #0]
 8004ebc:	f013 0310 	ands.w	r3, r3, #16
 8004ec0:	d105      	bne.n	8004ece <_scanf_chars+0xa2>
 8004ec2:	68e2      	ldr	r2, [r4, #12]
 8004ec4:	3201      	adds	r2, #1
 8004ec6:	60e2      	str	r2, [r4, #12]
 8004ec8:	69a2      	ldr	r2, [r4, #24]
 8004eca:	b102      	cbz	r2, 8004ece <_scanf_chars+0xa2>
 8004ecc:	7033      	strb	r3, [r6, #0]
 8004ece:	6923      	ldr	r3, [r4, #16]
 8004ed0:	443b      	add	r3, r7
 8004ed2:	6123      	str	r3, [r4, #16]
 8004ed4:	2000      	movs	r0, #0
 8004ed6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004eda:	bf00      	nop
 8004edc:	080056c4 	.word	0x080056c4

08004ee0 <_scanf_i>:
 8004ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ee4:	4698      	mov	r8, r3
 8004ee6:	4b76      	ldr	r3, [pc, #472]	; (80050c0 <_scanf_i+0x1e0>)
 8004ee8:	460c      	mov	r4, r1
 8004eea:	4682      	mov	sl, r0
 8004eec:	4616      	mov	r6, r2
 8004eee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004ef2:	b087      	sub	sp, #28
 8004ef4:	ab03      	add	r3, sp, #12
 8004ef6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004efa:	4b72      	ldr	r3, [pc, #456]	; (80050c4 <_scanf_i+0x1e4>)
 8004efc:	69a1      	ldr	r1, [r4, #24]
 8004efe:	4a72      	ldr	r2, [pc, #456]	; (80050c8 <_scanf_i+0x1e8>)
 8004f00:	2903      	cmp	r1, #3
 8004f02:	bf18      	it	ne
 8004f04:	461a      	movne	r2, r3
 8004f06:	68a3      	ldr	r3, [r4, #8]
 8004f08:	9201      	str	r2, [sp, #4]
 8004f0a:	1e5a      	subs	r2, r3, #1
 8004f0c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004f10:	bf88      	it	hi
 8004f12:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004f16:	4627      	mov	r7, r4
 8004f18:	bf82      	ittt	hi
 8004f1a:	eb03 0905 	addhi.w	r9, r3, r5
 8004f1e:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004f22:	60a3      	strhi	r3, [r4, #8]
 8004f24:	f857 3b1c 	ldr.w	r3, [r7], #28
 8004f28:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8004f2c:	bf98      	it	ls
 8004f2e:	f04f 0900 	movls.w	r9, #0
 8004f32:	6023      	str	r3, [r4, #0]
 8004f34:	463d      	mov	r5, r7
 8004f36:	f04f 0b00 	mov.w	fp, #0
 8004f3a:	6831      	ldr	r1, [r6, #0]
 8004f3c:	ab03      	add	r3, sp, #12
 8004f3e:	7809      	ldrb	r1, [r1, #0]
 8004f40:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8004f44:	2202      	movs	r2, #2
 8004f46:	f7fb f94b 	bl	80001e0 <memchr>
 8004f4a:	b328      	cbz	r0, 8004f98 <_scanf_i+0xb8>
 8004f4c:	f1bb 0f01 	cmp.w	fp, #1
 8004f50:	d159      	bne.n	8005006 <_scanf_i+0x126>
 8004f52:	6862      	ldr	r2, [r4, #4]
 8004f54:	b92a      	cbnz	r2, 8004f62 <_scanf_i+0x82>
 8004f56:	6822      	ldr	r2, [r4, #0]
 8004f58:	2308      	movs	r3, #8
 8004f5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f5e:	6063      	str	r3, [r4, #4]
 8004f60:	6022      	str	r2, [r4, #0]
 8004f62:	6822      	ldr	r2, [r4, #0]
 8004f64:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8004f68:	6022      	str	r2, [r4, #0]
 8004f6a:	68a2      	ldr	r2, [r4, #8]
 8004f6c:	1e51      	subs	r1, r2, #1
 8004f6e:	60a1      	str	r1, [r4, #8]
 8004f70:	b192      	cbz	r2, 8004f98 <_scanf_i+0xb8>
 8004f72:	6832      	ldr	r2, [r6, #0]
 8004f74:	1c51      	adds	r1, r2, #1
 8004f76:	6031      	str	r1, [r6, #0]
 8004f78:	7812      	ldrb	r2, [r2, #0]
 8004f7a:	f805 2b01 	strb.w	r2, [r5], #1
 8004f7e:	6872      	ldr	r2, [r6, #4]
 8004f80:	3a01      	subs	r2, #1
 8004f82:	2a00      	cmp	r2, #0
 8004f84:	6072      	str	r2, [r6, #4]
 8004f86:	dc07      	bgt.n	8004f98 <_scanf_i+0xb8>
 8004f88:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8004f8c:	4631      	mov	r1, r6
 8004f8e:	4650      	mov	r0, sl
 8004f90:	4790      	blx	r2
 8004f92:	2800      	cmp	r0, #0
 8004f94:	f040 8085 	bne.w	80050a2 <_scanf_i+0x1c2>
 8004f98:	f10b 0b01 	add.w	fp, fp, #1
 8004f9c:	f1bb 0f03 	cmp.w	fp, #3
 8004fa0:	d1cb      	bne.n	8004f3a <_scanf_i+0x5a>
 8004fa2:	6863      	ldr	r3, [r4, #4]
 8004fa4:	b90b      	cbnz	r3, 8004faa <_scanf_i+0xca>
 8004fa6:	230a      	movs	r3, #10
 8004fa8:	6063      	str	r3, [r4, #4]
 8004faa:	6863      	ldr	r3, [r4, #4]
 8004fac:	4947      	ldr	r1, [pc, #284]	; (80050cc <_scanf_i+0x1ec>)
 8004fae:	6960      	ldr	r0, [r4, #20]
 8004fb0:	1ac9      	subs	r1, r1, r3
 8004fb2:	f000 f88d 	bl	80050d0 <__sccl>
 8004fb6:	f04f 0b00 	mov.w	fp, #0
 8004fba:	68a3      	ldr	r3, [r4, #8]
 8004fbc:	6822      	ldr	r2, [r4, #0]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d03d      	beq.n	800503e <_scanf_i+0x15e>
 8004fc2:	6831      	ldr	r1, [r6, #0]
 8004fc4:	6960      	ldr	r0, [r4, #20]
 8004fc6:	f891 c000 	ldrb.w	ip, [r1]
 8004fca:	f810 000c 	ldrb.w	r0, [r0, ip]
 8004fce:	2800      	cmp	r0, #0
 8004fd0:	d035      	beq.n	800503e <_scanf_i+0x15e>
 8004fd2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8004fd6:	d124      	bne.n	8005022 <_scanf_i+0x142>
 8004fd8:	0510      	lsls	r0, r2, #20
 8004fda:	d522      	bpl.n	8005022 <_scanf_i+0x142>
 8004fdc:	f10b 0b01 	add.w	fp, fp, #1
 8004fe0:	f1b9 0f00 	cmp.w	r9, #0
 8004fe4:	d003      	beq.n	8004fee <_scanf_i+0x10e>
 8004fe6:	3301      	adds	r3, #1
 8004fe8:	f109 39ff 	add.w	r9, r9, #4294967295
 8004fec:	60a3      	str	r3, [r4, #8]
 8004fee:	6873      	ldr	r3, [r6, #4]
 8004ff0:	3b01      	subs	r3, #1
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	6073      	str	r3, [r6, #4]
 8004ff6:	dd1b      	ble.n	8005030 <_scanf_i+0x150>
 8004ff8:	6833      	ldr	r3, [r6, #0]
 8004ffa:	3301      	adds	r3, #1
 8004ffc:	6033      	str	r3, [r6, #0]
 8004ffe:	68a3      	ldr	r3, [r4, #8]
 8005000:	3b01      	subs	r3, #1
 8005002:	60a3      	str	r3, [r4, #8]
 8005004:	e7d9      	b.n	8004fba <_scanf_i+0xda>
 8005006:	f1bb 0f02 	cmp.w	fp, #2
 800500a:	d1ae      	bne.n	8004f6a <_scanf_i+0x8a>
 800500c:	6822      	ldr	r2, [r4, #0]
 800500e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8005012:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8005016:	d1bf      	bne.n	8004f98 <_scanf_i+0xb8>
 8005018:	2310      	movs	r3, #16
 800501a:	6063      	str	r3, [r4, #4]
 800501c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005020:	e7a2      	b.n	8004f68 <_scanf_i+0x88>
 8005022:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8005026:	6022      	str	r2, [r4, #0]
 8005028:	780b      	ldrb	r3, [r1, #0]
 800502a:	f805 3b01 	strb.w	r3, [r5], #1
 800502e:	e7de      	b.n	8004fee <_scanf_i+0x10e>
 8005030:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005034:	4631      	mov	r1, r6
 8005036:	4650      	mov	r0, sl
 8005038:	4798      	blx	r3
 800503a:	2800      	cmp	r0, #0
 800503c:	d0df      	beq.n	8004ffe <_scanf_i+0x11e>
 800503e:	6823      	ldr	r3, [r4, #0]
 8005040:	05db      	lsls	r3, r3, #23
 8005042:	d50d      	bpl.n	8005060 <_scanf_i+0x180>
 8005044:	42bd      	cmp	r5, r7
 8005046:	d909      	bls.n	800505c <_scanf_i+0x17c>
 8005048:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800504c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005050:	4632      	mov	r2, r6
 8005052:	4650      	mov	r0, sl
 8005054:	4798      	blx	r3
 8005056:	f105 39ff 	add.w	r9, r5, #4294967295
 800505a:	464d      	mov	r5, r9
 800505c:	42bd      	cmp	r5, r7
 800505e:	d02d      	beq.n	80050bc <_scanf_i+0x1dc>
 8005060:	6822      	ldr	r2, [r4, #0]
 8005062:	f012 0210 	ands.w	r2, r2, #16
 8005066:	d113      	bne.n	8005090 <_scanf_i+0x1b0>
 8005068:	702a      	strb	r2, [r5, #0]
 800506a:	6863      	ldr	r3, [r4, #4]
 800506c:	9e01      	ldr	r6, [sp, #4]
 800506e:	4639      	mov	r1, r7
 8005070:	4650      	mov	r0, sl
 8005072:	47b0      	blx	r6
 8005074:	6821      	ldr	r1, [r4, #0]
 8005076:	f8d8 3000 	ldr.w	r3, [r8]
 800507a:	f011 0f20 	tst.w	r1, #32
 800507e:	d013      	beq.n	80050a8 <_scanf_i+0x1c8>
 8005080:	1d1a      	adds	r2, r3, #4
 8005082:	f8c8 2000 	str.w	r2, [r8]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	6018      	str	r0, [r3, #0]
 800508a:	68e3      	ldr	r3, [r4, #12]
 800508c:	3301      	adds	r3, #1
 800508e:	60e3      	str	r3, [r4, #12]
 8005090:	1bed      	subs	r5, r5, r7
 8005092:	44ab      	add	fp, r5
 8005094:	6925      	ldr	r5, [r4, #16]
 8005096:	445d      	add	r5, fp
 8005098:	6125      	str	r5, [r4, #16]
 800509a:	2000      	movs	r0, #0
 800509c:	b007      	add	sp, #28
 800509e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050a2:	f04f 0b00 	mov.w	fp, #0
 80050a6:	e7ca      	b.n	800503e <_scanf_i+0x15e>
 80050a8:	1d1a      	adds	r2, r3, #4
 80050aa:	f8c8 2000 	str.w	r2, [r8]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f011 0f01 	tst.w	r1, #1
 80050b4:	bf14      	ite	ne
 80050b6:	8018      	strhne	r0, [r3, #0]
 80050b8:	6018      	streq	r0, [r3, #0]
 80050ba:	e7e6      	b.n	800508a <_scanf_i+0x1aa>
 80050bc:	2001      	movs	r0, #1
 80050be:	e7ed      	b.n	800509c <_scanf_i+0x1bc>
 80050c0:	08005650 	.word	0x08005650
 80050c4:	0800532d 	.word	0x0800532d
 80050c8:	08005245 	.word	0x08005245
 80050cc:	080056c1 	.word	0x080056c1

080050d0 <__sccl>:
 80050d0:	b570      	push	{r4, r5, r6, lr}
 80050d2:	780b      	ldrb	r3, [r1, #0]
 80050d4:	4604      	mov	r4, r0
 80050d6:	2b5e      	cmp	r3, #94	; 0x5e
 80050d8:	bf0b      	itete	eq
 80050da:	784b      	ldrbeq	r3, [r1, #1]
 80050dc:	1c48      	addne	r0, r1, #1
 80050de:	1c88      	addeq	r0, r1, #2
 80050e0:	2200      	movne	r2, #0
 80050e2:	bf08      	it	eq
 80050e4:	2201      	moveq	r2, #1
 80050e6:	1e61      	subs	r1, r4, #1
 80050e8:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80050ec:	f801 2f01 	strb.w	r2, [r1, #1]!
 80050f0:	42a9      	cmp	r1, r5
 80050f2:	d1fb      	bne.n	80050ec <__sccl+0x1c>
 80050f4:	b90b      	cbnz	r3, 80050fa <__sccl+0x2a>
 80050f6:	3801      	subs	r0, #1
 80050f8:	bd70      	pop	{r4, r5, r6, pc}
 80050fa:	f082 0201 	eor.w	r2, r2, #1
 80050fe:	54e2      	strb	r2, [r4, r3]
 8005100:	4605      	mov	r5, r0
 8005102:	4628      	mov	r0, r5
 8005104:	f810 1b01 	ldrb.w	r1, [r0], #1
 8005108:	292d      	cmp	r1, #45	; 0x2d
 800510a:	d006      	beq.n	800511a <__sccl+0x4a>
 800510c:	295d      	cmp	r1, #93	; 0x5d
 800510e:	d0f3      	beq.n	80050f8 <__sccl+0x28>
 8005110:	b909      	cbnz	r1, 8005116 <__sccl+0x46>
 8005112:	4628      	mov	r0, r5
 8005114:	e7f0      	b.n	80050f8 <__sccl+0x28>
 8005116:	460b      	mov	r3, r1
 8005118:	e7f1      	b.n	80050fe <__sccl+0x2e>
 800511a:	786e      	ldrb	r6, [r5, #1]
 800511c:	2e5d      	cmp	r6, #93	; 0x5d
 800511e:	d0fa      	beq.n	8005116 <__sccl+0x46>
 8005120:	42b3      	cmp	r3, r6
 8005122:	dcf8      	bgt.n	8005116 <__sccl+0x46>
 8005124:	3502      	adds	r5, #2
 8005126:	4619      	mov	r1, r3
 8005128:	3101      	adds	r1, #1
 800512a:	428e      	cmp	r6, r1
 800512c:	5462      	strb	r2, [r4, r1]
 800512e:	dcfb      	bgt.n	8005128 <__sccl+0x58>
 8005130:	1af1      	subs	r1, r6, r3
 8005132:	3901      	subs	r1, #1
 8005134:	1c58      	adds	r0, r3, #1
 8005136:	42b3      	cmp	r3, r6
 8005138:	bfa8      	it	ge
 800513a:	2100      	movge	r1, #0
 800513c:	1843      	adds	r3, r0, r1
 800513e:	e7e0      	b.n	8005102 <__sccl+0x32>

08005140 <_strtol_l.constprop.0>:
 8005140:	2b01      	cmp	r3, #1
 8005142:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005146:	d001      	beq.n	800514c <_strtol_l.constprop.0+0xc>
 8005148:	2b24      	cmp	r3, #36	; 0x24
 800514a:	d906      	bls.n	800515a <_strtol_l.constprop.0+0x1a>
 800514c:	f7ff fc2e 	bl	80049ac <__errno>
 8005150:	2316      	movs	r3, #22
 8005152:	6003      	str	r3, [r0, #0]
 8005154:	2000      	movs	r0, #0
 8005156:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800515a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8005240 <_strtol_l.constprop.0+0x100>
 800515e:	460d      	mov	r5, r1
 8005160:	462e      	mov	r6, r5
 8005162:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005166:	f814 700c 	ldrb.w	r7, [r4, ip]
 800516a:	f017 0708 	ands.w	r7, r7, #8
 800516e:	d1f7      	bne.n	8005160 <_strtol_l.constprop.0+0x20>
 8005170:	2c2d      	cmp	r4, #45	; 0x2d
 8005172:	d132      	bne.n	80051da <_strtol_l.constprop.0+0x9a>
 8005174:	782c      	ldrb	r4, [r5, #0]
 8005176:	2701      	movs	r7, #1
 8005178:	1cb5      	adds	r5, r6, #2
 800517a:	2b00      	cmp	r3, #0
 800517c:	d05b      	beq.n	8005236 <_strtol_l.constprop.0+0xf6>
 800517e:	2b10      	cmp	r3, #16
 8005180:	d109      	bne.n	8005196 <_strtol_l.constprop.0+0x56>
 8005182:	2c30      	cmp	r4, #48	; 0x30
 8005184:	d107      	bne.n	8005196 <_strtol_l.constprop.0+0x56>
 8005186:	782c      	ldrb	r4, [r5, #0]
 8005188:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800518c:	2c58      	cmp	r4, #88	; 0x58
 800518e:	d14d      	bne.n	800522c <_strtol_l.constprop.0+0xec>
 8005190:	786c      	ldrb	r4, [r5, #1]
 8005192:	2310      	movs	r3, #16
 8005194:	3502      	adds	r5, #2
 8005196:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800519a:	f108 38ff 	add.w	r8, r8, #4294967295
 800519e:	f04f 0c00 	mov.w	ip, #0
 80051a2:	fbb8 f9f3 	udiv	r9, r8, r3
 80051a6:	4666      	mov	r6, ip
 80051a8:	fb03 8a19 	mls	sl, r3, r9, r8
 80051ac:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80051b0:	f1be 0f09 	cmp.w	lr, #9
 80051b4:	d816      	bhi.n	80051e4 <_strtol_l.constprop.0+0xa4>
 80051b6:	4674      	mov	r4, lr
 80051b8:	42a3      	cmp	r3, r4
 80051ba:	dd24      	ble.n	8005206 <_strtol_l.constprop.0+0xc6>
 80051bc:	f1bc 0f00 	cmp.w	ip, #0
 80051c0:	db1e      	blt.n	8005200 <_strtol_l.constprop.0+0xc0>
 80051c2:	45b1      	cmp	r9, r6
 80051c4:	d31c      	bcc.n	8005200 <_strtol_l.constprop.0+0xc0>
 80051c6:	d101      	bne.n	80051cc <_strtol_l.constprop.0+0x8c>
 80051c8:	45a2      	cmp	sl, r4
 80051ca:	db19      	blt.n	8005200 <_strtol_l.constprop.0+0xc0>
 80051cc:	fb06 4603 	mla	r6, r6, r3, r4
 80051d0:	f04f 0c01 	mov.w	ip, #1
 80051d4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80051d8:	e7e8      	b.n	80051ac <_strtol_l.constprop.0+0x6c>
 80051da:	2c2b      	cmp	r4, #43	; 0x2b
 80051dc:	bf04      	itt	eq
 80051de:	782c      	ldrbeq	r4, [r5, #0]
 80051e0:	1cb5      	addeq	r5, r6, #2
 80051e2:	e7ca      	b.n	800517a <_strtol_l.constprop.0+0x3a>
 80051e4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80051e8:	f1be 0f19 	cmp.w	lr, #25
 80051ec:	d801      	bhi.n	80051f2 <_strtol_l.constprop.0+0xb2>
 80051ee:	3c37      	subs	r4, #55	; 0x37
 80051f0:	e7e2      	b.n	80051b8 <_strtol_l.constprop.0+0x78>
 80051f2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80051f6:	f1be 0f19 	cmp.w	lr, #25
 80051fa:	d804      	bhi.n	8005206 <_strtol_l.constprop.0+0xc6>
 80051fc:	3c57      	subs	r4, #87	; 0x57
 80051fe:	e7db      	b.n	80051b8 <_strtol_l.constprop.0+0x78>
 8005200:	f04f 3cff 	mov.w	ip, #4294967295
 8005204:	e7e6      	b.n	80051d4 <_strtol_l.constprop.0+0x94>
 8005206:	f1bc 0f00 	cmp.w	ip, #0
 800520a:	da05      	bge.n	8005218 <_strtol_l.constprop.0+0xd8>
 800520c:	2322      	movs	r3, #34	; 0x22
 800520e:	6003      	str	r3, [r0, #0]
 8005210:	4646      	mov	r6, r8
 8005212:	b942      	cbnz	r2, 8005226 <_strtol_l.constprop.0+0xe6>
 8005214:	4630      	mov	r0, r6
 8005216:	e79e      	b.n	8005156 <_strtol_l.constprop.0+0x16>
 8005218:	b107      	cbz	r7, 800521c <_strtol_l.constprop.0+0xdc>
 800521a:	4276      	negs	r6, r6
 800521c:	2a00      	cmp	r2, #0
 800521e:	d0f9      	beq.n	8005214 <_strtol_l.constprop.0+0xd4>
 8005220:	f1bc 0f00 	cmp.w	ip, #0
 8005224:	d000      	beq.n	8005228 <_strtol_l.constprop.0+0xe8>
 8005226:	1e69      	subs	r1, r5, #1
 8005228:	6011      	str	r1, [r2, #0]
 800522a:	e7f3      	b.n	8005214 <_strtol_l.constprop.0+0xd4>
 800522c:	2430      	movs	r4, #48	; 0x30
 800522e:	2b00      	cmp	r3, #0
 8005230:	d1b1      	bne.n	8005196 <_strtol_l.constprop.0+0x56>
 8005232:	2308      	movs	r3, #8
 8005234:	e7af      	b.n	8005196 <_strtol_l.constprop.0+0x56>
 8005236:	2c30      	cmp	r4, #48	; 0x30
 8005238:	d0a5      	beq.n	8005186 <_strtol_l.constprop.0+0x46>
 800523a:	230a      	movs	r3, #10
 800523c:	e7ab      	b.n	8005196 <_strtol_l.constprop.0+0x56>
 800523e:	bf00      	nop
 8005240:	080056c4 	.word	0x080056c4

08005244 <_strtol_r>:
 8005244:	f7ff bf7c 	b.w	8005140 <_strtol_l.constprop.0>

08005248 <_strtoul_l.constprop.0>:
 8005248:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800524c:	4f36      	ldr	r7, [pc, #216]	; (8005328 <_strtoul_l.constprop.0+0xe0>)
 800524e:	4686      	mov	lr, r0
 8005250:	460d      	mov	r5, r1
 8005252:	4628      	mov	r0, r5
 8005254:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005258:	5de6      	ldrb	r6, [r4, r7]
 800525a:	f016 0608 	ands.w	r6, r6, #8
 800525e:	d1f8      	bne.n	8005252 <_strtoul_l.constprop.0+0xa>
 8005260:	2c2d      	cmp	r4, #45	; 0x2d
 8005262:	d12f      	bne.n	80052c4 <_strtoul_l.constprop.0+0x7c>
 8005264:	782c      	ldrb	r4, [r5, #0]
 8005266:	2601      	movs	r6, #1
 8005268:	1c85      	adds	r5, r0, #2
 800526a:	2b00      	cmp	r3, #0
 800526c:	d057      	beq.n	800531e <_strtoul_l.constprop.0+0xd6>
 800526e:	2b10      	cmp	r3, #16
 8005270:	d109      	bne.n	8005286 <_strtoul_l.constprop.0+0x3e>
 8005272:	2c30      	cmp	r4, #48	; 0x30
 8005274:	d107      	bne.n	8005286 <_strtoul_l.constprop.0+0x3e>
 8005276:	7828      	ldrb	r0, [r5, #0]
 8005278:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800527c:	2858      	cmp	r0, #88	; 0x58
 800527e:	d149      	bne.n	8005314 <_strtoul_l.constprop.0+0xcc>
 8005280:	786c      	ldrb	r4, [r5, #1]
 8005282:	2310      	movs	r3, #16
 8005284:	3502      	adds	r5, #2
 8005286:	f04f 38ff 	mov.w	r8, #4294967295
 800528a:	2700      	movs	r7, #0
 800528c:	fbb8 f8f3 	udiv	r8, r8, r3
 8005290:	fb03 f908 	mul.w	r9, r3, r8
 8005294:	ea6f 0909 	mvn.w	r9, r9
 8005298:	4638      	mov	r0, r7
 800529a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800529e:	f1bc 0f09 	cmp.w	ip, #9
 80052a2:	d814      	bhi.n	80052ce <_strtoul_l.constprop.0+0x86>
 80052a4:	4664      	mov	r4, ip
 80052a6:	42a3      	cmp	r3, r4
 80052a8:	dd22      	ble.n	80052f0 <_strtoul_l.constprop.0+0xa8>
 80052aa:	2f00      	cmp	r7, #0
 80052ac:	db1d      	blt.n	80052ea <_strtoul_l.constprop.0+0xa2>
 80052ae:	4580      	cmp	r8, r0
 80052b0:	d31b      	bcc.n	80052ea <_strtoul_l.constprop.0+0xa2>
 80052b2:	d101      	bne.n	80052b8 <_strtoul_l.constprop.0+0x70>
 80052b4:	45a1      	cmp	r9, r4
 80052b6:	db18      	blt.n	80052ea <_strtoul_l.constprop.0+0xa2>
 80052b8:	fb00 4003 	mla	r0, r0, r3, r4
 80052bc:	2701      	movs	r7, #1
 80052be:	f815 4b01 	ldrb.w	r4, [r5], #1
 80052c2:	e7ea      	b.n	800529a <_strtoul_l.constprop.0+0x52>
 80052c4:	2c2b      	cmp	r4, #43	; 0x2b
 80052c6:	bf04      	itt	eq
 80052c8:	782c      	ldrbeq	r4, [r5, #0]
 80052ca:	1c85      	addeq	r5, r0, #2
 80052cc:	e7cd      	b.n	800526a <_strtoul_l.constprop.0+0x22>
 80052ce:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80052d2:	f1bc 0f19 	cmp.w	ip, #25
 80052d6:	d801      	bhi.n	80052dc <_strtoul_l.constprop.0+0x94>
 80052d8:	3c37      	subs	r4, #55	; 0x37
 80052da:	e7e4      	b.n	80052a6 <_strtoul_l.constprop.0+0x5e>
 80052dc:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80052e0:	f1bc 0f19 	cmp.w	ip, #25
 80052e4:	d804      	bhi.n	80052f0 <_strtoul_l.constprop.0+0xa8>
 80052e6:	3c57      	subs	r4, #87	; 0x57
 80052e8:	e7dd      	b.n	80052a6 <_strtoul_l.constprop.0+0x5e>
 80052ea:	f04f 37ff 	mov.w	r7, #4294967295
 80052ee:	e7e6      	b.n	80052be <_strtoul_l.constprop.0+0x76>
 80052f0:	2f00      	cmp	r7, #0
 80052f2:	da07      	bge.n	8005304 <_strtoul_l.constprop.0+0xbc>
 80052f4:	2322      	movs	r3, #34	; 0x22
 80052f6:	f8ce 3000 	str.w	r3, [lr]
 80052fa:	f04f 30ff 	mov.w	r0, #4294967295
 80052fe:	b932      	cbnz	r2, 800530e <_strtoul_l.constprop.0+0xc6>
 8005300:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005304:	b106      	cbz	r6, 8005308 <_strtoul_l.constprop.0+0xc0>
 8005306:	4240      	negs	r0, r0
 8005308:	2a00      	cmp	r2, #0
 800530a:	d0f9      	beq.n	8005300 <_strtoul_l.constprop.0+0xb8>
 800530c:	b107      	cbz	r7, 8005310 <_strtoul_l.constprop.0+0xc8>
 800530e:	1e69      	subs	r1, r5, #1
 8005310:	6011      	str	r1, [r2, #0]
 8005312:	e7f5      	b.n	8005300 <_strtoul_l.constprop.0+0xb8>
 8005314:	2430      	movs	r4, #48	; 0x30
 8005316:	2b00      	cmp	r3, #0
 8005318:	d1b5      	bne.n	8005286 <_strtoul_l.constprop.0+0x3e>
 800531a:	2308      	movs	r3, #8
 800531c:	e7b3      	b.n	8005286 <_strtoul_l.constprop.0+0x3e>
 800531e:	2c30      	cmp	r4, #48	; 0x30
 8005320:	d0a9      	beq.n	8005276 <_strtoul_l.constprop.0+0x2e>
 8005322:	230a      	movs	r3, #10
 8005324:	e7af      	b.n	8005286 <_strtoul_l.constprop.0+0x3e>
 8005326:	bf00      	nop
 8005328:	080056c4 	.word	0x080056c4

0800532c <_strtoul_r>:
 800532c:	f7ff bf8c 	b.w	8005248 <_strtoul_l.constprop.0>

08005330 <__submore>:
 8005330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005334:	460c      	mov	r4, r1
 8005336:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8005338:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800533c:	4299      	cmp	r1, r3
 800533e:	d11d      	bne.n	800537c <__submore+0x4c>
 8005340:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005344:	f000 f89c 	bl	8005480 <_malloc_r>
 8005348:	b918      	cbnz	r0, 8005352 <__submore+0x22>
 800534a:	f04f 30ff 	mov.w	r0, #4294967295
 800534e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005352:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005356:	63a3      	str	r3, [r4, #56]	; 0x38
 8005358:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800535c:	6360      	str	r0, [r4, #52]	; 0x34
 800535e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8005362:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005366:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800536a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800536e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8005372:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8005376:	6020      	str	r0, [r4, #0]
 8005378:	2000      	movs	r0, #0
 800537a:	e7e8      	b.n	800534e <__submore+0x1e>
 800537c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800537e:	0077      	lsls	r7, r6, #1
 8005380:	463a      	mov	r2, r7
 8005382:	f000 f8f1 	bl	8005568 <_realloc_r>
 8005386:	4605      	mov	r5, r0
 8005388:	2800      	cmp	r0, #0
 800538a:	d0de      	beq.n	800534a <__submore+0x1a>
 800538c:	eb00 0806 	add.w	r8, r0, r6
 8005390:	4601      	mov	r1, r0
 8005392:	4632      	mov	r2, r6
 8005394:	4640      	mov	r0, r8
 8005396:	f7ff fb33 	bl	8004a00 <memcpy>
 800539a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800539e:	f8c4 8000 	str.w	r8, [r4]
 80053a2:	e7e9      	b.n	8005378 <__submore+0x48>

080053a4 <__retarget_lock_acquire_recursive>:
 80053a4:	4770      	bx	lr

080053a6 <__retarget_lock_release_recursive>:
 80053a6:	4770      	bx	lr

080053a8 <_free_r>:
 80053a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80053aa:	2900      	cmp	r1, #0
 80053ac:	d044      	beq.n	8005438 <_free_r+0x90>
 80053ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053b2:	9001      	str	r0, [sp, #4]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	f1a1 0404 	sub.w	r4, r1, #4
 80053ba:	bfb8      	it	lt
 80053bc:	18e4      	addlt	r4, r4, r3
 80053be:	f000 f913 	bl	80055e8 <__malloc_lock>
 80053c2:	4a1e      	ldr	r2, [pc, #120]	; (800543c <_free_r+0x94>)
 80053c4:	9801      	ldr	r0, [sp, #4]
 80053c6:	6813      	ldr	r3, [r2, #0]
 80053c8:	b933      	cbnz	r3, 80053d8 <_free_r+0x30>
 80053ca:	6063      	str	r3, [r4, #4]
 80053cc:	6014      	str	r4, [r2, #0]
 80053ce:	b003      	add	sp, #12
 80053d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80053d4:	f000 b90e 	b.w	80055f4 <__malloc_unlock>
 80053d8:	42a3      	cmp	r3, r4
 80053da:	d908      	bls.n	80053ee <_free_r+0x46>
 80053dc:	6825      	ldr	r5, [r4, #0]
 80053de:	1961      	adds	r1, r4, r5
 80053e0:	428b      	cmp	r3, r1
 80053e2:	bf01      	itttt	eq
 80053e4:	6819      	ldreq	r1, [r3, #0]
 80053e6:	685b      	ldreq	r3, [r3, #4]
 80053e8:	1949      	addeq	r1, r1, r5
 80053ea:	6021      	streq	r1, [r4, #0]
 80053ec:	e7ed      	b.n	80053ca <_free_r+0x22>
 80053ee:	461a      	mov	r2, r3
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	b10b      	cbz	r3, 80053f8 <_free_r+0x50>
 80053f4:	42a3      	cmp	r3, r4
 80053f6:	d9fa      	bls.n	80053ee <_free_r+0x46>
 80053f8:	6811      	ldr	r1, [r2, #0]
 80053fa:	1855      	adds	r5, r2, r1
 80053fc:	42a5      	cmp	r5, r4
 80053fe:	d10b      	bne.n	8005418 <_free_r+0x70>
 8005400:	6824      	ldr	r4, [r4, #0]
 8005402:	4421      	add	r1, r4
 8005404:	1854      	adds	r4, r2, r1
 8005406:	42a3      	cmp	r3, r4
 8005408:	6011      	str	r1, [r2, #0]
 800540a:	d1e0      	bne.n	80053ce <_free_r+0x26>
 800540c:	681c      	ldr	r4, [r3, #0]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	6053      	str	r3, [r2, #4]
 8005412:	4421      	add	r1, r4
 8005414:	6011      	str	r1, [r2, #0]
 8005416:	e7da      	b.n	80053ce <_free_r+0x26>
 8005418:	d902      	bls.n	8005420 <_free_r+0x78>
 800541a:	230c      	movs	r3, #12
 800541c:	6003      	str	r3, [r0, #0]
 800541e:	e7d6      	b.n	80053ce <_free_r+0x26>
 8005420:	6825      	ldr	r5, [r4, #0]
 8005422:	1961      	adds	r1, r4, r5
 8005424:	428b      	cmp	r3, r1
 8005426:	bf04      	itt	eq
 8005428:	6819      	ldreq	r1, [r3, #0]
 800542a:	685b      	ldreq	r3, [r3, #4]
 800542c:	6063      	str	r3, [r4, #4]
 800542e:	bf04      	itt	eq
 8005430:	1949      	addeq	r1, r1, r5
 8005432:	6021      	streq	r1, [r4, #0]
 8005434:	6054      	str	r4, [r2, #4]
 8005436:	e7ca      	b.n	80053ce <_free_r+0x26>
 8005438:	b003      	add	sp, #12
 800543a:	bd30      	pop	{r4, r5, pc}
 800543c:	200002fc 	.word	0x200002fc

08005440 <sbrk_aligned>:
 8005440:	b570      	push	{r4, r5, r6, lr}
 8005442:	4e0e      	ldr	r6, [pc, #56]	; (800547c <sbrk_aligned+0x3c>)
 8005444:	460c      	mov	r4, r1
 8005446:	6831      	ldr	r1, [r6, #0]
 8005448:	4605      	mov	r5, r0
 800544a:	b911      	cbnz	r1, 8005452 <sbrk_aligned+0x12>
 800544c:	f000 f8bc 	bl	80055c8 <_sbrk_r>
 8005450:	6030      	str	r0, [r6, #0]
 8005452:	4621      	mov	r1, r4
 8005454:	4628      	mov	r0, r5
 8005456:	f000 f8b7 	bl	80055c8 <_sbrk_r>
 800545a:	1c43      	adds	r3, r0, #1
 800545c:	d00a      	beq.n	8005474 <sbrk_aligned+0x34>
 800545e:	1cc4      	adds	r4, r0, #3
 8005460:	f024 0403 	bic.w	r4, r4, #3
 8005464:	42a0      	cmp	r0, r4
 8005466:	d007      	beq.n	8005478 <sbrk_aligned+0x38>
 8005468:	1a21      	subs	r1, r4, r0
 800546a:	4628      	mov	r0, r5
 800546c:	f000 f8ac 	bl	80055c8 <_sbrk_r>
 8005470:	3001      	adds	r0, #1
 8005472:	d101      	bne.n	8005478 <sbrk_aligned+0x38>
 8005474:	f04f 34ff 	mov.w	r4, #4294967295
 8005478:	4620      	mov	r0, r4
 800547a:	bd70      	pop	{r4, r5, r6, pc}
 800547c:	20000300 	.word	0x20000300

08005480 <_malloc_r>:
 8005480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005484:	1ccd      	adds	r5, r1, #3
 8005486:	f025 0503 	bic.w	r5, r5, #3
 800548a:	3508      	adds	r5, #8
 800548c:	2d0c      	cmp	r5, #12
 800548e:	bf38      	it	cc
 8005490:	250c      	movcc	r5, #12
 8005492:	2d00      	cmp	r5, #0
 8005494:	4607      	mov	r7, r0
 8005496:	db01      	blt.n	800549c <_malloc_r+0x1c>
 8005498:	42a9      	cmp	r1, r5
 800549a:	d905      	bls.n	80054a8 <_malloc_r+0x28>
 800549c:	230c      	movs	r3, #12
 800549e:	603b      	str	r3, [r7, #0]
 80054a0:	2600      	movs	r6, #0
 80054a2:	4630      	mov	r0, r6
 80054a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054a8:	4e2e      	ldr	r6, [pc, #184]	; (8005564 <_malloc_r+0xe4>)
 80054aa:	f000 f89d 	bl	80055e8 <__malloc_lock>
 80054ae:	6833      	ldr	r3, [r6, #0]
 80054b0:	461c      	mov	r4, r3
 80054b2:	bb34      	cbnz	r4, 8005502 <_malloc_r+0x82>
 80054b4:	4629      	mov	r1, r5
 80054b6:	4638      	mov	r0, r7
 80054b8:	f7ff ffc2 	bl	8005440 <sbrk_aligned>
 80054bc:	1c43      	adds	r3, r0, #1
 80054be:	4604      	mov	r4, r0
 80054c0:	d14d      	bne.n	800555e <_malloc_r+0xde>
 80054c2:	6834      	ldr	r4, [r6, #0]
 80054c4:	4626      	mov	r6, r4
 80054c6:	2e00      	cmp	r6, #0
 80054c8:	d140      	bne.n	800554c <_malloc_r+0xcc>
 80054ca:	6823      	ldr	r3, [r4, #0]
 80054cc:	4631      	mov	r1, r6
 80054ce:	4638      	mov	r0, r7
 80054d0:	eb04 0803 	add.w	r8, r4, r3
 80054d4:	f000 f878 	bl	80055c8 <_sbrk_r>
 80054d8:	4580      	cmp	r8, r0
 80054da:	d13a      	bne.n	8005552 <_malloc_r+0xd2>
 80054dc:	6821      	ldr	r1, [r4, #0]
 80054de:	3503      	adds	r5, #3
 80054e0:	1a6d      	subs	r5, r5, r1
 80054e2:	f025 0503 	bic.w	r5, r5, #3
 80054e6:	3508      	adds	r5, #8
 80054e8:	2d0c      	cmp	r5, #12
 80054ea:	bf38      	it	cc
 80054ec:	250c      	movcc	r5, #12
 80054ee:	4629      	mov	r1, r5
 80054f0:	4638      	mov	r0, r7
 80054f2:	f7ff ffa5 	bl	8005440 <sbrk_aligned>
 80054f6:	3001      	adds	r0, #1
 80054f8:	d02b      	beq.n	8005552 <_malloc_r+0xd2>
 80054fa:	6823      	ldr	r3, [r4, #0]
 80054fc:	442b      	add	r3, r5
 80054fe:	6023      	str	r3, [r4, #0]
 8005500:	e00e      	b.n	8005520 <_malloc_r+0xa0>
 8005502:	6822      	ldr	r2, [r4, #0]
 8005504:	1b52      	subs	r2, r2, r5
 8005506:	d41e      	bmi.n	8005546 <_malloc_r+0xc6>
 8005508:	2a0b      	cmp	r2, #11
 800550a:	d916      	bls.n	800553a <_malloc_r+0xba>
 800550c:	1961      	adds	r1, r4, r5
 800550e:	42a3      	cmp	r3, r4
 8005510:	6025      	str	r5, [r4, #0]
 8005512:	bf18      	it	ne
 8005514:	6059      	strne	r1, [r3, #4]
 8005516:	6863      	ldr	r3, [r4, #4]
 8005518:	bf08      	it	eq
 800551a:	6031      	streq	r1, [r6, #0]
 800551c:	5162      	str	r2, [r4, r5]
 800551e:	604b      	str	r3, [r1, #4]
 8005520:	4638      	mov	r0, r7
 8005522:	f104 060b 	add.w	r6, r4, #11
 8005526:	f000 f865 	bl	80055f4 <__malloc_unlock>
 800552a:	f026 0607 	bic.w	r6, r6, #7
 800552e:	1d23      	adds	r3, r4, #4
 8005530:	1af2      	subs	r2, r6, r3
 8005532:	d0b6      	beq.n	80054a2 <_malloc_r+0x22>
 8005534:	1b9b      	subs	r3, r3, r6
 8005536:	50a3      	str	r3, [r4, r2]
 8005538:	e7b3      	b.n	80054a2 <_malloc_r+0x22>
 800553a:	6862      	ldr	r2, [r4, #4]
 800553c:	42a3      	cmp	r3, r4
 800553e:	bf0c      	ite	eq
 8005540:	6032      	streq	r2, [r6, #0]
 8005542:	605a      	strne	r2, [r3, #4]
 8005544:	e7ec      	b.n	8005520 <_malloc_r+0xa0>
 8005546:	4623      	mov	r3, r4
 8005548:	6864      	ldr	r4, [r4, #4]
 800554a:	e7b2      	b.n	80054b2 <_malloc_r+0x32>
 800554c:	4634      	mov	r4, r6
 800554e:	6876      	ldr	r6, [r6, #4]
 8005550:	e7b9      	b.n	80054c6 <_malloc_r+0x46>
 8005552:	230c      	movs	r3, #12
 8005554:	603b      	str	r3, [r7, #0]
 8005556:	4638      	mov	r0, r7
 8005558:	f000 f84c 	bl	80055f4 <__malloc_unlock>
 800555c:	e7a1      	b.n	80054a2 <_malloc_r+0x22>
 800555e:	6025      	str	r5, [r4, #0]
 8005560:	e7de      	b.n	8005520 <_malloc_r+0xa0>
 8005562:	bf00      	nop
 8005564:	200002fc 	.word	0x200002fc

08005568 <_realloc_r>:
 8005568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800556c:	4680      	mov	r8, r0
 800556e:	4614      	mov	r4, r2
 8005570:	460e      	mov	r6, r1
 8005572:	b921      	cbnz	r1, 800557e <_realloc_r+0x16>
 8005574:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005578:	4611      	mov	r1, r2
 800557a:	f7ff bf81 	b.w	8005480 <_malloc_r>
 800557e:	b92a      	cbnz	r2, 800558c <_realloc_r+0x24>
 8005580:	f7ff ff12 	bl	80053a8 <_free_r>
 8005584:	4625      	mov	r5, r4
 8005586:	4628      	mov	r0, r5
 8005588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800558c:	f000 f838 	bl	8005600 <_malloc_usable_size_r>
 8005590:	4284      	cmp	r4, r0
 8005592:	4607      	mov	r7, r0
 8005594:	d802      	bhi.n	800559c <_realloc_r+0x34>
 8005596:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800559a:	d812      	bhi.n	80055c2 <_realloc_r+0x5a>
 800559c:	4621      	mov	r1, r4
 800559e:	4640      	mov	r0, r8
 80055a0:	f7ff ff6e 	bl	8005480 <_malloc_r>
 80055a4:	4605      	mov	r5, r0
 80055a6:	2800      	cmp	r0, #0
 80055a8:	d0ed      	beq.n	8005586 <_realloc_r+0x1e>
 80055aa:	42bc      	cmp	r4, r7
 80055ac:	4622      	mov	r2, r4
 80055ae:	4631      	mov	r1, r6
 80055b0:	bf28      	it	cs
 80055b2:	463a      	movcs	r2, r7
 80055b4:	f7ff fa24 	bl	8004a00 <memcpy>
 80055b8:	4631      	mov	r1, r6
 80055ba:	4640      	mov	r0, r8
 80055bc:	f7ff fef4 	bl	80053a8 <_free_r>
 80055c0:	e7e1      	b.n	8005586 <_realloc_r+0x1e>
 80055c2:	4635      	mov	r5, r6
 80055c4:	e7df      	b.n	8005586 <_realloc_r+0x1e>
	...

080055c8 <_sbrk_r>:
 80055c8:	b538      	push	{r3, r4, r5, lr}
 80055ca:	4d06      	ldr	r5, [pc, #24]	; (80055e4 <_sbrk_r+0x1c>)
 80055cc:	2300      	movs	r3, #0
 80055ce:	4604      	mov	r4, r0
 80055d0:	4608      	mov	r0, r1
 80055d2:	602b      	str	r3, [r5, #0]
 80055d4:	f7fb fdcc 	bl	8001170 <_sbrk>
 80055d8:	1c43      	adds	r3, r0, #1
 80055da:	d102      	bne.n	80055e2 <_sbrk_r+0x1a>
 80055dc:	682b      	ldr	r3, [r5, #0]
 80055de:	b103      	cbz	r3, 80055e2 <_sbrk_r+0x1a>
 80055e0:	6023      	str	r3, [r4, #0]
 80055e2:	bd38      	pop	{r3, r4, r5, pc}
 80055e4:	200002f4 	.word	0x200002f4

080055e8 <__malloc_lock>:
 80055e8:	4801      	ldr	r0, [pc, #4]	; (80055f0 <__malloc_lock+0x8>)
 80055ea:	f7ff bedb 	b.w	80053a4 <__retarget_lock_acquire_recursive>
 80055ee:	bf00      	nop
 80055f0:	200002f8 	.word	0x200002f8

080055f4 <__malloc_unlock>:
 80055f4:	4801      	ldr	r0, [pc, #4]	; (80055fc <__malloc_unlock+0x8>)
 80055f6:	f7ff bed6 	b.w	80053a6 <__retarget_lock_release_recursive>
 80055fa:	bf00      	nop
 80055fc:	200002f8 	.word	0x200002f8

08005600 <_malloc_usable_size_r>:
 8005600:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005604:	1f18      	subs	r0, r3, #4
 8005606:	2b00      	cmp	r3, #0
 8005608:	bfbc      	itt	lt
 800560a:	580b      	ldrlt	r3, [r1, r0]
 800560c:	18c0      	addlt	r0, r0, r3
 800560e:	4770      	bx	lr

08005610 <_init>:
 8005610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005612:	bf00      	nop
 8005614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005616:	bc08      	pop	{r3}
 8005618:	469e      	mov	lr, r3
 800561a:	4770      	bx	lr

0800561c <_fini>:
 800561c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800561e:	bf00      	nop
 8005620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005622:	bc08      	pop	{r3}
 8005624:	469e      	mov	lr, r3
 8005626:	4770      	bx	lr
